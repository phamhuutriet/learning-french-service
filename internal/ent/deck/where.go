// Code generated by ent, DO NOT EDIT.

package deck

import (
	"learning-french-service/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Deck {
	return predicate.Deck(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Deck {
	return predicate.Deck(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Deck {
	return predicate.Deck(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Deck {
	return predicate.Deck(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Deck {
	return predicate.Deck(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Deck {
	return predicate.Deck(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Deck {
	return predicate.Deck(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Deck {
	return predicate.Deck(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Deck {
	return predicate.Deck(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Deck {
	return predicate.Deck(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Deck {
	return predicate.Deck(sql.FieldEQ(FieldDescription, v))
}

// Category applies equality check predicate on the "category" field. It's identical to CategoryEQ.
func Category(v string) predicate.Deck {
	return predicate.Deck(sql.FieldEQ(FieldCategory, v))
}

// TargetLevel applies equality check predicate on the "target_level" field. It's identical to TargetLevelEQ.
func TargetLevel(v string) predicate.Deck {
	return predicate.Deck(sql.FieldEQ(FieldTargetLevel, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.Deck {
	return predicate.Deck(sql.FieldEQ(FieldIsActive, v))
}

// WordCount applies equality check predicate on the "word_count" field. It's identical to WordCountEQ.
func WordCount(v int) predicate.Deck {
	return predicate.Deck(sql.FieldEQ(FieldWordCount, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Deck {
	return predicate.Deck(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Deck {
	return predicate.Deck(sql.FieldEQ(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Deck {
	return predicate.Deck(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Deck {
	return predicate.Deck(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Deck {
	return predicate.Deck(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Deck {
	return predicate.Deck(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Deck {
	return predicate.Deck(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Deck {
	return predicate.Deck(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Deck {
	return predicate.Deck(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Deck {
	return predicate.Deck(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Deck {
	return predicate.Deck(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Deck {
	return predicate.Deck(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Deck {
	return predicate.Deck(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Deck {
	return predicate.Deck(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Deck {
	return predicate.Deck(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Deck {
	return predicate.Deck(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Deck {
	return predicate.Deck(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Deck {
	return predicate.Deck(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Deck {
	return predicate.Deck(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Deck {
	return predicate.Deck(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Deck {
	return predicate.Deck(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Deck {
	return predicate.Deck(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Deck {
	return predicate.Deck(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Deck {
	return predicate.Deck(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Deck {
	return predicate.Deck(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Deck {
	return predicate.Deck(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Deck {
	return predicate.Deck(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Deck {
	return predicate.Deck(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Deck {
	return predicate.Deck(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Deck {
	return predicate.Deck(sql.FieldContainsFold(FieldDescription, v))
}

// CategoryEQ applies the EQ predicate on the "category" field.
func CategoryEQ(v string) predicate.Deck {
	return predicate.Deck(sql.FieldEQ(FieldCategory, v))
}

// CategoryNEQ applies the NEQ predicate on the "category" field.
func CategoryNEQ(v string) predicate.Deck {
	return predicate.Deck(sql.FieldNEQ(FieldCategory, v))
}

// CategoryIn applies the In predicate on the "category" field.
func CategoryIn(vs ...string) predicate.Deck {
	return predicate.Deck(sql.FieldIn(FieldCategory, vs...))
}

// CategoryNotIn applies the NotIn predicate on the "category" field.
func CategoryNotIn(vs ...string) predicate.Deck {
	return predicate.Deck(sql.FieldNotIn(FieldCategory, vs...))
}

// CategoryGT applies the GT predicate on the "category" field.
func CategoryGT(v string) predicate.Deck {
	return predicate.Deck(sql.FieldGT(FieldCategory, v))
}

// CategoryGTE applies the GTE predicate on the "category" field.
func CategoryGTE(v string) predicate.Deck {
	return predicate.Deck(sql.FieldGTE(FieldCategory, v))
}

// CategoryLT applies the LT predicate on the "category" field.
func CategoryLT(v string) predicate.Deck {
	return predicate.Deck(sql.FieldLT(FieldCategory, v))
}

// CategoryLTE applies the LTE predicate on the "category" field.
func CategoryLTE(v string) predicate.Deck {
	return predicate.Deck(sql.FieldLTE(FieldCategory, v))
}

// CategoryContains applies the Contains predicate on the "category" field.
func CategoryContains(v string) predicate.Deck {
	return predicate.Deck(sql.FieldContains(FieldCategory, v))
}

// CategoryHasPrefix applies the HasPrefix predicate on the "category" field.
func CategoryHasPrefix(v string) predicate.Deck {
	return predicate.Deck(sql.FieldHasPrefix(FieldCategory, v))
}

// CategoryHasSuffix applies the HasSuffix predicate on the "category" field.
func CategoryHasSuffix(v string) predicate.Deck {
	return predicate.Deck(sql.FieldHasSuffix(FieldCategory, v))
}

// CategoryIsNil applies the IsNil predicate on the "category" field.
func CategoryIsNil() predicate.Deck {
	return predicate.Deck(sql.FieldIsNull(FieldCategory))
}

// CategoryNotNil applies the NotNil predicate on the "category" field.
func CategoryNotNil() predicate.Deck {
	return predicate.Deck(sql.FieldNotNull(FieldCategory))
}

// CategoryEqualFold applies the EqualFold predicate on the "category" field.
func CategoryEqualFold(v string) predicate.Deck {
	return predicate.Deck(sql.FieldEqualFold(FieldCategory, v))
}

// CategoryContainsFold applies the ContainsFold predicate on the "category" field.
func CategoryContainsFold(v string) predicate.Deck {
	return predicate.Deck(sql.FieldContainsFold(FieldCategory, v))
}

// TargetLevelEQ applies the EQ predicate on the "target_level" field.
func TargetLevelEQ(v string) predicate.Deck {
	return predicate.Deck(sql.FieldEQ(FieldTargetLevel, v))
}

// TargetLevelNEQ applies the NEQ predicate on the "target_level" field.
func TargetLevelNEQ(v string) predicate.Deck {
	return predicate.Deck(sql.FieldNEQ(FieldTargetLevel, v))
}

// TargetLevelIn applies the In predicate on the "target_level" field.
func TargetLevelIn(vs ...string) predicate.Deck {
	return predicate.Deck(sql.FieldIn(FieldTargetLevel, vs...))
}

// TargetLevelNotIn applies the NotIn predicate on the "target_level" field.
func TargetLevelNotIn(vs ...string) predicate.Deck {
	return predicate.Deck(sql.FieldNotIn(FieldTargetLevel, vs...))
}

// TargetLevelGT applies the GT predicate on the "target_level" field.
func TargetLevelGT(v string) predicate.Deck {
	return predicate.Deck(sql.FieldGT(FieldTargetLevel, v))
}

// TargetLevelGTE applies the GTE predicate on the "target_level" field.
func TargetLevelGTE(v string) predicate.Deck {
	return predicate.Deck(sql.FieldGTE(FieldTargetLevel, v))
}

// TargetLevelLT applies the LT predicate on the "target_level" field.
func TargetLevelLT(v string) predicate.Deck {
	return predicate.Deck(sql.FieldLT(FieldTargetLevel, v))
}

// TargetLevelLTE applies the LTE predicate on the "target_level" field.
func TargetLevelLTE(v string) predicate.Deck {
	return predicate.Deck(sql.FieldLTE(FieldTargetLevel, v))
}

// TargetLevelContains applies the Contains predicate on the "target_level" field.
func TargetLevelContains(v string) predicate.Deck {
	return predicate.Deck(sql.FieldContains(FieldTargetLevel, v))
}

// TargetLevelHasPrefix applies the HasPrefix predicate on the "target_level" field.
func TargetLevelHasPrefix(v string) predicate.Deck {
	return predicate.Deck(sql.FieldHasPrefix(FieldTargetLevel, v))
}

// TargetLevelHasSuffix applies the HasSuffix predicate on the "target_level" field.
func TargetLevelHasSuffix(v string) predicate.Deck {
	return predicate.Deck(sql.FieldHasSuffix(FieldTargetLevel, v))
}

// TargetLevelIsNil applies the IsNil predicate on the "target_level" field.
func TargetLevelIsNil() predicate.Deck {
	return predicate.Deck(sql.FieldIsNull(FieldTargetLevel))
}

// TargetLevelNotNil applies the NotNil predicate on the "target_level" field.
func TargetLevelNotNil() predicate.Deck {
	return predicate.Deck(sql.FieldNotNull(FieldTargetLevel))
}

// TargetLevelEqualFold applies the EqualFold predicate on the "target_level" field.
func TargetLevelEqualFold(v string) predicate.Deck {
	return predicate.Deck(sql.FieldEqualFold(FieldTargetLevel, v))
}

// TargetLevelContainsFold applies the ContainsFold predicate on the "target_level" field.
func TargetLevelContainsFold(v string) predicate.Deck {
	return predicate.Deck(sql.FieldContainsFold(FieldTargetLevel, v))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.Deck {
	return predicate.Deck(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.Deck {
	return predicate.Deck(sql.FieldNEQ(FieldIsActive, v))
}

// WordCountEQ applies the EQ predicate on the "word_count" field.
func WordCountEQ(v int) predicate.Deck {
	return predicate.Deck(sql.FieldEQ(FieldWordCount, v))
}

// WordCountNEQ applies the NEQ predicate on the "word_count" field.
func WordCountNEQ(v int) predicate.Deck {
	return predicate.Deck(sql.FieldNEQ(FieldWordCount, v))
}

// WordCountIn applies the In predicate on the "word_count" field.
func WordCountIn(vs ...int) predicate.Deck {
	return predicate.Deck(sql.FieldIn(FieldWordCount, vs...))
}

// WordCountNotIn applies the NotIn predicate on the "word_count" field.
func WordCountNotIn(vs ...int) predicate.Deck {
	return predicate.Deck(sql.FieldNotIn(FieldWordCount, vs...))
}

// WordCountGT applies the GT predicate on the "word_count" field.
func WordCountGT(v int) predicate.Deck {
	return predicate.Deck(sql.FieldGT(FieldWordCount, v))
}

// WordCountGTE applies the GTE predicate on the "word_count" field.
func WordCountGTE(v int) predicate.Deck {
	return predicate.Deck(sql.FieldGTE(FieldWordCount, v))
}

// WordCountLT applies the LT predicate on the "word_count" field.
func WordCountLT(v int) predicate.Deck {
	return predicate.Deck(sql.FieldLT(FieldWordCount, v))
}

// WordCountLTE applies the LTE predicate on the "word_count" field.
func WordCountLTE(v int) predicate.Deck {
	return predicate.Deck(sql.FieldLTE(FieldWordCount, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Deck {
	return predicate.Deck(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Deck {
	return predicate.Deck(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Deck {
	return predicate.Deck(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Deck {
	return predicate.Deck(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Deck {
	return predicate.Deck(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Deck {
	return predicate.Deck(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Deck {
	return predicate.Deck(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Deck {
	return predicate.Deck(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Deck {
	return predicate.Deck(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Deck {
	return predicate.Deck(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Deck {
	return predicate.Deck(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Deck {
	return predicate.Deck(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Deck {
	return predicate.Deck(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Deck {
	return predicate.Deck(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Deck {
	return predicate.Deck(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Deck {
	return predicate.Deck(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Deck {
	return predicate.Deck(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Deck {
	return predicate.Deck(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWords applies the HasEdge predicate on the "words" edge.
func HasWords() predicate.Deck {
	return predicate.Deck(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WordsTable, WordsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWordsWith applies the HasEdge predicate on the "words" edge with a given conditions (other predicates).
func HasWordsWith(preds ...predicate.Word) predicate.Deck {
	return predicate.Deck(func(s *sql.Selector) {
		step := newWordsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Deck) predicate.Deck {
	return predicate.Deck(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Deck) predicate.Deck {
	return predicate.Deck(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Deck) predicate.Deck {
	return predicate.Deck(sql.NotPredicates(p))
}
