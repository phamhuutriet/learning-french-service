// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"learning-french-service/internal/ent/deck"
	"learning-french-service/internal/ent/learningstreak"
	"learning-french-service/internal/ent/pronunciationattempt"
	"learning-french-service/internal/ent/questionattempt"
	"learning-french-service/internal/ent/questionreview"
	"learning-french-service/internal/ent/user"
	"learning-french-service/internal/ent/userstats"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetEmail sets the "email" field.
func (_c *UserCreate) SetEmail(v string) *UserCreate {
	_c.mutation.SetEmail(v)
	return _c
}

// SetPasswordHash sets the "password_hash" field.
func (_c *UserCreate) SetPasswordHash(v string) *UserCreate {
	_c.mutation.SetPasswordHash(v)
	return _c
}

// SetUsername sets the "username" field.
func (_c *UserCreate) SetUsername(v string) *UserCreate {
	_c.mutation.SetUsername(v)
	return _c
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (_c *UserCreate) SetNillableUsername(v *string) *UserCreate {
	if v != nil {
		_c.SetUsername(*v)
	}
	return _c
}

// SetFirstName sets the "first_name" field.
func (_c *UserCreate) SetFirstName(v string) *UserCreate {
	_c.mutation.SetFirstName(v)
	return _c
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (_c *UserCreate) SetNillableFirstName(v *string) *UserCreate {
	if v != nil {
		_c.SetFirstName(*v)
	}
	return _c
}

// SetLastName sets the "last_name" field.
func (_c *UserCreate) SetLastName(v string) *UserCreate {
	_c.mutation.SetLastName(v)
	return _c
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (_c *UserCreate) SetNillableLastName(v *string) *UserCreate {
	if v != nil {
		_c.SetLastName(*v)
	}
	return _c
}

// SetCurrentLevel sets the "current_level" field.
func (_c *UserCreate) SetCurrentLevel(v string) *UserCreate {
	_c.mutation.SetCurrentLevel(v)
	return _c
}

// SetNillableCurrentLevel sets the "current_level" field if the given value is not nil.
func (_c *UserCreate) SetNillableCurrentLevel(v *string) *UserCreate {
	if v != nil {
		_c.SetCurrentLevel(*v)
	}
	return _c
}

// SetTargetLevel sets the "target_level" field.
func (_c *UserCreate) SetTargetLevel(v string) *UserCreate {
	_c.mutation.SetTargetLevel(v)
	return _c
}

// SetNillableTargetLevel sets the "target_level" field if the given value is not nil.
func (_c *UserCreate) SetNillableTargetLevel(v *string) *UserCreate {
	if v != nil {
		_c.SetTargetLevel(*v)
	}
	return _c
}

// SetDailyGoal sets the "daily_goal" field.
func (_c *UserCreate) SetDailyGoal(v int) *UserCreate {
	_c.mutation.SetDailyGoal(v)
	return _c
}

// SetNillableDailyGoal sets the "daily_goal" field if the given value is not nil.
func (_c *UserCreate) SetNillableDailyGoal(v *int) *UserCreate {
	if v != nil {
		_c.SetDailyGoal(*v)
	}
	return _c
}

// SetTimezone sets the "timezone" field.
func (_c *UserCreate) SetTimezone(v string) *UserCreate {
	_c.mutation.SetTimezone(v)
	return _c
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (_c *UserCreate) SetNillableTimezone(v *string) *UserCreate {
	if v != nil {
		_c.SetTimezone(*v)
	}
	return _c
}

// SetLastActiveAt sets the "last_active_at" field.
func (_c *UserCreate) SetLastActiveAt(v time.Time) *UserCreate {
	_c.mutation.SetLastActiveAt(v)
	return _c
}

// SetNillableLastActiveAt sets the "last_active_at" field if the given value is not nil.
func (_c *UserCreate) SetNillableLastActiveAt(v *time.Time) *UserCreate {
	if v != nil {
		_c.SetLastActiveAt(*v)
	}
	return _c
}

// SetIsActive sets the "is_active" field.
func (_c *UserCreate) SetIsActive(v bool) *UserCreate {
	_c.mutation.SetIsActive(v)
	return _c
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_c *UserCreate) SetNillableIsActive(v *bool) *UserCreate {
	if v != nil {
		_c.SetIsActive(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *UserCreate) SetCreatedAt(v time.Time) *UserCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *UserCreate) SetNillableCreatedAt(v *time.Time) *UserCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *UserCreate) SetUpdatedAt(v time.Time) *UserCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *UserCreate) SetNillableUpdatedAt(v *time.Time) *UserCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// AddDeckIDs adds the "decks" edge to the Deck entity by IDs.
func (_c *UserCreate) AddDeckIDs(ids ...int) *UserCreate {
	_c.mutation.AddDeckIDs(ids...)
	return _c
}

// AddDecks adds the "decks" edges to the Deck entity.
func (_c *UserCreate) AddDecks(v ...*Deck) *UserCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddDeckIDs(ids...)
}

// AddQuestionReviewIDs adds the "question_reviews" edge to the QuestionReview entity by IDs.
func (_c *UserCreate) AddQuestionReviewIDs(ids ...int) *UserCreate {
	_c.mutation.AddQuestionReviewIDs(ids...)
	return _c
}

// AddQuestionReviews adds the "question_reviews" edges to the QuestionReview entity.
func (_c *UserCreate) AddQuestionReviews(v ...*QuestionReview) *UserCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddQuestionReviewIDs(ids...)
}

// AddQuestionAttemptIDs adds the "question_attempts" edge to the QuestionAttempt entity by IDs.
func (_c *UserCreate) AddQuestionAttemptIDs(ids ...int) *UserCreate {
	_c.mutation.AddQuestionAttemptIDs(ids...)
	return _c
}

// AddQuestionAttempts adds the "question_attempts" edges to the QuestionAttempt entity.
func (_c *UserCreate) AddQuestionAttempts(v ...*QuestionAttempt) *UserCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddQuestionAttemptIDs(ids...)
}

// AddPronunciationAttemptIDs adds the "pronunciation_attempts" edge to the PronunciationAttempt entity by IDs.
func (_c *UserCreate) AddPronunciationAttemptIDs(ids ...int) *UserCreate {
	_c.mutation.AddPronunciationAttemptIDs(ids...)
	return _c
}

// AddPronunciationAttempts adds the "pronunciation_attempts" edges to the PronunciationAttempt entity.
func (_c *UserCreate) AddPronunciationAttempts(v ...*PronunciationAttempt) *UserCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddPronunciationAttemptIDs(ids...)
}

// AddUserStatIDs adds the "user_stats" edge to the UserStats entity by IDs.
func (_c *UserCreate) AddUserStatIDs(ids ...int) *UserCreate {
	_c.mutation.AddUserStatIDs(ids...)
	return _c
}

// AddUserStats adds the "user_stats" edges to the UserStats entity.
func (_c *UserCreate) AddUserStats(v ...*UserStats) *UserCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddUserStatIDs(ids...)
}

// AddLearningStreakIDs adds the "learning_streaks" edge to the LearningStreak entity by IDs.
func (_c *UserCreate) AddLearningStreakIDs(ids ...int) *UserCreate {
	_c.mutation.AddLearningStreakIDs(ids...)
	return _c
}

// AddLearningStreaks adds the "learning_streaks" edges to the LearningStreak entity.
func (_c *UserCreate) AddLearningStreaks(v ...*LearningStreak) *UserCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddLearningStreakIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (_c *UserCreate) Mutation() *UserMutation {
	return _c.mutation
}

// Save creates the User in the database.
func (_c *UserCreate) Save(ctx context.Context) (*User, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *UserCreate) SaveX(ctx context.Context) *User {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UserCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UserCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *UserCreate) defaults() {
	if _, ok := _c.mutation.DailyGoal(); !ok {
		v := user.DefaultDailyGoal
		_c.mutation.SetDailyGoal(v)
	}
	if _, ok := _c.mutation.Timezone(); !ok {
		v := user.DefaultTimezone
		_c.mutation.SetTimezone(v)
	}
	if _, ok := _c.mutation.IsActive(); !ok {
		v := user.DefaultIsActive
		_c.mutation.SetIsActive(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := user.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := user.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *UserCreate) check() error {
	if _, ok := _c.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "User.email"`)}
	}
	if v, ok := _c.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if _, ok := _c.mutation.PasswordHash(); !ok {
		return &ValidationError{Name: "password_hash", err: errors.New(`ent: missing required field "User.password_hash"`)}
	}
	if v, ok := _c.mutation.PasswordHash(); ok {
		if err := user.PasswordHashValidator(v); err != nil {
			return &ValidationError{Name: "password_hash", err: fmt.Errorf(`ent: validator failed for field "User.password_hash": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "User.username": %w`, err)}
		}
	}
	if v, ok := _c.mutation.FirstName(); ok {
		if err := user.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "User.first_name": %w`, err)}
		}
	}
	if v, ok := _c.mutation.LastName(); ok {
		if err := user.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "User.last_name": %w`, err)}
		}
	}
	if v, ok := _c.mutation.CurrentLevel(); ok {
		if err := user.CurrentLevelValidator(v); err != nil {
			return &ValidationError{Name: "current_level", err: fmt.Errorf(`ent: validator failed for field "User.current_level": %w`, err)}
		}
	}
	if v, ok := _c.mutation.TargetLevel(); ok {
		if err := user.TargetLevelValidator(v); err != nil {
			return &ValidationError{Name: "target_level", err: fmt.Errorf(`ent: validator failed for field "User.target_level": %w`, err)}
		}
	}
	if _, ok := _c.mutation.DailyGoal(); !ok {
		return &ValidationError{Name: "daily_goal", err: errors.New(`ent: missing required field "User.daily_goal"`)}
	}
	if _, ok := _c.mutation.Timezone(); !ok {
		return &ValidationError{Name: "timezone", err: errors.New(`ent: missing required field "User.timezone"`)}
	}
	if v, ok := _c.mutation.Timezone(); ok {
		if err := user.TimezoneValidator(v); err != nil {
			return &ValidationError{Name: "timezone", err: fmt.Errorf(`ent: validator failed for field "User.timezone": %w`, err)}
		}
	}
	if _, ok := _c.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "User.is_active"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "User.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "User.updated_at"`)}
	}
	return nil
}

func (_c *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := _c.mutation.PasswordHash(); ok {
		_spec.SetField(user.FieldPasswordHash, field.TypeString, value)
		_node.PasswordHash = value
	}
	if value, ok := _c.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := _c.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
		_node.FirstName = value
	}
	if value, ok := _c.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
		_node.LastName = value
	}
	if value, ok := _c.mutation.CurrentLevel(); ok {
		_spec.SetField(user.FieldCurrentLevel, field.TypeString, value)
		_node.CurrentLevel = value
	}
	if value, ok := _c.mutation.TargetLevel(); ok {
		_spec.SetField(user.FieldTargetLevel, field.TypeString, value)
		_node.TargetLevel = value
	}
	if value, ok := _c.mutation.DailyGoal(); ok {
		_spec.SetField(user.FieldDailyGoal, field.TypeInt, value)
		_node.DailyGoal = value
	}
	if value, ok := _c.mutation.Timezone(); ok {
		_spec.SetField(user.FieldTimezone, field.TypeString, value)
		_node.Timezone = value
	}
	if value, ok := _c.mutation.LastActiveAt(); ok {
		_spec.SetField(user.FieldLastActiveAt, field.TypeTime, value)
		_node.LastActiveAt = value
	}
	if value, ok := _c.mutation.IsActive(); ok {
		_spec.SetField(user.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.DecksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DecksTable,
			Columns: []string{user.DecksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deck.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.QuestionReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.QuestionReviewsTable,
			Columns: []string{user.QuestionReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionreview.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.QuestionAttemptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.QuestionAttemptsTable,
			Columns: []string{user.QuestionAttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionattempt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.PronunciationAttemptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PronunciationAttemptsTable,
			Columns: []string{user.PronunciationAttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pronunciationattempt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.UserStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserStatsTable,
			Columns: []string{user.UserStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userstats.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.LearningStreaksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LearningStreaksTable,
			Columns: []string{user.LearningStreaksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(learningstreak.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	err      error
	builders []*UserCreate
}

// Save creates the User entities in the database.
func (_c *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*User, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UserCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
