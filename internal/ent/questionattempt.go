// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"learning-french-service/internal/ent/question"
	"learning-french-service/internal/ent/questionattempt"
	"learning-french-service/internal/ent/questionreview"
	"learning-french-service/internal/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// QuestionAttempt is the model entity for the QuestionAttempt schema.
type QuestionAttempt struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserAnswer holds the value of the "user_answer" field.
	UserAnswer string `json:"user_answer,omitempty"`
	// correct, close, incorrect
	AiGrade string `json:"ai_grade,omitempty"`
	// AI-generated feedback
	AiFeedback string `json:"ai_feedback,omitempty"`
	// 0.0 to 1.0 for semantic similarity
	SimilarityScore float64 `json:"similarity_score,omitempty"`
	// 0=Again, 1=Hard, 2=Good, 3=Easy
	QualityRating int `json:"quality_rating,omitempty"`
	// Time taken to answer in milliseconds
	ResponseTimeMs int `json:"response_time_ms,omitempty"`
	// WasCorrect holds the value of the "was_correct" field.
	WasCorrect bool `json:"was_correct,omitempty"`
	// NeedsRepeat holds the value of the "needs_repeat" field.
	NeedsRepeat bool `json:"needs_repeat,omitempty"`
	// AttemptDate holds the value of the "attempt_date" field.
	AttemptDate time.Time `json:"attempt_date,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the QuestionAttemptQuery when eager-loading is set.
	Edges                             QuestionAttemptEdges `json:"edges"`
	question_question_attempts        *int
	question_review_question_attempts *int
	user_question_attempts            *int
	selectValues                      sql.SelectValues
}

// QuestionAttemptEdges holds the relations/edges for other nodes in the graph.
type QuestionAttemptEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Question holds the value of the question edge.
	Question *Question `json:"question,omitempty"`
	// QuestionReview holds the value of the question_review edge.
	QuestionReview *QuestionReview `json:"question_review,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e QuestionAttemptEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// QuestionOrErr returns the Question value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e QuestionAttemptEdges) QuestionOrErr() (*Question, error) {
	if e.Question != nil {
		return e.Question, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: question.Label}
	}
	return nil, &NotLoadedError{edge: "question"}
}

// QuestionReviewOrErr returns the QuestionReview value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e QuestionAttemptEdges) QuestionReviewOrErr() (*QuestionReview, error) {
	if e.QuestionReview != nil {
		return e.QuestionReview, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: questionreview.Label}
	}
	return nil, &NotLoadedError{edge: "question_review"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*QuestionAttempt) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case questionattempt.FieldWasCorrect, questionattempt.FieldNeedsRepeat:
			values[i] = new(sql.NullBool)
		case questionattempt.FieldSimilarityScore:
			values[i] = new(sql.NullFloat64)
		case questionattempt.FieldID, questionattempt.FieldQualityRating, questionattempt.FieldResponseTimeMs:
			values[i] = new(sql.NullInt64)
		case questionattempt.FieldUserAnswer, questionattempt.FieldAiGrade, questionattempt.FieldAiFeedback:
			values[i] = new(sql.NullString)
		case questionattempt.FieldAttemptDate:
			values[i] = new(sql.NullTime)
		case questionattempt.ForeignKeys[0]: // question_question_attempts
			values[i] = new(sql.NullInt64)
		case questionattempt.ForeignKeys[1]: // question_review_question_attempts
			values[i] = new(sql.NullInt64)
		case questionattempt.ForeignKeys[2]: // user_question_attempts
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the QuestionAttempt fields.
func (_m *QuestionAttempt) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case questionattempt.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case questionattempt.FieldUserAnswer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_answer", values[i])
			} else if value.Valid {
				_m.UserAnswer = value.String
			}
		case questionattempt.FieldAiGrade:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ai_grade", values[i])
			} else if value.Valid {
				_m.AiGrade = value.String
			}
		case questionattempt.FieldAiFeedback:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ai_feedback", values[i])
			} else if value.Valid {
				_m.AiFeedback = value.String
			}
		case questionattempt.FieldSimilarityScore:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field similarity_score", values[i])
			} else if value.Valid {
				_m.SimilarityScore = value.Float64
			}
		case questionattempt.FieldQualityRating:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quality_rating", values[i])
			} else if value.Valid {
				_m.QualityRating = int(value.Int64)
			}
		case questionattempt.FieldResponseTimeMs:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field response_time_ms", values[i])
			} else if value.Valid {
				_m.ResponseTimeMs = int(value.Int64)
			}
		case questionattempt.FieldWasCorrect:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field was_correct", values[i])
			} else if value.Valid {
				_m.WasCorrect = value.Bool
			}
		case questionattempt.FieldNeedsRepeat:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field needs_repeat", values[i])
			} else if value.Valid {
				_m.NeedsRepeat = value.Bool
			}
		case questionattempt.FieldAttemptDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field attempt_date", values[i])
			} else if value.Valid {
				_m.AttemptDate = value.Time
			}
		case questionattempt.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field question_question_attempts", value)
			} else if value.Valid {
				_m.question_question_attempts = new(int)
				*_m.question_question_attempts = int(value.Int64)
			}
		case questionattempt.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field question_review_question_attempts", value)
			} else if value.Valid {
				_m.question_review_question_attempts = new(int)
				*_m.question_review_question_attempts = int(value.Int64)
			}
		case questionattempt.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_question_attempts", value)
			} else if value.Valid {
				_m.user_question_attempts = new(int)
				*_m.user_question_attempts = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the QuestionAttempt.
// This includes values selected through modifiers, order, etc.
func (_m *QuestionAttempt) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the QuestionAttempt entity.
func (_m *QuestionAttempt) QueryUser() *UserQuery {
	return NewQuestionAttemptClient(_m.config).QueryUser(_m)
}

// QueryQuestion queries the "question" edge of the QuestionAttempt entity.
func (_m *QuestionAttempt) QueryQuestion() *QuestionQuery {
	return NewQuestionAttemptClient(_m.config).QueryQuestion(_m)
}

// QueryQuestionReview queries the "question_review" edge of the QuestionAttempt entity.
func (_m *QuestionAttempt) QueryQuestionReview() *QuestionReviewQuery {
	return NewQuestionAttemptClient(_m.config).QueryQuestionReview(_m)
}

// Update returns a builder for updating this QuestionAttempt.
// Note that you need to call QuestionAttempt.Unwrap() before calling this method if this QuestionAttempt
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *QuestionAttempt) Update() *QuestionAttemptUpdateOne {
	return NewQuestionAttemptClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the QuestionAttempt entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *QuestionAttempt) Unwrap() *QuestionAttempt {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: QuestionAttempt is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *QuestionAttempt) String() string {
	var builder strings.Builder
	builder.WriteString("QuestionAttempt(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("user_answer=")
	builder.WriteString(_m.UserAnswer)
	builder.WriteString(", ")
	builder.WriteString("ai_grade=")
	builder.WriteString(_m.AiGrade)
	builder.WriteString(", ")
	builder.WriteString("ai_feedback=")
	builder.WriteString(_m.AiFeedback)
	builder.WriteString(", ")
	builder.WriteString("similarity_score=")
	builder.WriteString(fmt.Sprintf("%v", _m.SimilarityScore))
	builder.WriteString(", ")
	builder.WriteString("quality_rating=")
	builder.WriteString(fmt.Sprintf("%v", _m.QualityRating))
	builder.WriteString(", ")
	builder.WriteString("response_time_ms=")
	builder.WriteString(fmt.Sprintf("%v", _m.ResponseTimeMs))
	builder.WriteString(", ")
	builder.WriteString("was_correct=")
	builder.WriteString(fmt.Sprintf("%v", _m.WasCorrect))
	builder.WriteString(", ")
	builder.WriteString("needs_repeat=")
	builder.WriteString(fmt.Sprintf("%v", _m.NeedsRepeat))
	builder.WriteString(", ")
	builder.WriteString("attempt_date=")
	builder.WriteString(_m.AttemptDate.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// QuestionAttempts is a parsable slice of QuestionAttempt.
type QuestionAttempts []*QuestionAttempt
