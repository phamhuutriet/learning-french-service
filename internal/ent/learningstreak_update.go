// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"learning-french-service/internal/ent/learningstreak"
	"learning-french-service/internal/ent/predicate"
	"learning-french-service/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LearningStreakUpdate is the builder for updating LearningStreak entities.
type LearningStreakUpdate struct {
	config
	hooks    []Hook
	mutation *LearningStreakMutation
}

// Where appends a list predicates to the LearningStreakUpdate builder.
func (_u *LearningStreakUpdate) Where(ps ...predicate.LearningStreak) *LearningStreakUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetStartDate sets the "start_date" field.
func (_u *LearningStreakUpdate) SetStartDate(v time.Time) *LearningStreakUpdate {
	_u.mutation.SetStartDate(v)
	return _u
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (_u *LearningStreakUpdate) SetNillableStartDate(v *time.Time) *LearningStreakUpdate {
	if v != nil {
		_u.SetStartDate(*v)
	}
	return _u
}

// SetEndDate sets the "end_date" field.
func (_u *LearningStreakUpdate) SetEndDate(v time.Time) *LearningStreakUpdate {
	_u.mutation.SetEndDate(v)
	return _u
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (_u *LearningStreakUpdate) SetNillableEndDate(v *time.Time) *LearningStreakUpdate {
	if v != nil {
		_u.SetEndDate(*v)
	}
	return _u
}

// ClearEndDate clears the value of the "end_date" field.
func (_u *LearningStreakUpdate) ClearEndDate() *LearningStreakUpdate {
	_u.mutation.ClearEndDate()
	return _u
}

// SetStreakLength sets the "streak_length" field.
func (_u *LearningStreakUpdate) SetStreakLength(v int) *LearningStreakUpdate {
	_u.mutation.ResetStreakLength()
	_u.mutation.SetStreakLength(v)
	return _u
}

// SetNillableStreakLength sets the "streak_length" field if the given value is not nil.
func (_u *LearningStreakUpdate) SetNillableStreakLength(v *int) *LearningStreakUpdate {
	if v != nil {
		_u.SetStreakLength(*v)
	}
	return _u
}

// AddStreakLength adds value to the "streak_length" field.
func (_u *LearningStreakUpdate) AddStreakLength(v int) *LearningStreakUpdate {
	_u.mutation.AddStreakLength(v)
	return _u
}

// SetIsCurrent sets the "is_current" field.
func (_u *LearningStreakUpdate) SetIsCurrent(v bool) *LearningStreakUpdate {
	_u.mutation.SetIsCurrent(v)
	return _u
}

// SetNillableIsCurrent sets the "is_current" field if the given value is not nil.
func (_u *LearningStreakUpdate) SetNillableIsCurrent(v *bool) *LearningStreakUpdate {
	if v != nil {
		_u.SetIsCurrent(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *LearningStreakUpdate) SetCreatedAt(v time.Time) *LearningStreakUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *LearningStreakUpdate) SetNillableCreatedAt(v *time.Time) *LearningStreakUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *LearningStreakUpdate) SetUserID(id int) *LearningStreakUpdate {
	_u.mutation.SetUserID(id)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *LearningStreakUpdate) SetUser(v *User) *LearningStreakUpdate {
	return _u.SetUserID(v.ID)
}

// Mutation returns the LearningStreakMutation object of the builder.
func (_u *LearningStreakUpdate) Mutation() *LearningStreakMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *LearningStreakUpdate) ClearUser() *LearningStreakUpdate {
	_u.mutation.ClearUser()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *LearningStreakUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *LearningStreakUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *LearningStreakUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *LearningStreakUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *LearningStreakUpdate) check() error {
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LearningStreak.user"`)
	}
	return nil
}

func (_u *LearningStreakUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(learningstreak.Table, learningstreak.Columns, sqlgraph.NewFieldSpec(learningstreak.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.StartDate(); ok {
		_spec.SetField(learningstreak.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := _u.mutation.EndDate(); ok {
		_spec.SetField(learningstreak.FieldEndDate, field.TypeTime, value)
	}
	if _u.mutation.EndDateCleared() {
		_spec.ClearField(learningstreak.FieldEndDate, field.TypeTime)
	}
	if value, ok := _u.mutation.StreakLength(); ok {
		_spec.SetField(learningstreak.FieldStreakLength, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStreakLength(); ok {
		_spec.AddField(learningstreak.FieldStreakLength, field.TypeInt, value)
	}
	if value, ok := _u.mutation.IsCurrent(); ok {
		_spec.SetField(learningstreak.FieldIsCurrent, field.TypeBool, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(learningstreak.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   learningstreak.UserTable,
			Columns: []string{learningstreak.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   learningstreak.UserTable,
			Columns: []string{learningstreak.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{learningstreak.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// LearningStreakUpdateOne is the builder for updating a single LearningStreak entity.
type LearningStreakUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LearningStreakMutation
}

// SetStartDate sets the "start_date" field.
func (_u *LearningStreakUpdateOne) SetStartDate(v time.Time) *LearningStreakUpdateOne {
	_u.mutation.SetStartDate(v)
	return _u
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (_u *LearningStreakUpdateOne) SetNillableStartDate(v *time.Time) *LearningStreakUpdateOne {
	if v != nil {
		_u.SetStartDate(*v)
	}
	return _u
}

// SetEndDate sets the "end_date" field.
func (_u *LearningStreakUpdateOne) SetEndDate(v time.Time) *LearningStreakUpdateOne {
	_u.mutation.SetEndDate(v)
	return _u
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (_u *LearningStreakUpdateOne) SetNillableEndDate(v *time.Time) *LearningStreakUpdateOne {
	if v != nil {
		_u.SetEndDate(*v)
	}
	return _u
}

// ClearEndDate clears the value of the "end_date" field.
func (_u *LearningStreakUpdateOne) ClearEndDate() *LearningStreakUpdateOne {
	_u.mutation.ClearEndDate()
	return _u
}

// SetStreakLength sets the "streak_length" field.
func (_u *LearningStreakUpdateOne) SetStreakLength(v int) *LearningStreakUpdateOne {
	_u.mutation.ResetStreakLength()
	_u.mutation.SetStreakLength(v)
	return _u
}

// SetNillableStreakLength sets the "streak_length" field if the given value is not nil.
func (_u *LearningStreakUpdateOne) SetNillableStreakLength(v *int) *LearningStreakUpdateOne {
	if v != nil {
		_u.SetStreakLength(*v)
	}
	return _u
}

// AddStreakLength adds value to the "streak_length" field.
func (_u *LearningStreakUpdateOne) AddStreakLength(v int) *LearningStreakUpdateOne {
	_u.mutation.AddStreakLength(v)
	return _u
}

// SetIsCurrent sets the "is_current" field.
func (_u *LearningStreakUpdateOne) SetIsCurrent(v bool) *LearningStreakUpdateOne {
	_u.mutation.SetIsCurrent(v)
	return _u
}

// SetNillableIsCurrent sets the "is_current" field if the given value is not nil.
func (_u *LearningStreakUpdateOne) SetNillableIsCurrent(v *bool) *LearningStreakUpdateOne {
	if v != nil {
		_u.SetIsCurrent(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *LearningStreakUpdateOne) SetCreatedAt(v time.Time) *LearningStreakUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *LearningStreakUpdateOne) SetNillableCreatedAt(v *time.Time) *LearningStreakUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *LearningStreakUpdateOne) SetUserID(id int) *LearningStreakUpdateOne {
	_u.mutation.SetUserID(id)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *LearningStreakUpdateOne) SetUser(v *User) *LearningStreakUpdateOne {
	return _u.SetUserID(v.ID)
}

// Mutation returns the LearningStreakMutation object of the builder.
func (_u *LearningStreakUpdateOne) Mutation() *LearningStreakMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *LearningStreakUpdateOne) ClearUser() *LearningStreakUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// Where appends a list predicates to the LearningStreakUpdate builder.
func (_u *LearningStreakUpdateOne) Where(ps ...predicate.LearningStreak) *LearningStreakUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *LearningStreakUpdateOne) Select(field string, fields ...string) *LearningStreakUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated LearningStreak entity.
func (_u *LearningStreakUpdateOne) Save(ctx context.Context) (*LearningStreak, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *LearningStreakUpdateOne) SaveX(ctx context.Context) *LearningStreak {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *LearningStreakUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *LearningStreakUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *LearningStreakUpdateOne) check() error {
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LearningStreak.user"`)
	}
	return nil
}

func (_u *LearningStreakUpdateOne) sqlSave(ctx context.Context) (_node *LearningStreak, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(learningstreak.Table, learningstreak.Columns, sqlgraph.NewFieldSpec(learningstreak.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LearningStreak.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, learningstreak.FieldID)
		for _, f := range fields {
			if !learningstreak.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != learningstreak.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.StartDate(); ok {
		_spec.SetField(learningstreak.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := _u.mutation.EndDate(); ok {
		_spec.SetField(learningstreak.FieldEndDate, field.TypeTime, value)
	}
	if _u.mutation.EndDateCleared() {
		_spec.ClearField(learningstreak.FieldEndDate, field.TypeTime)
	}
	if value, ok := _u.mutation.StreakLength(); ok {
		_spec.SetField(learningstreak.FieldStreakLength, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStreakLength(); ok {
		_spec.AddField(learningstreak.FieldStreakLength, field.TypeInt, value)
	}
	if value, ok := _u.mutation.IsCurrent(); ok {
		_spec.SetField(learningstreak.FieldIsCurrent, field.TypeBool, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(learningstreak.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   learningstreak.UserTable,
			Columns: []string{learningstreak.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   learningstreak.UserTable,
			Columns: []string{learningstreak.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &LearningStreak{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{learningstreak.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
