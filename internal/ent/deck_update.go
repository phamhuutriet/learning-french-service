// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"learning-french-service/internal/ent/deck"
	"learning-french-service/internal/ent/predicate"
	"learning-french-service/internal/ent/user"
	"learning-french-service/internal/ent/word"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeckUpdate is the builder for updating Deck entities.
type DeckUpdate struct {
	config
	hooks    []Hook
	mutation *DeckMutation
}

// Where appends a list predicates to the DeckUpdate builder.
func (_u *DeckUpdate) Where(ps ...predicate.Deck) *DeckUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *DeckUpdate) SetName(v string) *DeckUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *DeckUpdate) SetNillableName(v *string) *DeckUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *DeckUpdate) SetDescription(v string) *DeckUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *DeckUpdate) SetNillableDescription(v *string) *DeckUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *DeckUpdate) ClearDescription() *DeckUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetCategory sets the "category" field.
func (_u *DeckUpdate) SetCategory(v string) *DeckUpdate {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *DeckUpdate) SetNillableCategory(v *string) *DeckUpdate {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// ClearCategory clears the value of the "category" field.
func (_u *DeckUpdate) ClearCategory() *DeckUpdate {
	_u.mutation.ClearCategory()
	return _u
}

// SetTargetLevel sets the "target_level" field.
func (_u *DeckUpdate) SetTargetLevel(v string) *DeckUpdate {
	_u.mutation.SetTargetLevel(v)
	return _u
}

// SetNillableTargetLevel sets the "target_level" field if the given value is not nil.
func (_u *DeckUpdate) SetNillableTargetLevel(v *string) *DeckUpdate {
	if v != nil {
		_u.SetTargetLevel(*v)
	}
	return _u
}

// ClearTargetLevel clears the value of the "target_level" field.
func (_u *DeckUpdate) ClearTargetLevel() *DeckUpdate {
	_u.mutation.ClearTargetLevel()
	return _u
}

// SetIsActive sets the "is_active" field.
func (_u *DeckUpdate) SetIsActive(v bool) *DeckUpdate {
	_u.mutation.SetIsActive(v)
	return _u
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_u *DeckUpdate) SetNillableIsActive(v *bool) *DeckUpdate {
	if v != nil {
		_u.SetIsActive(*v)
	}
	return _u
}

// SetWordCount sets the "word_count" field.
func (_u *DeckUpdate) SetWordCount(v int) *DeckUpdate {
	_u.mutation.ResetWordCount()
	_u.mutation.SetWordCount(v)
	return _u
}

// SetNillableWordCount sets the "word_count" field if the given value is not nil.
func (_u *DeckUpdate) SetNillableWordCount(v *int) *DeckUpdate {
	if v != nil {
		_u.SetWordCount(*v)
	}
	return _u
}

// AddWordCount adds value to the "word_count" field.
func (_u *DeckUpdate) AddWordCount(v int) *DeckUpdate {
	_u.mutation.AddWordCount(v)
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *DeckUpdate) SetCreatedAt(v time.Time) *DeckUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *DeckUpdate) SetNillableCreatedAt(v *time.Time) *DeckUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *DeckUpdate) SetUpdatedAt(v time.Time) *DeckUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *DeckUpdate) SetUserID(id int) *DeckUpdate {
	_u.mutation.SetUserID(id)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *DeckUpdate) SetUser(v *User) *DeckUpdate {
	return _u.SetUserID(v.ID)
}

// AddWordIDs adds the "words" edge to the Word entity by IDs.
func (_u *DeckUpdate) AddWordIDs(ids ...int) *DeckUpdate {
	_u.mutation.AddWordIDs(ids...)
	return _u
}

// AddWords adds the "words" edges to the Word entity.
func (_u *DeckUpdate) AddWords(v ...*Word) *DeckUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddWordIDs(ids...)
}

// Mutation returns the DeckMutation object of the builder.
func (_u *DeckUpdate) Mutation() *DeckMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *DeckUpdate) ClearUser() *DeckUpdate {
	_u.mutation.ClearUser()
	return _u
}

// ClearWords clears all "words" edges to the Word entity.
func (_u *DeckUpdate) ClearWords() *DeckUpdate {
	_u.mutation.ClearWords()
	return _u
}

// RemoveWordIDs removes the "words" edge to Word entities by IDs.
func (_u *DeckUpdate) RemoveWordIDs(ids ...int) *DeckUpdate {
	_u.mutation.RemoveWordIDs(ids...)
	return _u
}

// RemoveWords removes "words" edges to Word entities.
func (_u *DeckUpdate) RemoveWords(v ...*Word) *DeckUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveWordIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *DeckUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DeckUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *DeckUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DeckUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *DeckUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := deck.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *DeckUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := deck.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Deck.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Category(); ok {
		if err := deck.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Deck.category": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TargetLevel(); ok {
		if err := deck.TargetLevelValidator(v); err != nil {
			return &ValidationError{Name: "target_level", err: fmt.Errorf(`ent: validator failed for field "Deck.target_level": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Deck.user"`)
	}
	return nil
}

func (_u *DeckUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(deck.Table, deck.Columns, sqlgraph.NewFieldSpec(deck.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(deck.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(deck.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(deck.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(deck.FieldCategory, field.TypeString, value)
	}
	if _u.mutation.CategoryCleared() {
		_spec.ClearField(deck.FieldCategory, field.TypeString)
	}
	if value, ok := _u.mutation.TargetLevel(); ok {
		_spec.SetField(deck.FieldTargetLevel, field.TypeString, value)
	}
	if _u.mutation.TargetLevelCleared() {
		_spec.ClearField(deck.FieldTargetLevel, field.TypeString)
	}
	if value, ok := _u.mutation.IsActive(); ok {
		_spec.SetField(deck.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.WordCount(); ok {
		_spec.SetField(deck.FieldWordCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedWordCount(); ok {
		_spec.AddField(deck.FieldWordCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(deck.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(deck.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deck.UserTable,
			Columns: []string{deck.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deck.UserTable,
			Columns: []string{deck.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.WordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deck.WordsTable,
			Columns: []string{deck.WordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(word.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedWordsIDs(); len(nodes) > 0 && !_u.mutation.WordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deck.WordsTable,
			Columns: []string{deck.WordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(word.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.WordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deck.WordsTable,
			Columns: []string{deck.WordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(word.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deck.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// DeckUpdateOne is the builder for updating a single Deck entity.
type DeckUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeckMutation
}

// SetName sets the "name" field.
func (_u *DeckUpdateOne) SetName(v string) *DeckUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *DeckUpdateOne) SetNillableName(v *string) *DeckUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *DeckUpdateOne) SetDescription(v string) *DeckUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *DeckUpdateOne) SetNillableDescription(v *string) *DeckUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *DeckUpdateOne) ClearDescription() *DeckUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetCategory sets the "category" field.
func (_u *DeckUpdateOne) SetCategory(v string) *DeckUpdateOne {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *DeckUpdateOne) SetNillableCategory(v *string) *DeckUpdateOne {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// ClearCategory clears the value of the "category" field.
func (_u *DeckUpdateOne) ClearCategory() *DeckUpdateOne {
	_u.mutation.ClearCategory()
	return _u
}

// SetTargetLevel sets the "target_level" field.
func (_u *DeckUpdateOne) SetTargetLevel(v string) *DeckUpdateOne {
	_u.mutation.SetTargetLevel(v)
	return _u
}

// SetNillableTargetLevel sets the "target_level" field if the given value is not nil.
func (_u *DeckUpdateOne) SetNillableTargetLevel(v *string) *DeckUpdateOne {
	if v != nil {
		_u.SetTargetLevel(*v)
	}
	return _u
}

// ClearTargetLevel clears the value of the "target_level" field.
func (_u *DeckUpdateOne) ClearTargetLevel() *DeckUpdateOne {
	_u.mutation.ClearTargetLevel()
	return _u
}

// SetIsActive sets the "is_active" field.
func (_u *DeckUpdateOne) SetIsActive(v bool) *DeckUpdateOne {
	_u.mutation.SetIsActive(v)
	return _u
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_u *DeckUpdateOne) SetNillableIsActive(v *bool) *DeckUpdateOne {
	if v != nil {
		_u.SetIsActive(*v)
	}
	return _u
}

// SetWordCount sets the "word_count" field.
func (_u *DeckUpdateOne) SetWordCount(v int) *DeckUpdateOne {
	_u.mutation.ResetWordCount()
	_u.mutation.SetWordCount(v)
	return _u
}

// SetNillableWordCount sets the "word_count" field if the given value is not nil.
func (_u *DeckUpdateOne) SetNillableWordCount(v *int) *DeckUpdateOne {
	if v != nil {
		_u.SetWordCount(*v)
	}
	return _u
}

// AddWordCount adds value to the "word_count" field.
func (_u *DeckUpdateOne) AddWordCount(v int) *DeckUpdateOne {
	_u.mutation.AddWordCount(v)
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *DeckUpdateOne) SetCreatedAt(v time.Time) *DeckUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *DeckUpdateOne) SetNillableCreatedAt(v *time.Time) *DeckUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *DeckUpdateOne) SetUpdatedAt(v time.Time) *DeckUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *DeckUpdateOne) SetUserID(id int) *DeckUpdateOne {
	_u.mutation.SetUserID(id)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *DeckUpdateOne) SetUser(v *User) *DeckUpdateOne {
	return _u.SetUserID(v.ID)
}

// AddWordIDs adds the "words" edge to the Word entity by IDs.
func (_u *DeckUpdateOne) AddWordIDs(ids ...int) *DeckUpdateOne {
	_u.mutation.AddWordIDs(ids...)
	return _u
}

// AddWords adds the "words" edges to the Word entity.
func (_u *DeckUpdateOne) AddWords(v ...*Word) *DeckUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddWordIDs(ids...)
}

// Mutation returns the DeckMutation object of the builder.
func (_u *DeckUpdateOne) Mutation() *DeckMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *DeckUpdateOne) ClearUser() *DeckUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// ClearWords clears all "words" edges to the Word entity.
func (_u *DeckUpdateOne) ClearWords() *DeckUpdateOne {
	_u.mutation.ClearWords()
	return _u
}

// RemoveWordIDs removes the "words" edge to Word entities by IDs.
func (_u *DeckUpdateOne) RemoveWordIDs(ids ...int) *DeckUpdateOne {
	_u.mutation.RemoveWordIDs(ids...)
	return _u
}

// RemoveWords removes "words" edges to Word entities.
func (_u *DeckUpdateOne) RemoveWords(v ...*Word) *DeckUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveWordIDs(ids...)
}

// Where appends a list predicates to the DeckUpdate builder.
func (_u *DeckUpdateOne) Where(ps ...predicate.Deck) *DeckUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *DeckUpdateOne) Select(field string, fields ...string) *DeckUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Deck entity.
func (_u *DeckUpdateOne) Save(ctx context.Context) (*Deck, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DeckUpdateOne) SaveX(ctx context.Context) *Deck {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *DeckUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DeckUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *DeckUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := deck.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *DeckUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := deck.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Deck.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Category(); ok {
		if err := deck.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Deck.category": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TargetLevel(); ok {
		if err := deck.TargetLevelValidator(v); err != nil {
			return &ValidationError{Name: "target_level", err: fmt.Errorf(`ent: validator failed for field "Deck.target_level": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Deck.user"`)
	}
	return nil
}

func (_u *DeckUpdateOne) sqlSave(ctx context.Context) (_node *Deck, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(deck.Table, deck.Columns, sqlgraph.NewFieldSpec(deck.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Deck.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deck.FieldID)
		for _, f := range fields {
			if !deck.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != deck.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(deck.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(deck.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(deck.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(deck.FieldCategory, field.TypeString, value)
	}
	if _u.mutation.CategoryCleared() {
		_spec.ClearField(deck.FieldCategory, field.TypeString)
	}
	if value, ok := _u.mutation.TargetLevel(); ok {
		_spec.SetField(deck.FieldTargetLevel, field.TypeString, value)
	}
	if _u.mutation.TargetLevelCleared() {
		_spec.ClearField(deck.FieldTargetLevel, field.TypeString)
	}
	if value, ok := _u.mutation.IsActive(); ok {
		_spec.SetField(deck.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.WordCount(); ok {
		_spec.SetField(deck.FieldWordCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedWordCount(); ok {
		_spec.AddField(deck.FieldWordCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(deck.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(deck.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deck.UserTable,
			Columns: []string{deck.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deck.UserTable,
			Columns: []string{deck.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.WordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deck.WordsTable,
			Columns: []string{deck.WordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(word.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedWordsIDs(); len(nodes) > 0 && !_u.mutation.WordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deck.WordsTable,
			Columns: []string{deck.WordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(word.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.WordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deck.WordsTable,
			Columns: []string{deck.WordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(word.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Deck{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deck.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
