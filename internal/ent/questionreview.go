// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"learning-french-service/internal/ent/question"
	"learning-french-service/internal/ent/questionreview"
	"learning-french-service/internal/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// QuestionReview is the model entity for the QuestionReview schema.
type QuestionReview struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// SM-2 ease factor (1.3 minimum)
	EaseFactor float64 `json:"ease_factor,omitempty"`
	// Days until next review
	IntervalDays int `json:"interval_days,omitempty"`
	// Number of successful reviews
	RepetitionCount int `json:"repetition_count,omitempty"`
	// NextReviewDate holds the value of the "next_review_date" field.
	NextReviewDate time.Time `json:"next_review_date,omitempty"`
	// LastReviewedAt holds the value of the "last_reviewed_at" field.
	LastReviewedAt time.Time `json:"last_reviewed_at,omitempty"`
	// IsDue holds the value of the "is_due" field.
	IsDue bool `json:"is_due,omitempty"`
	// TotalAttempts holds the value of the "total_attempts" field.
	TotalAttempts int `json:"total_attempts,omitempty"`
	// CorrectAttempts holds the value of the "correct_attempts" field.
	CorrectAttempts int `json:"correct_attempts,omitempty"`
	// correct_attempts / total_attempts
	AccuracyRate float64 `json:"accuracy_rate,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the QuestionReviewQuery when eager-loading is set.
	Edges                     QuestionReviewEdges `json:"edges"`
	question_question_reviews *int
	user_question_reviews     *int
	selectValues              sql.SelectValues
}

// QuestionReviewEdges holds the relations/edges for other nodes in the graph.
type QuestionReviewEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Question holds the value of the question edge.
	Question *Question `json:"question,omitempty"`
	// QuestionAttempts holds the value of the question_attempts edge.
	QuestionAttempts []*QuestionAttempt `json:"question_attempts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e QuestionReviewEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// QuestionOrErr returns the Question value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e QuestionReviewEdges) QuestionOrErr() (*Question, error) {
	if e.Question != nil {
		return e.Question, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: question.Label}
	}
	return nil, &NotLoadedError{edge: "question"}
}

// QuestionAttemptsOrErr returns the QuestionAttempts value or an error if the edge
// was not loaded in eager-loading.
func (e QuestionReviewEdges) QuestionAttemptsOrErr() ([]*QuestionAttempt, error) {
	if e.loadedTypes[2] {
		return e.QuestionAttempts, nil
	}
	return nil, &NotLoadedError{edge: "question_attempts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*QuestionReview) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case questionreview.FieldIsDue:
			values[i] = new(sql.NullBool)
		case questionreview.FieldEaseFactor, questionreview.FieldAccuracyRate:
			values[i] = new(sql.NullFloat64)
		case questionreview.FieldID, questionreview.FieldIntervalDays, questionreview.FieldRepetitionCount, questionreview.FieldTotalAttempts, questionreview.FieldCorrectAttempts:
			values[i] = new(sql.NullInt64)
		case questionreview.FieldNextReviewDate, questionreview.FieldLastReviewedAt, questionreview.FieldCreatedAt, questionreview.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case questionreview.ForeignKeys[0]: // question_question_reviews
			values[i] = new(sql.NullInt64)
		case questionreview.ForeignKeys[1]: // user_question_reviews
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the QuestionReview fields.
func (_m *QuestionReview) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case questionreview.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case questionreview.FieldEaseFactor:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field ease_factor", values[i])
			} else if value.Valid {
				_m.EaseFactor = value.Float64
			}
		case questionreview.FieldIntervalDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field interval_days", values[i])
			} else if value.Valid {
				_m.IntervalDays = int(value.Int64)
			}
		case questionreview.FieldRepetitionCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field repetition_count", values[i])
			} else if value.Valid {
				_m.RepetitionCount = int(value.Int64)
			}
		case questionreview.FieldNextReviewDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field next_review_date", values[i])
			} else if value.Valid {
				_m.NextReviewDate = value.Time
			}
		case questionreview.FieldLastReviewedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_reviewed_at", values[i])
			} else if value.Valid {
				_m.LastReviewedAt = value.Time
			}
		case questionreview.FieldIsDue:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_due", values[i])
			} else if value.Valid {
				_m.IsDue = value.Bool
			}
		case questionreview.FieldTotalAttempts:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_attempts", values[i])
			} else if value.Valid {
				_m.TotalAttempts = int(value.Int64)
			}
		case questionreview.FieldCorrectAttempts:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field correct_attempts", values[i])
			} else if value.Valid {
				_m.CorrectAttempts = int(value.Int64)
			}
		case questionreview.FieldAccuracyRate:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field accuracy_rate", values[i])
			} else if value.Valid {
				_m.AccuracyRate = value.Float64
			}
		case questionreview.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case questionreview.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case questionreview.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field question_question_reviews", value)
			} else if value.Valid {
				_m.question_question_reviews = new(int)
				*_m.question_question_reviews = int(value.Int64)
			}
		case questionreview.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_question_reviews", value)
			} else if value.Valid {
				_m.user_question_reviews = new(int)
				*_m.user_question_reviews = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the QuestionReview.
// This includes values selected through modifiers, order, etc.
func (_m *QuestionReview) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the QuestionReview entity.
func (_m *QuestionReview) QueryUser() *UserQuery {
	return NewQuestionReviewClient(_m.config).QueryUser(_m)
}

// QueryQuestion queries the "question" edge of the QuestionReview entity.
func (_m *QuestionReview) QueryQuestion() *QuestionQuery {
	return NewQuestionReviewClient(_m.config).QueryQuestion(_m)
}

// QueryQuestionAttempts queries the "question_attempts" edge of the QuestionReview entity.
func (_m *QuestionReview) QueryQuestionAttempts() *QuestionAttemptQuery {
	return NewQuestionReviewClient(_m.config).QueryQuestionAttempts(_m)
}

// Update returns a builder for updating this QuestionReview.
// Note that you need to call QuestionReview.Unwrap() before calling this method if this QuestionReview
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *QuestionReview) Update() *QuestionReviewUpdateOne {
	return NewQuestionReviewClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the QuestionReview entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *QuestionReview) Unwrap() *QuestionReview {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: QuestionReview is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *QuestionReview) String() string {
	var builder strings.Builder
	builder.WriteString("QuestionReview(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("ease_factor=")
	builder.WriteString(fmt.Sprintf("%v", _m.EaseFactor))
	builder.WriteString(", ")
	builder.WriteString("interval_days=")
	builder.WriteString(fmt.Sprintf("%v", _m.IntervalDays))
	builder.WriteString(", ")
	builder.WriteString("repetition_count=")
	builder.WriteString(fmt.Sprintf("%v", _m.RepetitionCount))
	builder.WriteString(", ")
	builder.WriteString("next_review_date=")
	builder.WriteString(_m.NextReviewDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("last_reviewed_at=")
	builder.WriteString(_m.LastReviewedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_due=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsDue))
	builder.WriteString(", ")
	builder.WriteString("total_attempts=")
	builder.WriteString(fmt.Sprintf("%v", _m.TotalAttempts))
	builder.WriteString(", ")
	builder.WriteString("correct_attempts=")
	builder.WriteString(fmt.Sprintf("%v", _m.CorrectAttempts))
	builder.WriteString(", ")
	builder.WriteString("accuracy_rate=")
	builder.WriteString(fmt.Sprintf("%v", _m.AccuracyRate))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// QuestionReviews is a parsable slice of QuestionReview.
type QuestionReviews []*QuestionReview
