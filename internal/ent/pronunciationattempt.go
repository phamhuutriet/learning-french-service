// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"learning-french-service/internal/ent/pronunciationattempt"
	"learning-french-service/internal/ent/question"
	"learning-french-service/internal/ent/user"
	"learning-french-service/internal/ent/word"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PronunciationAttempt is the model entity for the PronunciationAttempt schema.
type PronunciationAttempt struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// User recording
	UserAudioURL string `json:"user_audio_url,omitempty"`
	// Reference pronunciation
	ReferenceAudioURL string `json:"reference_audio_url,omitempty"`
	// 0.0 to 1.0 comparison with reference
	SimilarityScore float64 `json:"similarity_score,omitempty"`
	// AI-generated pronunciation tips
	PronunciationFeedback string `json:"pronunciation_feedback,omitempty"`
	// Per-phoneme accuracy scores
	PhoneticAccuracy map[string]interface{} `json:"phonetic_accuracy,omitempty"`
	// AttemptDate holds the value of the "attempt_date" field.
	AttemptDate time.Time `json:"attempt_date,omitempty"`
	// User satisfied with attempt
	WasSuccessful bool `json:"was_successful,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PronunciationAttemptQuery when eager-loading is set.
	Edges                           PronunciationAttemptEdges `json:"edges"`
	question_pronunciation_attempts *int
	user_pronunciation_attempts     *int
	word_pronunciation_attempts     *int
	selectValues                    sql.SelectValues
}

// PronunciationAttemptEdges holds the relations/edges for other nodes in the graph.
type PronunciationAttemptEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Question holds the value of the question edge.
	Question *Question `json:"question,omitempty"`
	// Word holds the value of the word edge.
	Word *Word `json:"word,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PronunciationAttemptEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// QuestionOrErr returns the Question value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PronunciationAttemptEdges) QuestionOrErr() (*Question, error) {
	if e.Question != nil {
		return e.Question, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: question.Label}
	}
	return nil, &NotLoadedError{edge: "question"}
}

// WordOrErr returns the Word value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PronunciationAttemptEdges) WordOrErr() (*Word, error) {
	if e.Word != nil {
		return e.Word, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: word.Label}
	}
	return nil, &NotLoadedError{edge: "word"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PronunciationAttempt) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case pronunciationattempt.FieldPhoneticAccuracy:
			values[i] = new([]byte)
		case pronunciationattempt.FieldWasSuccessful:
			values[i] = new(sql.NullBool)
		case pronunciationattempt.FieldSimilarityScore:
			values[i] = new(sql.NullFloat64)
		case pronunciationattempt.FieldID:
			values[i] = new(sql.NullInt64)
		case pronunciationattempt.FieldUserAudioURL, pronunciationattempt.FieldReferenceAudioURL, pronunciationattempt.FieldPronunciationFeedback:
			values[i] = new(sql.NullString)
		case pronunciationattempt.FieldAttemptDate:
			values[i] = new(sql.NullTime)
		case pronunciationattempt.ForeignKeys[0]: // question_pronunciation_attempts
			values[i] = new(sql.NullInt64)
		case pronunciationattempt.ForeignKeys[1]: // user_pronunciation_attempts
			values[i] = new(sql.NullInt64)
		case pronunciationattempt.ForeignKeys[2]: // word_pronunciation_attempts
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PronunciationAttempt fields.
func (_m *PronunciationAttempt) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pronunciationattempt.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case pronunciationattempt.FieldUserAudioURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_audio_url", values[i])
			} else if value.Valid {
				_m.UserAudioURL = value.String
			}
		case pronunciationattempt.FieldReferenceAudioURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reference_audio_url", values[i])
			} else if value.Valid {
				_m.ReferenceAudioURL = value.String
			}
		case pronunciationattempt.FieldSimilarityScore:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field similarity_score", values[i])
			} else if value.Valid {
				_m.SimilarityScore = value.Float64
			}
		case pronunciationattempt.FieldPronunciationFeedback:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pronunciation_feedback", values[i])
			} else if value.Valid {
				_m.PronunciationFeedback = value.String
			}
		case pronunciationattempt.FieldPhoneticAccuracy:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field phonetic_accuracy", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.PhoneticAccuracy); err != nil {
					return fmt.Errorf("unmarshal field phonetic_accuracy: %w", err)
				}
			}
		case pronunciationattempt.FieldAttemptDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field attempt_date", values[i])
			} else if value.Valid {
				_m.AttemptDate = value.Time
			}
		case pronunciationattempt.FieldWasSuccessful:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field was_successful", values[i])
			} else if value.Valid {
				_m.WasSuccessful = value.Bool
			}
		case pronunciationattempt.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field question_pronunciation_attempts", value)
			} else if value.Valid {
				_m.question_pronunciation_attempts = new(int)
				*_m.question_pronunciation_attempts = int(value.Int64)
			}
		case pronunciationattempt.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_pronunciation_attempts", value)
			} else if value.Valid {
				_m.user_pronunciation_attempts = new(int)
				*_m.user_pronunciation_attempts = int(value.Int64)
			}
		case pronunciationattempt.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field word_pronunciation_attempts", value)
			} else if value.Valid {
				_m.word_pronunciation_attempts = new(int)
				*_m.word_pronunciation_attempts = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PronunciationAttempt.
// This includes values selected through modifiers, order, etc.
func (_m *PronunciationAttempt) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the PronunciationAttempt entity.
func (_m *PronunciationAttempt) QueryUser() *UserQuery {
	return NewPronunciationAttemptClient(_m.config).QueryUser(_m)
}

// QueryQuestion queries the "question" edge of the PronunciationAttempt entity.
func (_m *PronunciationAttempt) QueryQuestion() *QuestionQuery {
	return NewPronunciationAttemptClient(_m.config).QueryQuestion(_m)
}

// QueryWord queries the "word" edge of the PronunciationAttempt entity.
func (_m *PronunciationAttempt) QueryWord() *WordQuery {
	return NewPronunciationAttemptClient(_m.config).QueryWord(_m)
}

// Update returns a builder for updating this PronunciationAttempt.
// Note that you need to call PronunciationAttempt.Unwrap() before calling this method if this PronunciationAttempt
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *PronunciationAttempt) Update() *PronunciationAttemptUpdateOne {
	return NewPronunciationAttemptClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the PronunciationAttempt entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *PronunciationAttempt) Unwrap() *PronunciationAttempt {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: PronunciationAttempt is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *PronunciationAttempt) String() string {
	var builder strings.Builder
	builder.WriteString("PronunciationAttempt(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("user_audio_url=")
	builder.WriteString(_m.UserAudioURL)
	builder.WriteString(", ")
	builder.WriteString("reference_audio_url=")
	builder.WriteString(_m.ReferenceAudioURL)
	builder.WriteString(", ")
	builder.WriteString("similarity_score=")
	builder.WriteString(fmt.Sprintf("%v", _m.SimilarityScore))
	builder.WriteString(", ")
	builder.WriteString("pronunciation_feedback=")
	builder.WriteString(_m.PronunciationFeedback)
	builder.WriteString(", ")
	builder.WriteString("phonetic_accuracy=")
	builder.WriteString(fmt.Sprintf("%v", _m.PhoneticAccuracy))
	builder.WriteString(", ")
	builder.WriteString("attempt_date=")
	builder.WriteString(_m.AttemptDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("was_successful=")
	builder.WriteString(fmt.Sprintf("%v", _m.WasSuccessful))
	builder.WriteByte(')')
	return builder.String()
}

// PronunciationAttempts is a parsable slice of PronunciationAttempt.
type PronunciationAttempts []*PronunciationAttempt
