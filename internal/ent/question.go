// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"learning-french-service/internal/ent/question"
	"learning-french-service/internal/ent/word"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Question is the model entity for the Question schema.
type Question struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// english_to_french, french_to_english, pronunciation
	QuestionType string `json:"question_type,omitempty"`
	// The question displayed to user
	QuestionText string `json:"question_text,omitempty"`
	// Expected correct answer
	CorrectAnswer string `json:"correct_answer,omitempty"`
	// Inherited from word or adjusted
	DifficultyLevel string `json:"difficulty_level,omitempty"`
	// GeneratedAt holds the value of the "generated_at" field.
	GeneratedAt time.Time `json:"generated_at,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// Multiple choice options if applicable
	Options []string `json:"options,omitempty"`
	// Helpful hints for the question
	Hints string `json:"hints,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the QuestionQuery when eager-loading is set.
	Edges          QuestionEdges `json:"edges"`
	word_questions *int
	selectValues   sql.SelectValues
}

// QuestionEdges holds the relations/edges for other nodes in the graph.
type QuestionEdges struct {
	// Word holds the value of the word edge.
	Word *Word `json:"word,omitempty"`
	// QuestionReviews holds the value of the question_reviews edge.
	QuestionReviews []*QuestionReview `json:"question_reviews,omitempty"`
	// QuestionAttempts holds the value of the question_attempts edge.
	QuestionAttempts []*QuestionAttempt `json:"question_attempts,omitempty"`
	// PronunciationAttempts holds the value of the pronunciation_attempts edge.
	PronunciationAttempts []*PronunciationAttempt `json:"pronunciation_attempts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// WordOrErr returns the Word value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e QuestionEdges) WordOrErr() (*Word, error) {
	if e.Word != nil {
		return e.Word, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: word.Label}
	}
	return nil, &NotLoadedError{edge: "word"}
}

// QuestionReviewsOrErr returns the QuestionReviews value or an error if the edge
// was not loaded in eager-loading.
func (e QuestionEdges) QuestionReviewsOrErr() ([]*QuestionReview, error) {
	if e.loadedTypes[1] {
		return e.QuestionReviews, nil
	}
	return nil, &NotLoadedError{edge: "question_reviews"}
}

// QuestionAttemptsOrErr returns the QuestionAttempts value or an error if the edge
// was not loaded in eager-loading.
func (e QuestionEdges) QuestionAttemptsOrErr() ([]*QuestionAttempt, error) {
	if e.loadedTypes[2] {
		return e.QuestionAttempts, nil
	}
	return nil, &NotLoadedError{edge: "question_attempts"}
}

// PronunciationAttemptsOrErr returns the PronunciationAttempts value or an error if the edge
// was not loaded in eager-loading.
func (e QuestionEdges) PronunciationAttemptsOrErr() ([]*PronunciationAttempt, error) {
	if e.loadedTypes[3] {
		return e.PronunciationAttempts, nil
	}
	return nil, &NotLoadedError{edge: "pronunciation_attempts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Question) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case question.FieldOptions:
			values[i] = new([]byte)
		case question.FieldIsActive:
			values[i] = new(sql.NullBool)
		case question.FieldID:
			values[i] = new(sql.NullInt64)
		case question.FieldQuestionType, question.FieldQuestionText, question.FieldCorrectAnswer, question.FieldDifficultyLevel, question.FieldHints:
			values[i] = new(sql.NullString)
		case question.FieldGeneratedAt:
			values[i] = new(sql.NullTime)
		case question.ForeignKeys[0]: // word_questions
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Question fields.
func (_m *Question) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case question.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case question.FieldQuestionType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field question_type", values[i])
			} else if value.Valid {
				_m.QuestionType = value.String
			}
		case question.FieldQuestionText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field question_text", values[i])
			} else if value.Valid {
				_m.QuestionText = value.String
			}
		case question.FieldCorrectAnswer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field correct_answer", values[i])
			} else if value.Valid {
				_m.CorrectAnswer = value.String
			}
		case question.FieldDifficultyLevel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field difficulty_level", values[i])
			} else if value.Valid {
				_m.DifficultyLevel = value.String
			}
		case question.FieldGeneratedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field generated_at", values[i])
			} else if value.Valid {
				_m.GeneratedAt = value.Time
			}
		case question.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				_m.IsActive = value.Bool
			}
		case question.FieldOptions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field options", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Options); err != nil {
					return fmt.Errorf("unmarshal field options: %w", err)
				}
			}
		case question.FieldHints:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hints", values[i])
			} else if value.Valid {
				_m.Hints = value.String
			}
		case question.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field word_questions", value)
			} else if value.Valid {
				_m.word_questions = new(int)
				*_m.word_questions = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Question.
// This includes values selected through modifiers, order, etc.
func (_m *Question) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryWord queries the "word" edge of the Question entity.
func (_m *Question) QueryWord() *WordQuery {
	return NewQuestionClient(_m.config).QueryWord(_m)
}

// QueryQuestionReviews queries the "question_reviews" edge of the Question entity.
func (_m *Question) QueryQuestionReviews() *QuestionReviewQuery {
	return NewQuestionClient(_m.config).QueryQuestionReviews(_m)
}

// QueryQuestionAttempts queries the "question_attempts" edge of the Question entity.
func (_m *Question) QueryQuestionAttempts() *QuestionAttemptQuery {
	return NewQuestionClient(_m.config).QueryQuestionAttempts(_m)
}

// QueryPronunciationAttempts queries the "pronunciation_attempts" edge of the Question entity.
func (_m *Question) QueryPronunciationAttempts() *PronunciationAttemptQuery {
	return NewQuestionClient(_m.config).QueryPronunciationAttempts(_m)
}

// Update returns a builder for updating this Question.
// Note that you need to call Question.Unwrap() before calling this method if this Question
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Question) Update() *QuestionUpdateOne {
	return NewQuestionClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Question entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Question) Unwrap() *Question {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Question is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Question) String() string {
	var builder strings.Builder
	builder.WriteString("Question(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("question_type=")
	builder.WriteString(_m.QuestionType)
	builder.WriteString(", ")
	builder.WriteString("question_text=")
	builder.WriteString(_m.QuestionText)
	builder.WriteString(", ")
	builder.WriteString("correct_answer=")
	builder.WriteString(_m.CorrectAnswer)
	builder.WriteString(", ")
	builder.WriteString("difficulty_level=")
	builder.WriteString(_m.DifficultyLevel)
	builder.WriteString(", ")
	builder.WriteString("generated_at=")
	builder.WriteString(_m.GeneratedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsActive))
	builder.WriteString(", ")
	builder.WriteString("options=")
	builder.WriteString(fmt.Sprintf("%v", _m.Options))
	builder.WriteString(", ")
	builder.WriteString("hints=")
	builder.WriteString(_m.Hints)
	builder.WriteByte(')')
	return builder.String()
}

// Questions is a parsable slice of Question.
type Questions []*Question
