// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"learning-french-service/internal/ent/user"
	"learning-french-service/internal/ent/userstats"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserStatsCreate is the builder for creating a UserStats entity.
type UserStatsCreate struct {
	config
	mutation *UserStatsMutation
	hooks    []Hook
}

// SetStatDate sets the "stat_date" field.
func (_c *UserStatsCreate) SetStatDate(v time.Time) *UserStatsCreate {
	_c.mutation.SetStatDate(v)
	return _c
}

// SetNillableStatDate sets the "stat_date" field if the given value is not nil.
func (_c *UserStatsCreate) SetNillableStatDate(v *time.Time) *UserStatsCreate {
	if v != nil {
		_c.SetStatDate(*v)
	}
	return _c
}

// SetQuestionsAnswered sets the "questions_answered" field.
func (_c *UserStatsCreate) SetQuestionsAnswered(v int) *UserStatsCreate {
	_c.mutation.SetQuestionsAnswered(v)
	return _c
}

// SetNillableQuestionsAnswered sets the "questions_answered" field if the given value is not nil.
func (_c *UserStatsCreate) SetNillableQuestionsAnswered(v *int) *UserStatsCreate {
	if v != nil {
		_c.SetQuestionsAnswered(*v)
	}
	return _c
}

// SetQuestionsCorrect sets the "questions_correct" field.
func (_c *UserStatsCreate) SetQuestionsCorrect(v int) *UserStatsCreate {
	_c.mutation.SetQuestionsCorrect(v)
	return _c
}

// SetNillableQuestionsCorrect sets the "questions_correct" field if the given value is not nil.
func (_c *UserStatsCreate) SetNillableQuestionsCorrect(v *int) *UserStatsCreate {
	if v != nil {
		_c.SetQuestionsCorrect(*v)
	}
	return _c
}

// SetWordsLearned sets the "words_learned" field.
func (_c *UserStatsCreate) SetWordsLearned(v int) *UserStatsCreate {
	_c.mutation.SetWordsLearned(v)
	return _c
}

// SetNillableWordsLearned sets the "words_learned" field if the given value is not nil.
func (_c *UserStatsCreate) SetNillableWordsLearned(v *int) *UserStatsCreate {
	if v != nil {
		_c.SetWordsLearned(*v)
	}
	return _c
}

// SetTotalStudyTimeMinutes sets the "total_study_time_minutes" field.
func (_c *UserStatsCreate) SetTotalStudyTimeMinutes(v int) *UserStatsCreate {
	_c.mutation.SetTotalStudyTimeMinutes(v)
	return _c
}

// SetNillableTotalStudyTimeMinutes sets the "total_study_time_minutes" field if the given value is not nil.
func (_c *UserStatsCreate) SetNillableTotalStudyTimeMinutes(v *int) *UserStatsCreate {
	if v != nil {
		_c.SetTotalStudyTimeMinutes(*v)
	}
	return _c
}

// SetStreakDays sets the "streak_days" field.
func (_c *UserStatsCreate) SetStreakDays(v int) *UserStatsCreate {
	_c.mutation.SetStreakDays(v)
	return _c
}

// SetNillableStreakDays sets the "streak_days" field if the given value is not nil.
func (_c *UserStatsCreate) SetNillableStreakDays(v *int) *UserStatsCreate {
	if v != nil {
		_c.SetStreakDays(*v)
	}
	return _c
}

// SetEnglishToFrenchAccuracy sets the "english_to_french_accuracy" field.
func (_c *UserStatsCreate) SetEnglishToFrenchAccuracy(v float64) *UserStatsCreate {
	_c.mutation.SetEnglishToFrenchAccuracy(v)
	return _c
}

// SetNillableEnglishToFrenchAccuracy sets the "english_to_french_accuracy" field if the given value is not nil.
func (_c *UserStatsCreate) SetNillableEnglishToFrenchAccuracy(v *float64) *UserStatsCreate {
	if v != nil {
		_c.SetEnglishToFrenchAccuracy(*v)
	}
	return _c
}

// SetFrenchToEnglishAccuracy sets the "french_to_english_accuracy" field.
func (_c *UserStatsCreate) SetFrenchToEnglishAccuracy(v float64) *UserStatsCreate {
	_c.mutation.SetFrenchToEnglishAccuracy(v)
	return _c
}

// SetNillableFrenchToEnglishAccuracy sets the "french_to_english_accuracy" field if the given value is not nil.
func (_c *UserStatsCreate) SetNillableFrenchToEnglishAccuracy(v *float64) *UserStatsCreate {
	if v != nil {
		_c.SetFrenchToEnglishAccuracy(*v)
	}
	return _c
}

// SetPronunciationAccuracy sets the "pronunciation_accuracy" field.
func (_c *UserStatsCreate) SetPronunciationAccuracy(v float64) *UserStatsCreate {
	_c.mutation.SetPronunciationAccuracy(v)
	return _c
}

// SetNillablePronunciationAccuracy sets the "pronunciation_accuracy" field if the given value is not nil.
func (_c *UserStatsCreate) SetNillablePronunciationAccuracy(v *float64) *UserStatsCreate {
	if v != nil {
		_c.SetPronunciationAccuracy(*v)
	}
	return _c
}

// SetAverageResponseTimeMs sets the "average_response_time_ms" field.
func (_c *UserStatsCreate) SetAverageResponseTimeMs(v int) *UserStatsCreate {
	_c.mutation.SetAverageResponseTimeMs(v)
	return _c
}

// SetNillableAverageResponseTimeMs sets the "average_response_time_ms" field if the given value is not nil.
func (_c *UserStatsCreate) SetNillableAverageResponseTimeMs(v *int) *UserStatsCreate {
	if v != nil {
		_c.SetAverageResponseTimeMs(*v)
	}
	return _c
}

// SetWordsPerMinute sets the "words_per_minute" field.
func (_c *UserStatsCreate) SetWordsPerMinute(v float64) *UserStatsCreate {
	_c.mutation.SetWordsPerMinute(v)
	return _c
}

// SetNillableWordsPerMinute sets the "words_per_minute" field if the given value is not nil.
func (_c *UserStatsCreate) SetNillableWordsPerMinute(v *float64) *UserStatsCreate {
	if v != nil {
		_c.SetWordsPerMinute(*v)
	}
	return _c
}

// SetStrengths sets the "strengths" field.
func (_c *UserStatsCreate) SetStrengths(v []string) *UserStatsCreate {
	_c.mutation.SetStrengths(v)
	return _c
}

// SetWeaknesses sets the "weaknesses" field.
func (_c *UserStatsCreate) SetWeaknesses(v []string) *UserStatsCreate {
	_c.mutation.SetWeaknesses(v)
	return _c
}

// SetRecommendations sets the "recommendations" field.
func (_c *UserStatsCreate) SetRecommendations(v string) *UserStatsCreate {
	_c.mutation.SetRecommendations(v)
	return _c
}

// SetNillableRecommendations sets the "recommendations" field if the given value is not nil.
func (_c *UserStatsCreate) SetNillableRecommendations(v *string) *UserStatsCreate {
	if v != nil {
		_c.SetRecommendations(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *UserStatsCreate) SetCreatedAt(v time.Time) *UserStatsCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *UserStatsCreate) SetNillableCreatedAt(v *time.Time) *UserStatsCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *UserStatsCreate) SetUpdatedAt(v time.Time) *UserStatsCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *UserStatsCreate) SetNillableUpdatedAt(v *time.Time) *UserStatsCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_c *UserStatsCreate) SetUserID(id int) *UserStatsCreate {
	_c.mutation.SetUserID(id)
	return _c
}

// SetUser sets the "user" edge to the User entity.
func (_c *UserStatsCreate) SetUser(v *User) *UserStatsCreate {
	return _c.SetUserID(v.ID)
}

// Mutation returns the UserStatsMutation object of the builder.
func (_c *UserStatsCreate) Mutation() *UserStatsMutation {
	return _c.mutation
}

// Save creates the UserStats in the database.
func (_c *UserStatsCreate) Save(ctx context.Context) (*UserStats, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *UserStatsCreate) SaveX(ctx context.Context) *UserStats {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UserStatsCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UserStatsCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *UserStatsCreate) defaults() {
	if _, ok := _c.mutation.StatDate(); !ok {
		v := userstats.DefaultStatDate()
		_c.mutation.SetStatDate(v)
	}
	if _, ok := _c.mutation.QuestionsAnswered(); !ok {
		v := userstats.DefaultQuestionsAnswered
		_c.mutation.SetQuestionsAnswered(v)
	}
	if _, ok := _c.mutation.QuestionsCorrect(); !ok {
		v := userstats.DefaultQuestionsCorrect
		_c.mutation.SetQuestionsCorrect(v)
	}
	if _, ok := _c.mutation.WordsLearned(); !ok {
		v := userstats.DefaultWordsLearned
		_c.mutation.SetWordsLearned(v)
	}
	if _, ok := _c.mutation.TotalStudyTimeMinutes(); !ok {
		v := userstats.DefaultTotalStudyTimeMinutes
		_c.mutation.SetTotalStudyTimeMinutes(v)
	}
	if _, ok := _c.mutation.StreakDays(); !ok {
		v := userstats.DefaultStreakDays
		_c.mutation.SetStreakDays(v)
	}
	if _, ok := _c.mutation.EnglishToFrenchAccuracy(); !ok {
		v := userstats.DefaultEnglishToFrenchAccuracy
		_c.mutation.SetEnglishToFrenchAccuracy(v)
	}
	if _, ok := _c.mutation.FrenchToEnglishAccuracy(); !ok {
		v := userstats.DefaultFrenchToEnglishAccuracy
		_c.mutation.SetFrenchToEnglishAccuracy(v)
	}
	if _, ok := _c.mutation.PronunciationAccuracy(); !ok {
		v := userstats.DefaultPronunciationAccuracy
		_c.mutation.SetPronunciationAccuracy(v)
	}
	if _, ok := _c.mutation.AverageResponseTimeMs(); !ok {
		v := userstats.DefaultAverageResponseTimeMs
		_c.mutation.SetAverageResponseTimeMs(v)
	}
	if _, ok := _c.mutation.WordsPerMinute(); !ok {
		v := userstats.DefaultWordsPerMinute
		_c.mutation.SetWordsPerMinute(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := userstats.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := userstats.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *UserStatsCreate) check() error {
	if _, ok := _c.mutation.StatDate(); !ok {
		return &ValidationError{Name: "stat_date", err: errors.New(`ent: missing required field "UserStats.stat_date"`)}
	}
	if _, ok := _c.mutation.QuestionsAnswered(); !ok {
		return &ValidationError{Name: "questions_answered", err: errors.New(`ent: missing required field "UserStats.questions_answered"`)}
	}
	if _, ok := _c.mutation.QuestionsCorrect(); !ok {
		return &ValidationError{Name: "questions_correct", err: errors.New(`ent: missing required field "UserStats.questions_correct"`)}
	}
	if _, ok := _c.mutation.WordsLearned(); !ok {
		return &ValidationError{Name: "words_learned", err: errors.New(`ent: missing required field "UserStats.words_learned"`)}
	}
	if _, ok := _c.mutation.TotalStudyTimeMinutes(); !ok {
		return &ValidationError{Name: "total_study_time_minutes", err: errors.New(`ent: missing required field "UserStats.total_study_time_minutes"`)}
	}
	if _, ok := _c.mutation.StreakDays(); !ok {
		return &ValidationError{Name: "streak_days", err: errors.New(`ent: missing required field "UserStats.streak_days"`)}
	}
	if _, ok := _c.mutation.EnglishToFrenchAccuracy(); !ok {
		return &ValidationError{Name: "english_to_french_accuracy", err: errors.New(`ent: missing required field "UserStats.english_to_french_accuracy"`)}
	}
	if _, ok := _c.mutation.FrenchToEnglishAccuracy(); !ok {
		return &ValidationError{Name: "french_to_english_accuracy", err: errors.New(`ent: missing required field "UserStats.french_to_english_accuracy"`)}
	}
	if _, ok := _c.mutation.PronunciationAccuracy(); !ok {
		return &ValidationError{Name: "pronunciation_accuracy", err: errors.New(`ent: missing required field "UserStats.pronunciation_accuracy"`)}
	}
	if _, ok := _c.mutation.AverageResponseTimeMs(); !ok {
		return &ValidationError{Name: "average_response_time_ms", err: errors.New(`ent: missing required field "UserStats.average_response_time_ms"`)}
	}
	if _, ok := _c.mutation.WordsPerMinute(); !ok {
		return &ValidationError{Name: "words_per_minute", err: errors.New(`ent: missing required field "UserStats.words_per_minute"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserStats.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "UserStats.updated_at"`)}
	}
	if len(_c.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UserStats.user"`)}
	}
	return nil
}

func (_c *UserStatsCreate) sqlSave(ctx context.Context) (*UserStats, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *UserStatsCreate) createSpec() (*UserStats, *sqlgraph.CreateSpec) {
	var (
		_node = &UserStats{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(userstats.Table, sqlgraph.NewFieldSpec(userstats.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.StatDate(); ok {
		_spec.SetField(userstats.FieldStatDate, field.TypeTime, value)
		_node.StatDate = value
	}
	if value, ok := _c.mutation.QuestionsAnswered(); ok {
		_spec.SetField(userstats.FieldQuestionsAnswered, field.TypeInt, value)
		_node.QuestionsAnswered = value
	}
	if value, ok := _c.mutation.QuestionsCorrect(); ok {
		_spec.SetField(userstats.FieldQuestionsCorrect, field.TypeInt, value)
		_node.QuestionsCorrect = value
	}
	if value, ok := _c.mutation.WordsLearned(); ok {
		_spec.SetField(userstats.FieldWordsLearned, field.TypeInt, value)
		_node.WordsLearned = value
	}
	if value, ok := _c.mutation.TotalStudyTimeMinutes(); ok {
		_spec.SetField(userstats.FieldTotalStudyTimeMinutes, field.TypeInt, value)
		_node.TotalStudyTimeMinutes = value
	}
	if value, ok := _c.mutation.StreakDays(); ok {
		_spec.SetField(userstats.FieldStreakDays, field.TypeInt, value)
		_node.StreakDays = value
	}
	if value, ok := _c.mutation.EnglishToFrenchAccuracy(); ok {
		_spec.SetField(userstats.FieldEnglishToFrenchAccuracy, field.TypeFloat64, value)
		_node.EnglishToFrenchAccuracy = value
	}
	if value, ok := _c.mutation.FrenchToEnglishAccuracy(); ok {
		_spec.SetField(userstats.FieldFrenchToEnglishAccuracy, field.TypeFloat64, value)
		_node.FrenchToEnglishAccuracy = value
	}
	if value, ok := _c.mutation.PronunciationAccuracy(); ok {
		_spec.SetField(userstats.FieldPronunciationAccuracy, field.TypeFloat64, value)
		_node.PronunciationAccuracy = value
	}
	if value, ok := _c.mutation.AverageResponseTimeMs(); ok {
		_spec.SetField(userstats.FieldAverageResponseTimeMs, field.TypeInt, value)
		_node.AverageResponseTimeMs = value
	}
	if value, ok := _c.mutation.WordsPerMinute(); ok {
		_spec.SetField(userstats.FieldWordsPerMinute, field.TypeFloat64, value)
		_node.WordsPerMinute = value
	}
	if value, ok := _c.mutation.Strengths(); ok {
		_spec.SetField(userstats.FieldStrengths, field.TypeJSON, value)
		_node.Strengths = value
	}
	if value, ok := _c.mutation.Weaknesses(); ok {
		_spec.SetField(userstats.FieldWeaknesses, field.TypeJSON, value)
		_node.Weaknesses = value
	}
	if value, ok := _c.mutation.Recommendations(); ok {
		_spec.SetField(userstats.FieldRecommendations, field.TypeString, value)
		_node.Recommendations = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(userstats.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(userstats.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userstats.UserTable,
			Columns: []string{userstats.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_user_stats = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserStatsCreateBulk is the builder for creating many UserStats entities in bulk.
type UserStatsCreateBulk struct {
	config
	err      error
	builders []*UserStatsCreate
}

// Save creates the UserStats entities in the database.
func (_c *UserStatsCreateBulk) Save(ctx context.Context) ([]*UserStats, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*UserStats, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserStatsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *UserStatsCreateBulk) SaveX(ctx context.Context) []*UserStats {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UserStatsCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UserStatsCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
