// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// DecksColumns holds the columns for the "decks" table.
	DecksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Size: 255},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "category", Type: field.TypeString, Nullable: true, Size: 100},
		{Name: "target_level", Type: field.TypeString, Nullable: true, Size: 10},
		{Name: "is_active", Type: field.TypeBool, Default: true},
		{Name: "word_count", Type: field.TypeInt, Default: 0},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "user_decks", Type: field.TypeInt},
	}
	// DecksTable holds the schema information for the "decks" table.
	DecksTable = &schema.Table{
		Name:       "decks",
		Columns:    DecksColumns,
		PrimaryKey: []*schema.Column{DecksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "decks_users_decks",
				Columns:    []*schema.Column{DecksColumns[9]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// LearningStreaksColumns holds the columns for the "learning_streaks" table.
	LearningStreaksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "start_date", Type: field.TypeTime},
		{Name: "end_date", Type: field.TypeTime, Nullable: true},
		{Name: "streak_length", Type: field.TypeInt, Default: 0},
		{Name: "is_current", Type: field.TypeBool, Default: false},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "user_learning_streaks", Type: field.TypeInt},
	}
	// LearningStreaksTable holds the schema information for the "learning_streaks" table.
	LearningStreaksTable = &schema.Table{
		Name:       "learning_streaks",
		Columns:    LearningStreaksColumns,
		PrimaryKey: []*schema.Column{LearningStreaksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "learning_streaks_users_learning_streaks",
				Columns:    []*schema.Column{LearningStreaksColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// PronunciationAttemptsColumns holds the columns for the "pronunciation_attempts" table.
	PronunciationAttemptsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "user_audio_url", Type: field.TypeString, Size: 500},
		{Name: "reference_audio_url", Type: field.TypeString, Nullable: true, Size: 500},
		{Name: "similarity_score", Type: field.TypeFloat64, Nullable: true},
		{Name: "pronunciation_feedback", Type: field.TypeString, Nullable: true},
		{Name: "phonetic_accuracy", Type: field.TypeJSON, Nullable: true},
		{Name: "attempt_date", Type: field.TypeTime},
		{Name: "was_successful", Type: field.TypeBool, Nullable: true},
		{Name: "question_pronunciation_attempts", Type: field.TypeInt},
		{Name: "user_pronunciation_attempts", Type: field.TypeInt},
		{Name: "word_pronunciation_attempts", Type: field.TypeInt},
	}
	// PronunciationAttemptsTable holds the schema information for the "pronunciation_attempts" table.
	PronunciationAttemptsTable = &schema.Table{
		Name:       "pronunciation_attempts",
		Columns:    PronunciationAttemptsColumns,
		PrimaryKey: []*schema.Column{PronunciationAttemptsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "pronunciation_attempts_questions_pronunciation_attempts",
				Columns:    []*schema.Column{PronunciationAttemptsColumns[8]},
				RefColumns: []*schema.Column{QuestionsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "pronunciation_attempts_users_pronunciation_attempts",
				Columns:    []*schema.Column{PronunciationAttemptsColumns[9]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "pronunciation_attempts_words_pronunciation_attempts",
				Columns:    []*schema.Column{PronunciationAttemptsColumns[10]},
				RefColumns: []*schema.Column{WordsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// QuestionsColumns holds the columns for the "questions" table.
	QuestionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "question_type", Type: field.TypeString, Size: 50},
		{Name: "question_text", Type: field.TypeString},
		{Name: "correct_answer", Type: field.TypeString},
		{Name: "difficulty_level", Type: field.TypeString, Nullable: true, Size: 10},
		{Name: "generated_at", Type: field.TypeTime},
		{Name: "is_active", Type: field.TypeBool, Default: true},
		{Name: "options", Type: field.TypeJSON, Nullable: true},
		{Name: "hints", Type: field.TypeString, Nullable: true},
		{Name: "word_questions", Type: field.TypeInt},
	}
	// QuestionsTable holds the schema information for the "questions" table.
	QuestionsTable = &schema.Table{
		Name:       "questions",
		Columns:    QuestionsColumns,
		PrimaryKey: []*schema.Column{QuestionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "questions_words_questions",
				Columns:    []*schema.Column{QuestionsColumns[9]},
				RefColumns: []*schema.Column{WordsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// QuestionAttemptsColumns holds the columns for the "question_attempts" table.
	QuestionAttemptsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "user_answer", Type: field.TypeString, Nullable: true},
		{Name: "ai_grade", Type: field.TypeString, Nullable: true, Size: 20},
		{Name: "ai_feedback", Type: field.TypeString, Nullable: true},
		{Name: "similarity_score", Type: field.TypeFloat64, Nullable: true},
		{Name: "quality_rating", Type: field.TypeInt, Nullable: true},
		{Name: "response_time_ms", Type: field.TypeInt, Nullable: true},
		{Name: "was_correct", Type: field.TypeBool, Default: false},
		{Name: "needs_repeat", Type: field.TypeBool, Default: false},
		{Name: "attempt_date", Type: field.TypeTime},
		{Name: "question_question_attempts", Type: field.TypeInt},
		{Name: "question_review_question_attempts", Type: field.TypeInt},
		{Name: "user_question_attempts", Type: field.TypeInt},
	}
	// QuestionAttemptsTable holds the schema information for the "question_attempts" table.
	QuestionAttemptsTable = &schema.Table{
		Name:       "question_attempts",
		Columns:    QuestionAttemptsColumns,
		PrimaryKey: []*schema.Column{QuestionAttemptsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "question_attempts_questions_question_attempts",
				Columns:    []*schema.Column{QuestionAttemptsColumns[10]},
				RefColumns: []*schema.Column{QuestionsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "question_attempts_question_reviews_question_attempts",
				Columns:    []*schema.Column{QuestionAttemptsColumns[11]},
				RefColumns: []*schema.Column{QuestionReviewsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "question_attempts_users_question_attempts",
				Columns:    []*schema.Column{QuestionAttemptsColumns[12]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// QuestionReviewsColumns holds the columns for the "question_reviews" table.
	QuestionReviewsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "ease_factor", Type: field.TypeFloat64, Default: 2.5},
		{Name: "interval_days", Type: field.TypeInt, Default: 1},
		{Name: "repetition_count", Type: field.TypeInt, Default: 0},
		{Name: "next_review_date", Type: field.TypeTime},
		{Name: "last_reviewed_at", Type: field.TypeTime, Nullable: true},
		{Name: "is_due", Type: field.TypeBool, Default: true},
		{Name: "total_attempts", Type: field.TypeInt, Default: 0},
		{Name: "correct_attempts", Type: field.TypeInt, Default: 0},
		{Name: "accuracy_rate", Type: field.TypeFloat64, Default: 0},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "question_question_reviews", Type: field.TypeInt},
		{Name: "user_question_reviews", Type: field.TypeInt},
	}
	// QuestionReviewsTable holds the schema information for the "question_reviews" table.
	QuestionReviewsTable = &schema.Table{
		Name:       "question_reviews",
		Columns:    QuestionReviewsColumns,
		PrimaryKey: []*schema.Column{QuestionReviewsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "question_reviews_questions_question_reviews",
				Columns:    []*schema.Column{QuestionReviewsColumns[12]},
				RefColumns: []*schema.Column{QuestionsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "question_reviews_users_question_reviews",
				Columns:    []*schema.Column{QuestionReviewsColumns[13]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "email", Type: field.TypeString, Unique: true, Size: 255},
		{Name: "password_hash", Type: field.TypeString, Size: 255},
		{Name: "username", Type: field.TypeString, Unique: true, Nullable: true, Size: 50},
		{Name: "first_name", Type: field.TypeString, Nullable: true, Size: 100},
		{Name: "last_name", Type: field.TypeString, Nullable: true, Size: 100},
		{Name: "current_level", Type: field.TypeString, Nullable: true, Size: 10},
		{Name: "target_level", Type: field.TypeString, Nullable: true, Size: 10},
		{Name: "daily_goal", Type: field.TypeInt, Default: 20},
		{Name: "timezone", Type: field.TypeString, Size: 50, Default: "UTC"},
		{Name: "last_active_at", Type: field.TypeTime, Nullable: true},
		{Name: "is_active", Type: field.TypeBool, Default: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// UserStatsColumns holds the columns for the "user_stats" table.
	UserStatsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "stat_date", Type: field.TypeTime},
		{Name: "questions_answered", Type: field.TypeInt, Default: 0},
		{Name: "questions_correct", Type: field.TypeInt, Default: 0},
		{Name: "words_learned", Type: field.TypeInt, Default: 0},
		{Name: "total_study_time_minutes", Type: field.TypeInt, Default: 0},
		{Name: "streak_days", Type: field.TypeInt, Default: 0},
		{Name: "english_to_french_accuracy", Type: field.TypeFloat64, Default: 0},
		{Name: "french_to_english_accuracy", Type: field.TypeFloat64, Default: 0},
		{Name: "pronunciation_accuracy", Type: field.TypeFloat64, Default: 0},
		{Name: "average_response_time_ms", Type: field.TypeInt, Default: 0},
		{Name: "words_per_minute", Type: field.TypeFloat64, Default: 0},
		{Name: "strengths", Type: field.TypeJSON, Nullable: true},
		{Name: "weaknesses", Type: field.TypeJSON, Nullable: true},
		{Name: "recommendations", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "user_user_stats", Type: field.TypeInt},
	}
	// UserStatsTable holds the schema information for the "user_stats" table.
	UserStatsTable = &schema.Table{
		Name:       "user_stats",
		Columns:    UserStatsColumns,
		PrimaryKey: []*schema.Column{UserStatsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_stats_users_user_stats",
				Columns:    []*schema.Column{UserStatsColumns[17]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// WordsColumns holds the columns for the "words" table.
	WordsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "french_word", Type: field.TypeString, Size: 255},
		{Name: "english_translation", Type: field.TypeString},
		{Name: "part_of_speech", Type: field.TypeString, Nullable: true, Size: 50},
		{Name: "gender", Type: field.TypeString, Nullable: true, Size: 10},
		{Name: "french_example", Type: field.TypeString, Nullable: true},
		{Name: "english_example_translation", Type: field.TypeString, Nullable: true},
		{Name: "phonetic_transcription", Type: field.TypeString, Nullable: true, Size: 255},
		{Name: "pronunciation_audio_url", Type: field.TypeString, Nullable: true, Size: 500},
		{Name: "difficulty_level", Type: field.TypeString, Nullable: true, Size: 10},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "usage_context", Type: field.TypeString, Nullable: true},
		{Name: "is_active", Type: field.TypeBool, Default: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deck_words", Type: field.TypeInt},
	}
	// WordsTable holds the schema information for the "words" table.
	WordsTable = &schema.Table{
		Name:       "words",
		Columns:    WordsColumns,
		PrimaryKey: []*schema.Column{WordsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "words_decks_words",
				Columns:    []*schema.Column{WordsColumns[15]},
				RefColumns: []*schema.Column{DecksColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		DecksTable,
		LearningStreaksTable,
		PronunciationAttemptsTable,
		QuestionsTable,
		QuestionAttemptsTable,
		QuestionReviewsTable,
		UsersTable,
		UserStatsTable,
		WordsTable,
	}
)

func init() {
	DecksTable.ForeignKeys[0].RefTable = UsersTable
	LearningStreaksTable.ForeignKeys[0].RefTable = UsersTable
	PronunciationAttemptsTable.ForeignKeys[0].RefTable = QuestionsTable
	PronunciationAttemptsTable.ForeignKeys[1].RefTable = UsersTable
	PronunciationAttemptsTable.ForeignKeys[2].RefTable = WordsTable
	QuestionsTable.ForeignKeys[0].RefTable = WordsTable
	QuestionAttemptsTable.ForeignKeys[0].RefTable = QuestionsTable
	QuestionAttemptsTable.ForeignKeys[1].RefTable = QuestionReviewsTable
	QuestionAttemptsTable.ForeignKeys[2].RefTable = UsersTable
	QuestionReviewsTable.ForeignKeys[0].RefTable = QuestionsTable
	QuestionReviewsTable.ForeignKeys[1].RefTable = UsersTable
	UserStatsTable.ForeignKeys[0].RefTable = UsersTable
	WordsTable.ForeignKeys[0].RefTable = DecksTable
}
