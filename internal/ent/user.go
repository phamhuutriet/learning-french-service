// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"learning-french-service/internal/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// PasswordHash holds the value of the "password_hash" field.
	PasswordHash string `json:"password_hash,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// FirstName holds the value of the "first_name" field.
	FirstName string `json:"first_name,omitempty"`
	// LastName holds the value of the "last_name" field.
	LastName string `json:"last_name,omitempty"`
	// A1, A2, B1, B2, C1, C2
	CurrentLevel string `json:"current_level,omitempty"`
	// TargetLevel holds the value of the "target_level" field.
	TargetLevel string `json:"target_level,omitempty"`
	// Questions to review per day
	DailyGoal int `json:"daily_goal,omitempty"`
	// Timezone holds the value of the "timezone" field.
	Timezone string `json:"timezone,omitempty"`
	// LastActiveAt holds the value of the "last_active_at" field.
	LastActiveAt time.Time `json:"last_active_at,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Decks holds the value of the decks edge.
	Decks []*Deck `json:"decks,omitempty"`
	// QuestionReviews holds the value of the question_reviews edge.
	QuestionReviews []*QuestionReview `json:"question_reviews,omitempty"`
	// QuestionAttempts holds the value of the question_attempts edge.
	QuestionAttempts []*QuestionAttempt `json:"question_attempts,omitempty"`
	// PronunciationAttempts holds the value of the pronunciation_attempts edge.
	PronunciationAttempts []*PronunciationAttempt `json:"pronunciation_attempts,omitempty"`
	// UserStats holds the value of the user_stats edge.
	UserStats []*UserStats `json:"user_stats,omitempty"`
	// LearningStreaks holds the value of the learning_streaks edge.
	LearningStreaks []*LearningStreak `json:"learning_streaks,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// DecksOrErr returns the Decks value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) DecksOrErr() ([]*Deck, error) {
	if e.loadedTypes[0] {
		return e.Decks, nil
	}
	return nil, &NotLoadedError{edge: "decks"}
}

// QuestionReviewsOrErr returns the QuestionReviews value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) QuestionReviewsOrErr() ([]*QuestionReview, error) {
	if e.loadedTypes[1] {
		return e.QuestionReviews, nil
	}
	return nil, &NotLoadedError{edge: "question_reviews"}
}

// QuestionAttemptsOrErr returns the QuestionAttempts value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) QuestionAttemptsOrErr() ([]*QuestionAttempt, error) {
	if e.loadedTypes[2] {
		return e.QuestionAttempts, nil
	}
	return nil, &NotLoadedError{edge: "question_attempts"}
}

// PronunciationAttemptsOrErr returns the PronunciationAttempts value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) PronunciationAttemptsOrErr() ([]*PronunciationAttempt, error) {
	if e.loadedTypes[3] {
		return e.PronunciationAttempts, nil
	}
	return nil, &NotLoadedError{edge: "pronunciation_attempts"}
}

// UserStatsOrErr returns the UserStats value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserStatsOrErr() ([]*UserStats, error) {
	if e.loadedTypes[4] {
		return e.UserStats, nil
	}
	return nil, &NotLoadedError{edge: "user_stats"}
}

// LearningStreaksOrErr returns the LearningStreaks value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) LearningStreaksOrErr() ([]*LearningStreak, error) {
	if e.loadedTypes[5] {
		return e.LearningStreaks, nil
	}
	return nil, &NotLoadedError{edge: "learning_streaks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldIsActive:
			values[i] = new(sql.NullBool)
		case user.FieldID, user.FieldDailyGoal:
			values[i] = new(sql.NullInt64)
		case user.FieldEmail, user.FieldPasswordHash, user.FieldUsername, user.FieldFirstName, user.FieldLastName, user.FieldCurrentLevel, user.FieldTargetLevel, user.FieldTimezone:
			values[i] = new(sql.NullString)
		case user.FieldLastActiveAt, user.FieldCreatedAt, user.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (_m *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				_m.Email = value.String
			}
		case user.FieldPasswordHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password_hash", values[i])
			} else if value.Valid {
				_m.PasswordHash = value.String
			}
		case user.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				_m.Username = value.String
			}
		case user.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name", values[i])
			} else if value.Valid {
				_m.FirstName = value.String
			}
		case user.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				_m.LastName = value.String
			}
		case user.FieldCurrentLevel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field current_level", values[i])
			} else if value.Valid {
				_m.CurrentLevel = value.String
			}
		case user.FieldTargetLevel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field target_level", values[i])
			} else if value.Valid {
				_m.TargetLevel = value.String
			}
		case user.FieldDailyGoal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field daily_goal", values[i])
			} else if value.Valid {
				_m.DailyGoal = int(value.Int64)
			}
		case user.FieldTimezone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field timezone", values[i])
			} else if value.Valid {
				_m.Timezone = value.String
			}
		case user.FieldLastActiveAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_active_at", values[i])
			} else if value.Valid {
				_m.LastActiveAt = value.Time
			}
		case user.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				_m.IsActive = value.Bool
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (_m *User) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryDecks queries the "decks" edge of the User entity.
func (_m *User) QueryDecks() *DeckQuery {
	return NewUserClient(_m.config).QueryDecks(_m)
}

// QueryQuestionReviews queries the "question_reviews" edge of the User entity.
func (_m *User) QueryQuestionReviews() *QuestionReviewQuery {
	return NewUserClient(_m.config).QueryQuestionReviews(_m)
}

// QueryQuestionAttempts queries the "question_attempts" edge of the User entity.
func (_m *User) QueryQuestionAttempts() *QuestionAttemptQuery {
	return NewUserClient(_m.config).QueryQuestionAttempts(_m)
}

// QueryPronunciationAttempts queries the "pronunciation_attempts" edge of the User entity.
func (_m *User) QueryPronunciationAttempts() *PronunciationAttemptQuery {
	return NewUserClient(_m.config).QueryPronunciationAttempts(_m)
}

// QueryUserStats queries the "user_stats" edge of the User entity.
func (_m *User) QueryUserStats() *UserStatsQuery {
	return NewUserClient(_m.config).QueryUserStats(_m)
}

// QueryLearningStreaks queries the "learning_streaks" edge of the User entity.
func (_m *User) QueryLearningStreaks() *LearningStreakQuery {
	return NewUserClient(_m.config).QueryLearningStreaks(_m)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *User) Update() *UserUpdateOne {
	return NewUserClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *User) Unwrap() *User {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("email=")
	builder.WriteString(_m.Email)
	builder.WriteString(", ")
	builder.WriteString("password_hash=")
	builder.WriteString(_m.PasswordHash)
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(_m.Username)
	builder.WriteString(", ")
	builder.WriteString("first_name=")
	builder.WriteString(_m.FirstName)
	builder.WriteString(", ")
	builder.WriteString("last_name=")
	builder.WriteString(_m.LastName)
	builder.WriteString(", ")
	builder.WriteString("current_level=")
	builder.WriteString(_m.CurrentLevel)
	builder.WriteString(", ")
	builder.WriteString("target_level=")
	builder.WriteString(_m.TargetLevel)
	builder.WriteString(", ")
	builder.WriteString("daily_goal=")
	builder.WriteString(fmt.Sprintf("%v", _m.DailyGoal))
	builder.WriteString(", ")
	builder.WriteString("timezone=")
	builder.WriteString(_m.Timezone)
	builder.WriteString(", ")
	builder.WriteString("last_active_at=")
	builder.WriteString(_m.LastActiveAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsActive))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
