// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"learning-french-service/internal/ent/deck"
	"learning-french-service/internal/ent/word"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Word is the model entity for the Word schema.
type Word struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// User provided
	FrenchWord string `json:"french_word,omitempty"`
	// AI generated
	EnglishTranslation string `json:"english_translation,omitempty"`
	// AI generated: noun, verb, adjective, etc.
	PartOfSpeech string `json:"part_of_speech,omitempty"`
	// AI generated: masculine, feminine, neutral
	Gender string `json:"gender,omitempty"`
	// AI generated example sentence
	FrenchExample string `json:"french_example,omitempty"`
	// AI generated translation of example
	EnglishExampleTranslation string `json:"english_example_translation,omitempty"`
	// IPA notation from trusted API
	PhoneticTranscription string `json:"phonetic_transcription,omitempty"`
	// URL to pronunciation audio file
	PronunciationAudioURL string `json:"pronunciation_audio_url,omitempty"`
	// A1, A2, B1, B2, C1, C2
	DifficultyLevel string `json:"difficulty_level,omitempty"`
	// Array of user tags for filtering
	Tags []string `json:"tags,omitempty"`
	// When/how to use this word
	UsageContext string `json:"usage_context,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WordQuery when eager-loading is set.
	Edges        WordEdges `json:"edges"`
	deck_words   *int
	selectValues sql.SelectValues
}

// WordEdges holds the relations/edges for other nodes in the graph.
type WordEdges struct {
	// Deck holds the value of the deck edge.
	Deck *Deck `json:"deck,omitempty"`
	// Questions holds the value of the questions edge.
	Questions []*Question `json:"questions,omitempty"`
	// PronunciationAttempts holds the value of the pronunciation_attempts edge.
	PronunciationAttempts []*PronunciationAttempt `json:"pronunciation_attempts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// DeckOrErr returns the Deck value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WordEdges) DeckOrErr() (*Deck, error) {
	if e.Deck != nil {
		return e.Deck, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: deck.Label}
	}
	return nil, &NotLoadedError{edge: "deck"}
}

// QuestionsOrErr returns the Questions value or an error if the edge
// was not loaded in eager-loading.
func (e WordEdges) QuestionsOrErr() ([]*Question, error) {
	if e.loadedTypes[1] {
		return e.Questions, nil
	}
	return nil, &NotLoadedError{edge: "questions"}
}

// PronunciationAttemptsOrErr returns the PronunciationAttempts value or an error if the edge
// was not loaded in eager-loading.
func (e WordEdges) PronunciationAttemptsOrErr() ([]*PronunciationAttempt, error) {
	if e.loadedTypes[2] {
		return e.PronunciationAttempts, nil
	}
	return nil, &NotLoadedError{edge: "pronunciation_attempts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Word) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case word.FieldTags:
			values[i] = new([]byte)
		case word.FieldIsActive:
			values[i] = new(sql.NullBool)
		case word.FieldID:
			values[i] = new(sql.NullInt64)
		case word.FieldFrenchWord, word.FieldEnglishTranslation, word.FieldPartOfSpeech, word.FieldGender, word.FieldFrenchExample, word.FieldEnglishExampleTranslation, word.FieldPhoneticTranscription, word.FieldPronunciationAudioURL, word.FieldDifficultyLevel, word.FieldUsageContext:
			values[i] = new(sql.NullString)
		case word.FieldCreatedAt, word.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case word.ForeignKeys[0]: // deck_words
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Word fields.
func (_m *Word) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case word.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case word.FieldFrenchWord:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field french_word", values[i])
			} else if value.Valid {
				_m.FrenchWord = value.String
			}
		case word.FieldEnglishTranslation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field english_translation", values[i])
			} else if value.Valid {
				_m.EnglishTranslation = value.String
			}
		case word.FieldPartOfSpeech:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field part_of_speech", values[i])
			} else if value.Valid {
				_m.PartOfSpeech = value.String
			}
		case word.FieldGender:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				_m.Gender = value.String
			}
		case word.FieldFrenchExample:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field french_example", values[i])
			} else if value.Valid {
				_m.FrenchExample = value.String
			}
		case word.FieldEnglishExampleTranslation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field english_example_translation", values[i])
			} else if value.Valid {
				_m.EnglishExampleTranslation = value.String
			}
		case word.FieldPhoneticTranscription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phonetic_transcription", values[i])
			} else if value.Valid {
				_m.PhoneticTranscription = value.String
			}
		case word.FieldPronunciationAudioURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pronunciation_audio_url", values[i])
			} else if value.Valid {
				_m.PronunciationAudioURL = value.String
			}
		case word.FieldDifficultyLevel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field difficulty_level", values[i])
			} else if value.Valid {
				_m.DifficultyLevel = value.String
			}
		case word.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case word.FieldUsageContext:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field usage_context", values[i])
			} else if value.Valid {
				_m.UsageContext = value.String
			}
		case word.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				_m.IsActive = value.Bool
			}
		case word.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case word.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case word.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field deck_words", value)
			} else if value.Valid {
				_m.deck_words = new(int)
				*_m.deck_words = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Word.
// This includes values selected through modifiers, order, etc.
func (_m *Word) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryDeck queries the "deck" edge of the Word entity.
func (_m *Word) QueryDeck() *DeckQuery {
	return NewWordClient(_m.config).QueryDeck(_m)
}

// QueryQuestions queries the "questions" edge of the Word entity.
func (_m *Word) QueryQuestions() *QuestionQuery {
	return NewWordClient(_m.config).QueryQuestions(_m)
}

// QueryPronunciationAttempts queries the "pronunciation_attempts" edge of the Word entity.
func (_m *Word) QueryPronunciationAttempts() *PronunciationAttemptQuery {
	return NewWordClient(_m.config).QueryPronunciationAttempts(_m)
}

// Update returns a builder for updating this Word.
// Note that you need to call Word.Unwrap() before calling this method if this Word
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Word) Update() *WordUpdateOne {
	return NewWordClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Word entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Word) Unwrap() *Word {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Word is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Word) String() string {
	var builder strings.Builder
	builder.WriteString("Word(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("french_word=")
	builder.WriteString(_m.FrenchWord)
	builder.WriteString(", ")
	builder.WriteString("english_translation=")
	builder.WriteString(_m.EnglishTranslation)
	builder.WriteString(", ")
	builder.WriteString("part_of_speech=")
	builder.WriteString(_m.PartOfSpeech)
	builder.WriteString(", ")
	builder.WriteString("gender=")
	builder.WriteString(_m.Gender)
	builder.WriteString(", ")
	builder.WriteString("french_example=")
	builder.WriteString(_m.FrenchExample)
	builder.WriteString(", ")
	builder.WriteString("english_example_translation=")
	builder.WriteString(_m.EnglishExampleTranslation)
	builder.WriteString(", ")
	builder.WriteString("phonetic_transcription=")
	builder.WriteString(_m.PhoneticTranscription)
	builder.WriteString(", ")
	builder.WriteString("pronunciation_audio_url=")
	builder.WriteString(_m.PronunciationAudioURL)
	builder.WriteString(", ")
	builder.WriteString("difficulty_level=")
	builder.WriteString(_m.DifficultyLevel)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", _m.Tags))
	builder.WriteString(", ")
	builder.WriteString("usage_context=")
	builder.WriteString(_m.UsageContext)
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsActive))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Words is a parsable slice of Word.
type Words []*Word
