// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"learning-french-service/internal/ent/user"
	"learning-french-service/internal/ent/userstats"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserStats is the model entity for the UserStats schema.
type UserStats struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// StatDate holds the value of the "stat_date" field.
	StatDate time.Time `json:"stat_date,omitempty"`
	// QuestionsAnswered holds the value of the "questions_answered" field.
	QuestionsAnswered int `json:"questions_answered,omitempty"`
	// QuestionsCorrect holds the value of the "questions_correct" field.
	QuestionsCorrect int `json:"questions_correct,omitempty"`
	// Words with all 3 questions at 80%+ accuracy
	WordsLearned int `json:"words_learned,omitempty"`
	// TotalStudyTimeMinutes holds the value of the "total_study_time_minutes" field.
	TotalStudyTimeMinutes int `json:"total_study_time_minutes,omitempty"`
	// StreakDays holds the value of the "streak_days" field.
	StreakDays int `json:"streak_days,omitempty"`
	// EnglishToFrenchAccuracy holds the value of the "english_to_french_accuracy" field.
	EnglishToFrenchAccuracy float64 `json:"english_to_french_accuracy,omitempty"`
	// FrenchToEnglishAccuracy holds the value of the "french_to_english_accuracy" field.
	FrenchToEnglishAccuracy float64 `json:"french_to_english_accuracy,omitempty"`
	// PronunciationAccuracy holds the value of the "pronunciation_accuracy" field.
	PronunciationAccuracy float64 `json:"pronunciation_accuracy,omitempty"`
	// AverageResponseTimeMs holds the value of the "average_response_time_ms" field.
	AverageResponseTimeMs int `json:"average_response_time_ms,omitempty"`
	// WordsPerMinute holds the value of the "words_per_minute" field.
	WordsPerMinute float64 `json:"words_per_minute,omitempty"`
	// AI-identified strengths
	Strengths []string `json:"strengths,omitempty"`
	// AI-identified areas for improvement
	Weaknesses []string `json:"weaknesses,omitempty"`
	// AI-generated study recommendations
	Recommendations string `json:"recommendations,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserStatsQuery when eager-loading is set.
	Edges           UserStatsEdges `json:"edges"`
	user_user_stats *int
	selectValues    sql.SelectValues
}

// UserStatsEdges holds the relations/edges for other nodes in the graph.
type UserStatsEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserStatsEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserStats) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userstats.FieldStrengths, userstats.FieldWeaknesses:
			values[i] = new([]byte)
		case userstats.FieldEnglishToFrenchAccuracy, userstats.FieldFrenchToEnglishAccuracy, userstats.FieldPronunciationAccuracy, userstats.FieldWordsPerMinute:
			values[i] = new(sql.NullFloat64)
		case userstats.FieldID, userstats.FieldQuestionsAnswered, userstats.FieldQuestionsCorrect, userstats.FieldWordsLearned, userstats.FieldTotalStudyTimeMinutes, userstats.FieldStreakDays, userstats.FieldAverageResponseTimeMs:
			values[i] = new(sql.NullInt64)
		case userstats.FieldRecommendations:
			values[i] = new(sql.NullString)
		case userstats.FieldStatDate, userstats.FieldCreatedAt, userstats.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case userstats.ForeignKeys[0]: // user_user_stats
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserStats fields.
func (_m *UserStats) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userstats.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case userstats.FieldStatDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field stat_date", values[i])
			} else if value.Valid {
				_m.StatDate = value.Time
			}
		case userstats.FieldQuestionsAnswered:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field questions_answered", values[i])
			} else if value.Valid {
				_m.QuestionsAnswered = int(value.Int64)
			}
		case userstats.FieldQuestionsCorrect:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field questions_correct", values[i])
			} else if value.Valid {
				_m.QuestionsCorrect = int(value.Int64)
			}
		case userstats.FieldWordsLearned:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field words_learned", values[i])
			} else if value.Valid {
				_m.WordsLearned = int(value.Int64)
			}
		case userstats.FieldTotalStudyTimeMinutes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_study_time_minutes", values[i])
			} else if value.Valid {
				_m.TotalStudyTimeMinutes = int(value.Int64)
			}
		case userstats.FieldStreakDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field streak_days", values[i])
			} else if value.Valid {
				_m.StreakDays = int(value.Int64)
			}
		case userstats.FieldEnglishToFrenchAccuracy:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field english_to_french_accuracy", values[i])
			} else if value.Valid {
				_m.EnglishToFrenchAccuracy = value.Float64
			}
		case userstats.FieldFrenchToEnglishAccuracy:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field french_to_english_accuracy", values[i])
			} else if value.Valid {
				_m.FrenchToEnglishAccuracy = value.Float64
			}
		case userstats.FieldPronunciationAccuracy:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field pronunciation_accuracy", values[i])
			} else if value.Valid {
				_m.PronunciationAccuracy = value.Float64
			}
		case userstats.FieldAverageResponseTimeMs:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field average_response_time_ms", values[i])
			} else if value.Valid {
				_m.AverageResponseTimeMs = int(value.Int64)
			}
		case userstats.FieldWordsPerMinute:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field words_per_minute", values[i])
			} else if value.Valid {
				_m.WordsPerMinute = value.Float64
			}
		case userstats.FieldStrengths:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field strengths", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Strengths); err != nil {
					return fmt.Errorf("unmarshal field strengths: %w", err)
				}
			}
		case userstats.FieldWeaknesses:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field weaknesses", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Weaknesses); err != nil {
					return fmt.Errorf("unmarshal field weaknesses: %w", err)
				}
			}
		case userstats.FieldRecommendations:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field recommendations", values[i])
			} else if value.Valid {
				_m.Recommendations = value.String
			}
		case userstats.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case userstats.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case userstats.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_user_stats", value)
			} else if value.Valid {
				_m.user_user_stats = new(int)
				*_m.user_user_stats = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserStats.
// This includes values selected through modifiers, order, etc.
func (_m *UserStats) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserStats entity.
func (_m *UserStats) QueryUser() *UserQuery {
	return NewUserStatsClient(_m.config).QueryUser(_m)
}

// Update returns a builder for updating this UserStats.
// Note that you need to call UserStats.Unwrap() before calling this method if this UserStats
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *UserStats) Update() *UserStatsUpdateOne {
	return NewUserStatsClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the UserStats entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *UserStats) Unwrap() *UserStats {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserStats is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *UserStats) String() string {
	var builder strings.Builder
	builder.WriteString("UserStats(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("stat_date=")
	builder.WriteString(_m.StatDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("questions_answered=")
	builder.WriteString(fmt.Sprintf("%v", _m.QuestionsAnswered))
	builder.WriteString(", ")
	builder.WriteString("questions_correct=")
	builder.WriteString(fmt.Sprintf("%v", _m.QuestionsCorrect))
	builder.WriteString(", ")
	builder.WriteString("words_learned=")
	builder.WriteString(fmt.Sprintf("%v", _m.WordsLearned))
	builder.WriteString(", ")
	builder.WriteString("total_study_time_minutes=")
	builder.WriteString(fmt.Sprintf("%v", _m.TotalStudyTimeMinutes))
	builder.WriteString(", ")
	builder.WriteString("streak_days=")
	builder.WriteString(fmt.Sprintf("%v", _m.StreakDays))
	builder.WriteString(", ")
	builder.WriteString("english_to_french_accuracy=")
	builder.WriteString(fmt.Sprintf("%v", _m.EnglishToFrenchAccuracy))
	builder.WriteString(", ")
	builder.WriteString("french_to_english_accuracy=")
	builder.WriteString(fmt.Sprintf("%v", _m.FrenchToEnglishAccuracy))
	builder.WriteString(", ")
	builder.WriteString("pronunciation_accuracy=")
	builder.WriteString(fmt.Sprintf("%v", _m.PronunciationAccuracy))
	builder.WriteString(", ")
	builder.WriteString("average_response_time_ms=")
	builder.WriteString(fmt.Sprintf("%v", _m.AverageResponseTimeMs))
	builder.WriteString(", ")
	builder.WriteString("words_per_minute=")
	builder.WriteString(fmt.Sprintf("%v", _m.WordsPerMinute))
	builder.WriteString(", ")
	builder.WriteString("strengths=")
	builder.WriteString(fmt.Sprintf("%v", _m.Strengths))
	builder.WriteString(", ")
	builder.WriteString("weaknesses=")
	builder.WriteString(fmt.Sprintf("%v", _m.Weaknesses))
	builder.WriteString(", ")
	builder.WriteString("recommendations=")
	builder.WriteString(_m.Recommendations)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserStatsSlice is a parsable slice of UserStats.
type UserStatsSlice []*UserStats
