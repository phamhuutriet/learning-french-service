// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"learning-french-service/internal/ent/pronunciationattempt"
	"learning-french-service/internal/ent/question"
	"learning-french-service/internal/ent/questionattempt"
	"learning-french-service/internal/ent/questionreview"
	"learning-french-service/internal/ent/word"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// QuestionCreate is the builder for creating a Question entity.
type QuestionCreate struct {
	config
	mutation *QuestionMutation
	hooks    []Hook
}

// SetQuestionType sets the "question_type" field.
func (_c *QuestionCreate) SetQuestionType(v string) *QuestionCreate {
	_c.mutation.SetQuestionType(v)
	return _c
}

// SetQuestionText sets the "question_text" field.
func (_c *QuestionCreate) SetQuestionText(v string) *QuestionCreate {
	_c.mutation.SetQuestionText(v)
	return _c
}

// SetCorrectAnswer sets the "correct_answer" field.
func (_c *QuestionCreate) SetCorrectAnswer(v string) *QuestionCreate {
	_c.mutation.SetCorrectAnswer(v)
	return _c
}

// SetDifficultyLevel sets the "difficulty_level" field.
func (_c *QuestionCreate) SetDifficultyLevel(v string) *QuestionCreate {
	_c.mutation.SetDifficultyLevel(v)
	return _c
}

// SetNillableDifficultyLevel sets the "difficulty_level" field if the given value is not nil.
func (_c *QuestionCreate) SetNillableDifficultyLevel(v *string) *QuestionCreate {
	if v != nil {
		_c.SetDifficultyLevel(*v)
	}
	return _c
}

// SetGeneratedAt sets the "generated_at" field.
func (_c *QuestionCreate) SetGeneratedAt(v time.Time) *QuestionCreate {
	_c.mutation.SetGeneratedAt(v)
	return _c
}

// SetNillableGeneratedAt sets the "generated_at" field if the given value is not nil.
func (_c *QuestionCreate) SetNillableGeneratedAt(v *time.Time) *QuestionCreate {
	if v != nil {
		_c.SetGeneratedAt(*v)
	}
	return _c
}

// SetIsActive sets the "is_active" field.
func (_c *QuestionCreate) SetIsActive(v bool) *QuestionCreate {
	_c.mutation.SetIsActive(v)
	return _c
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_c *QuestionCreate) SetNillableIsActive(v *bool) *QuestionCreate {
	if v != nil {
		_c.SetIsActive(*v)
	}
	return _c
}

// SetOptions sets the "options" field.
func (_c *QuestionCreate) SetOptions(v []string) *QuestionCreate {
	_c.mutation.SetOptions(v)
	return _c
}

// SetHints sets the "hints" field.
func (_c *QuestionCreate) SetHints(v string) *QuestionCreate {
	_c.mutation.SetHints(v)
	return _c
}

// SetNillableHints sets the "hints" field if the given value is not nil.
func (_c *QuestionCreate) SetNillableHints(v *string) *QuestionCreate {
	if v != nil {
		_c.SetHints(*v)
	}
	return _c
}

// SetWordID sets the "word" edge to the Word entity by ID.
func (_c *QuestionCreate) SetWordID(id int) *QuestionCreate {
	_c.mutation.SetWordID(id)
	return _c
}

// SetWord sets the "word" edge to the Word entity.
func (_c *QuestionCreate) SetWord(v *Word) *QuestionCreate {
	return _c.SetWordID(v.ID)
}

// AddQuestionReviewIDs adds the "question_reviews" edge to the QuestionReview entity by IDs.
func (_c *QuestionCreate) AddQuestionReviewIDs(ids ...int) *QuestionCreate {
	_c.mutation.AddQuestionReviewIDs(ids...)
	return _c
}

// AddQuestionReviews adds the "question_reviews" edges to the QuestionReview entity.
func (_c *QuestionCreate) AddQuestionReviews(v ...*QuestionReview) *QuestionCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddQuestionReviewIDs(ids...)
}

// AddQuestionAttemptIDs adds the "question_attempts" edge to the QuestionAttempt entity by IDs.
func (_c *QuestionCreate) AddQuestionAttemptIDs(ids ...int) *QuestionCreate {
	_c.mutation.AddQuestionAttemptIDs(ids...)
	return _c
}

// AddQuestionAttempts adds the "question_attempts" edges to the QuestionAttempt entity.
func (_c *QuestionCreate) AddQuestionAttempts(v ...*QuestionAttempt) *QuestionCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddQuestionAttemptIDs(ids...)
}

// AddPronunciationAttemptIDs adds the "pronunciation_attempts" edge to the PronunciationAttempt entity by IDs.
func (_c *QuestionCreate) AddPronunciationAttemptIDs(ids ...int) *QuestionCreate {
	_c.mutation.AddPronunciationAttemptIDs(ids...)
	return _c
}

// AddPronunciationAttempts adds the "pronunciation_attempts" edges to the PronunciationAttempt entity.
func (_c *QuestionCreate) AddPronunciationAttempts(v ...*PronunciationAttempt) *QuestionCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddPronunciationAttemptIDs(ids...)
}

// Mutation returns the QuestionMutation object of the builder.
func (_c *QuestionCreate) Mutation() *QuestionMutation {
	return _c.mutation
}

// Save creates the Question in the database.
func (_c *QuestionCreate) Save(ctx context.Context) (*Question, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *QuestionCreate) SaveX(ctx context.Context) *Question {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *QuestionCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *QuestionCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *QuestionCreate) defaults() {
	if _, ok := _c.mutation.GeneratedAt(); !ok {
		v := question.DefaultGeneratedAt()
		_c.mutation.SetGeneratedAt(v)
	}
	if _, ok := _c.mutation.IsActive(); !ok {
		v := question.DefaultIsActive
		_c.mutation.SetIsActive(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *QuestionCreate) check() error {
	if _, ok := _c.mutation.QuestionType(); !ok {
		return &ValidationError{Name: "question_type", err: errors.New(`ent: missing required field "Question.question_type"`)}
	}
	if v, ok := _c.mutation.QuestionType(); ok {
		if err := question.QuestionTypeValidator(v); err != nil {
			return &ValidationError{Name: "question_type", err: fmt.Errorf(`ent: validator failed for field "Question.question_type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.QuestionText(); !ok {
		return &ValidationError{Name: "question_text", err: errors.New(`ent: missing required field "Question.question_text"`)}
	}
	if v, ok := _c.mutation.QuestionText(); ok {
		if err := question.QuestionTextValidator(v); err != nil {
			return &ValidationError{Name: "question_text", err: fmt.Errorf(`ent: validator failed for field "Question.question_text": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CorrectAnswer(); !ok {
		return &ValidationError{Name: "correct_answer", err: errors.New(`ent: missing required field "Question.correct_answer"`)}
	}
	if v, ok := _c.mutation.CorrectAnswer(); ok {
		if err := question.CorrectAnswerValidator(v); err != nil {
			return &ValidationError{Name: "correct_answer", err: fmt.Errorf(`ent: validator failed for field "Question.correct_answer": %w`, err)}
		}
	}
	if v, ok := _c.mutation.DifficultyLevel(); ok {
		if err := question.DifficultyLevelValidator(v); err != nil {
			return &ValidationError{Name: "difficulty_level", err: fmt.Errorf(`ent: validator failed for field "Question.difficulty_level": %w`, err)}
		}
	}
	if _, ok := _c.mutation.GeneratedAt(); !ok {
		return &ValidationError{Name: "generated_at", err: errors.New(`ent: missing required field "Question.generated_at"`)}
	}
	if _, ok := _c.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "Question.is_active"`)}
	}
	if len(_c.mutation.WordIDs()) == 0 {
		return &ValidationError{Name: "word", err: errors.New(`ent: missing required edge "Question.word"`)}
	}
	return nil
}

func (_c *QuestionCreate) sqlSave(ctx context.Context) (*Question, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *QuestionCreate) createSpec() (*Question, *sqlgraph.CreateSpec) {
	var (
		_node = &Question{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(question.Table, sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.QuestionType(); ok {
		_spec.SetField(question.FieldQuestionType, field.TypeString, value)
		_node.QuestionType = value
	}
	if value, ok := _c.mutation.QuestionText(); ok {
		_spec.SetField(question.FieldQuestionText, field.TypeString, value)
		_node.QuestionText = value
	}
	if value, ok := _c.mutation.CorrectAnswer(); ok {
		_spec.SetField(question.FieldCorrectAnswer, field.TypeString, value)
		_node.CorrectAnswer = value
	}
	if value, ok := _c.mutation.DifficultyLevel(); ok {
		_spec.SetField(question.FieldDifficultyLevel, field.TypeString, value)
		_node.DifficultyLevel = value
	}
	if value, ok := _c.mutation.GeneratedAt(); ok {
		_spec.SetField(question.FieldGeneratedAt, field.TypeTime, value)
		_node.GeneratedAt = value
	}
	if value, ok := _c.mutation.IsActive(); ok {
		_spec.SetField(question.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := _c.mutation.Options(); ok {
		_spec.SetField(question.FieldOptions, field.TypeJSON, value)
		_node.Options = value
	}
	if value, ok := _c.mutation.Hints(); ok {
		_spec.SetField(question.FieldHints, field.TypeString, value)
		_node.Hints = value
	}
	if nodes := _c.mutation.WordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.WordTable,
			Columns: []string{question.WordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(word.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.word_questions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.QuestionReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.QuestionReviewsTable,
			Columns: []string{question.QuestionReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionreview.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.QuestionAttemptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.QuestionAttemptsTable,
			Columns: []string{question.QuestionAttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionattempt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.PronunciationAttemptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.PronunciationAttemptsTable,
			Columns: []string{question.PronunciationAttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pronunciationattempt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// QuestionCreateBulk is the builder for creating many Question entities in bulk.
type QuestionCreateBulk struct {
	config
	err      error
	builders []*QuestionCreate
}

// Save creates the Question entities in the database.
func (_c *QuestionCreateBulk) Save(ctx context.Context) ([]*Question, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Question, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*QuestionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *QuestionCreateBulk) SaveX(ctx context.Context) []*Question {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *QuestionCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *QuestionCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
