// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"learning-french-service/internal/ent/deck"
	"learning-french-service/internal/ent/learningstreak"
	"learning-french-service/internal/ent/predicate"
	"learning-french-service/internal/ent/pronunciationattempt"
	"learning-french-service/internal/ent/questionattempt"
	"learning-french-service/internal/ent/questionreview"
	"learning-french-service/internal/ent/user"
	"learning-french-service/internal/ent/userstats"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetEmail sets the "email" field.
func (_u *UserUpdate) SetEmail(v string) *UserUpdate {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *UserUpdate) SetNillableEmail(v *string) *UserUpdate {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// SetPasswordHash sets the "password_hash" field.
func (_u *UserUpdate) SetPasswordHash(v string) *UserUpdate {
	_u.mutation.SetPasswordHash(v)
	return _u
}

// SetNillablePasswordHash sets the "password_hash" field if the given value is not nil.
func (_u *UserUpdate) SetNillablePasswordHash(v *string) *UserUpdate {
	if v != nil {
		_u.SetPasswordHash(*v)
	}
	return _u
}

// SetUsername sets the "username" field.
func (_u *UserUpdate) SetUsername(v string) *UserUpdate {
	_u.mutation.SetUsername(v)
	return _u
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (_u *UserUpdate) SetNillableUsername(v *string) *UserUpdate {
	if v != nil {
		_u.SetUsername(*v)
	}
	return _u
}

// ClearUsername clears the value of the "username" field.
func (_u *UserUpdate) ClearUsername() *UserUpdate {
	_u.mutation.ClearUsername()
	return _u
}

// SetFirstName sets the "first_name" field.
func (_u *UserUpdate) SetFirstName(v string) *UserUpdate {
	_u.mutation.SetFirstName(v)
	return _u
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (_u *UserUpdate) SetNillableFirstName(v *string) *UserUpdate {
	if v != nil {
		_u.SetFirstName(*v)
	}
	return _u
}

// ClearFirstName clears the value of the "first_name" field.
func (_u *UserUpdate) ClearFirstName() *UserUpdate {
	_u.mutation.ClearFirstName()
	return _u
}

// SetLastName sets the "last_name" field.
func (_u *UserUpdate) SetLastName(v string) *UserUpdate {
	_u.mutation.SetLastName(v)
	return _u
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (_u *UserUpdate) SetNillableLastName(v *string) *UserUpdate {
	if v != nil {
		_u.SetLastName(*v)
	}
	return _u
}

// ClearLastName clears the value of the "last_name" field.
func (_u *UserUpdate) ClearLastName() *UserUpdate {
	_u.mutation.ClearLastName()
	return _u
}

// SetCurrentLevel sets the "current_level" field.
func (_u *UserUpdate) SetCurrentLevel(v string) *UserUpdate {
	_u.mutation.SetCurrentLevel(v)
	return _u
}

// SetNillableCurrentLevel sets the "current_level" field if the given value is not nil.
func (_u *UserUpdate) SetNillableCurrentLevel(v *string) *UserUpdate {
	if v != nil {
		_u.SetCurrentLevel(*v)
	}
	return _u
}

// ClearCurrentLevel clears the value of the "current_level" field.
func (_u *UserUpdate) ClearCurrentLevel() *UserUpdate {
	_u.mutation.ClearCurrentLevel()
	return _u
}

// SetTargetLevel sets the "target_level" field.
func (_u *UserUpdate) SetTargetLevel(v string) *UserUpdate {
	_u.mutation.SetTargetLevel(v)
	return _u
}

// SetNillableTargetLevel sets the "target_level" field if the given value is not nil.
func (_u *UserUpdate) SetNillableTargetLevel(v *string) *UserUpdate {
	if v != nil {
		_u.SetTargetLevel(*v)
	}
	return _u
}

// ClearTargetLevel clears the value of the "target_level" field.
func (_u *UserUpdate) ClearTargetLevel() *UserUpdate {
	_u.mutation.ClearTargetLevel()
	return _u
}

// SetDailyGoal sets the "daily_goal" field.
func (_u *UserUpdate) SetDailyGoal(v int) *UserUpdate {
	_u.mutation.ResetDailyGoal()
	_u.mutation.SetDailyGoal(v)
	return _u
}

// SetNillableDailyGoal sets the "daily_goal" field if the given value is not nil.
func (_u *UserUpdate) SetNillableDailyGoal(v *int) *UserUpdate {
	if v != nil {
		_u.SetDailyGoal(*v)
	}
	return _u
}

// AddDailyGoal adds value to the "daily_goal" field.
func (_u *UserUpdate) AddDailyGoal(v int) *UserUpdate {
	_u.mutation.AddDailyGoal(v)
	return _u
}

// SetTimezone sets the "timezone" field.
func (_u *UserUpdate) SetTimezone(v string) *UserUpdate {
	_u.mutation.SetTimezone(v)
	return _u
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (_u *UserUpdate) SetNillableTimezone(v *string) *UserUpdate {
	if v != nil {
		_u.SetTimezone(*v)
	}
	return _u
}

// SetLastActiveAt sets the "last_active_at" field.
func (_u *UserUpdate) SetLastActiveAt(v time.Time) *UserUpdate {
	_u.mutation.SetLastActiveAt(v)
	return _u
}

// SetNillableLastActiveAt sets the "last_active_at" field if the given value is not nil.
func (_u *UserUpdate) SetNillableLastActiveAt(v *time.Time) *UserUpdate {
	if v != nil {
		_u.SetLastActiveAt(*v)
	}
	return _u
}

// ClearLastActiveAt clears the value of the "last_active_at" field.
func (_u *UserUpdate) ClearLastActiveAt() *UserUpdate {
	_u.mutation.ClearLastActiveAt()
	return _u
}

// SetIsActive sets the "is_active" field.
func (_u *UserUpdate) SetIsActive(v bool) *UserUpdate {
	_u.mutation.SetIsActive(v)
	return _u
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_u *UserUpdate) SetNillableIsActive(v *bool) *UserUpdate {
	if v != nil {
		_u.SetIsActive(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *UserUpdate) SetCreatedAt(v time.Time) *UserUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *UserUpdate) SetNillableCreatedAt(v *time.Time) *UserUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UserUpdate) SetUpdatedAt(v time.Time) *UserUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// AddDeckIDs adds the "decks" edge to the Deck entity by IDs.
func (_u *UserUpdate) AddDeckIDs(ids ...int) *UserUpdate {
	_u.mutation.AddDeckIDs(ids...)
	return _u
}

// AddDecks adds the "decks" edges to the Deck entity.
func (_u *UserUpdate) AddDecks(v ...*Deck) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddDeckIDs(ids...)
}

// AddQuestionReviewIDs adds the "question_reviews" edge to the QuestionReview entity by IDs.
func (_u *UserUpdate) AddQuestionReviewIDs(ids ...int) *UserUpdate {
	_u.mutation.AddQuestionReviewIDs(ids...)
	return _u
}

// AddQuestionReviews adds the "question_reviews" edges to the QuestionReview entity.
func (_u *UserUpdate) AddQuestionReviews(v ...*QuestionReview) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddQuestionReviewIDs(ids...)
}

// AddQuestionAttemptIDs adds the "question_attempts" edge to the QuestionAttempt entity by IDs.
func (_u *UserUpdate) AddQuestionAttemptIDs(ids ...int) *UserUpdate {
	_u.mutation.AddQuestionAttemptIDs(ids...)
	return _u
}

// AddQuestionAttempts adds the "question_attempts" edges to the QuestionAttempt entity.
func (_u *UserUpdate) AddQuestionAttempts(v ...*QuestionAttempt) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddQuestionAttemptIDs(ids...)
}

// AddPronunciationAttemptIDs adds the "pronunciation_attempts" edge to the PronunciationAttempt entity by IDs.
func (_u *UserUpdate) AddPronunciationAttemptIDs(ids ...int) *UserUpdate {
	_u.mutation.AddPronunciationAttemptIDs(ids...)
	return _u
}

// AddPronunciationAttempts adds the "pronunciation_attempts" edges to the PronunciationAttempt entity.
func (_u *UserUpdate) AddPronunciationAttempts(v ...*PronunciationAttempt) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPronunciationAttemptIDs(ids...)
}

// AddUserStatIDs adds the "user_stats" edge to the UserStats entity by IDs.
func (_u *UserUpdate) AddUserStatIDs(ids ...int) *UserUpdate {
	_u.mutation.AddUserStatIDs(ids...)
	return _u
}

// AddUserStats adds the "user_stats" edges to the UserStats entity.
func (_u *UserUpdate) AddUserStats(v ...*UserStats) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserStatIDs(ids...)
}

// AddLearningStreakIDs adds the "learning_streaks" edge to the LearningStreak entity by IDs.
func (_u *UserUpdate) AddLearningStreakIDs(ids ...int) *UserUpdate {
	_u.mutation.AddLearningStreakIDs(ids...)
	return _u
}

// AddLearningStreaks adds the "learning_streaks" edges to the LearningStreak entity.
func (_u *UserUpdate) AddLearningStreaks(v ...*LearningStreak) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddLearningStreakIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdate) Mutation() *UserMutation {
	return _u.mutation
}

// ClearDecks clears all "decks" edges to the Deck entity.
func (_u *UserUpdate) ClearDecks() *UserUpdate {
	_u.mutation.ClearDecks()
	return _u
}

// RemoveDeckIDs removes the "decks" edge to Deck entities by IDs.
func (_u *UserUpdate) RemoveDeckIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveDeckIDs(ids...)
	return _u
}

// RemoveDecks removes "decks" edges to Deck entities.
func (_u *UserUpdate) RemoveDecks(v ...*Deck) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveDeckIDs(ids...)
}

// ClearQuestionReviews clears all "question_reviews" edges to the QuestionReview entity.
func (_u *UserUpdate) ClearQuestionReviews() *UserUpdate {
	_u.mutation.ClearQuestionReviews()
	return _u
}

// RemoveQuestionReviewIDs removes the "question_reviews" edge to QuestionReview entities by IDs.
func (_u *UserUpdate) RemoveQuestionReviewIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveQuestionReviewIDs(ids...)
	return _u
}

// RemoveQuestionReviews removes "question_reviews" edges to QuestionReview entities.
func (_u *UserUpdate) RemoveQuestionReviews(v ...*QuestionReview) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveQuestionReviewIDs(ids...)
}

// ClearQuestionAttempts clears all "question_attempts" edges to the QuestionAttempt entity.
func (_u *UserUpdate) ClearQuestionAttempts() *UserUpdate {
	_u.mutation.ClearQuestionAttempts()
	return _u
}

// RemoveQuestionAttemptIDs removes the "question_attempts" edge to QuestionAttempt entities by IDs.
func (_u *UserUpdate) RemoveQuestionAttemptIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveQuestionAttemptIDs(ids...)
	return _u
}

// RemoveQuestionAttempts removes "question_attempts" edges to QuestionAttempt entities.
func (_u *UserUpdate) RemoveQuestionAttempts(v ...*QuestionAttempt) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveQuestionAttemptIDs(ids...)
}

// ClearPronunciationAttempts clears all "pronunciation_attempts" edges to the PronunciationAttempt entity.
func (_u *UserUpdate) ClearPronunciationAttempts() *UserUpdate {
	_u.mutation.ClearPronunciationAttempts()
	return _u
}

// RemovePronunciationAttemptIDs removes the "pronunciation_attempts" edge to PronunciationAttempt entities by IDs.
func (_u *UserUpdate) RemovePronunciationAttemptIDs(ids ...int) *UserUpdate {
	_u.mutation.RemovePronunciationAttemptIDs(ids...)
	return _u
}

// RemovePronunciationAttempts removes "pronunciation_attempts" edges to PronunciationAttempt entities.
func (_u *UserUpdate) RemovePronunciationAttempts(v ...*PronunciationAttempt) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePronunciationAttemptIDs(ids...)
}

// ClearUserStats clears all "user_stats" edges to the UserStats entity.
func (_u *UserUpdate) ClearUserStats() *UserUpdate {
	_u.mutation.ClearUserStats()
	return _u
}

// RemoveUserStatIDs removes the "user_stats" edge to UserStats entities by IDs.
func (_u *UserUpdate) RemoveUserStatIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveUserStatIDs(ids...)
	return _u
}

// RemoveUserStats removes "user_stats" edges to UserStats entities.
func (_u *UserUpdate) RemoveUserStats(v ...*UserStats) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserStatIDs(ids...)
}

// ClearLearningStreaks clears all "learning_streaks" edges to the LearningStreak entity.
func (_u *UserUpdate) ClearLearningStreaks() *UserUpdate {
	_u.mutation.ClearLearningStreaks()
	return _u
}

// RemoveLearningStreakIDs removes the "learning_streaks" edge to LearningStreak entities by IDs.
func (_u *UserUpdate) RemoveLearningStreakIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveLearningStreakIDs(ids...)
	return _u
}

// RemoveLearningStreaks removes "learning_streaks" edges to LearningStreak entities.
func (_u *UserUpdate) RemoveLearningStreaks(v ...*LearningStreak) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveLearningStreakIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *UserUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *UserUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserUpdate) check() error {
	if v, ok := _u.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PasswordHash(); ok {
		if err := user.PasswordHashValidator(v); err != nil {
			return &ValidationError{Name: "password_hash", err: fmt.Errorf(`ent: validator failed for field "User.password_hash": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "User.username": %w`, err)}
		}
	}
	if v, ok := _u.mutation.FirstName(); ok {
		if err := user.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "User.first_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.LastName(); ok {
		if err := user.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "User.last_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CurrentLevel(); ok {
		if err := user.CurrentLevelValidator(v); err != nil {
			return &ValidationError{Name: "current_level", err: fmt.Errorf(`ent: validator failed for field "User.current_level": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TargetLevel(); ok {
		if err := user.TargetLevelValidator(v); err != nil {
			return &ValidationError{Name: "target_level", err: fmt.Errorf(`ent: validator failed for field "User.target_level": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Timezone(); ok {
		if err := user.TimezoneValidator(v); err != nil {
			return &ValidationError{Name: "timezone", err: fmt.Errorf(`ent: validator failed for field "User.timezone": %w`, err)}
		}
	}
	return nil
}

func (_u *UserUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.PasswordHash(); ok {
		_spec.SetField(user.FieldPasswordHash, field.TypeString, value)
	}
	if value, ok := _u.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if _u.mutation.UsernameCleared() {
		_spec.ClearField(user.FieldUsername, field.TypeString)
	}
	if value, ok := _u.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
	}
	if _u.mutation.FirstNameCleared() {
		_spec.ClearField(user.FieldFirstName, field.TypeString)
	}
	if value, ok := _u.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
	}
	if _u.mutation.LastNameCleared() {
		_spec.ClearField(user.FieldLastName, field.TypeString)
	}
	if value, ok := _u.mutation.CurrentLevel(); ok {
		_spec.SetField(user.FieldCurrentLevel, field.TypeString, value)
	}
	if _u.mutation.CurrentLevelCleared() {
		_spec.ClearField(user.FieldCurrentLevel, field.TypeString)
	}
	if value, ok := _u.mutation.TargetLevel(); ok {
		_spec.SetField(user.FieldTargetLevel, field.TypeString, value)
	}
	if _u.mutation.TargetLevelCleared() {
		_spec.ClearField(user.FieldTargetLevel, field.TypeString)
	}
	if value, ok := _u.mutation.DailyGoal(); ok {
		_spec.SetField(user.FieldDailyGoal, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDailyGoal(); ok {
		_spec.AddField(user.FieldDailyGoal, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Timezone(); ok {
		_spec.SetField(user.FieldTimezone, field.TypeString, value)
	}
	if value, ok := _u.mutation.LastActiveAt(); ok {
		_spec.SetField(user.FieldLastActiveAt, field.TypeTime, value)
	}
	if _u.mutation.LastActiveAtCleared() {
		_spec.ClearField(user.FieldLastActiveAt, field.TypeTime)
	}
	if value, ok := _u.mutation.IsActive(); ok {
		_spec.SetField(user.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.DecksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DecksTable,
			Columns: []string{user.DecksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deck.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedDecksIDs(); len(nodes) > 0 && !_u.mutation.DecksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DecksTable,
			Columns: []string{user.DecksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deck.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DecksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DecksTable,
			Columns: []string{user.DecksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deck.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.QuestionReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.QuestionReviewsTable,
			Columns: []string{user.QuestionReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionreview.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedQuestionReviewsIDs(); len(nodes) > 0 && !_u.mutation.QuestionReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.QuestionReviewsTable,
			Columns: []string{user.QuestionReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionreview.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.QuestionReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.QuestionReviewsTable,
			Columns: []string{user.QuestionReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionreview.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.QuestionAttemptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.QuestionAttemptsTable,
			Columns: []string{user.QuestionAttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionattempt.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedQuestionAttemptsIDs(); len(nodes) > 0 && !_u.mutation.QuestionAttemptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.QuestionAttemptsTable,
			Columns: []string{user.QuestionAttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionattempt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.QuestionAttemptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.QuestionAttemptsTable,
			Columns: []string{user.QuestionAttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionattempt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PronunciationAttemptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PronunciationAttemptsTable,
			Columns: []string{user.PronunciationAttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pronunciationattempt.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPronunciationAttemptsIDs(); len(nodes) > 0 && !_u.mutation.PronunciationAttemptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PronunciationAttemptsTable,
			Columns: []string{user.PronunciationAttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pronunciationattempt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PronunciationAttemptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PronunciationAttemptsTable,
			Columns: []string{user.PronunciationAttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pronunciationattempt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserStatsTable,
			Columns: []string{user.UserStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userstats.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUserStatsIDs(); len(nodes) > 0 && !_u.mutation.UserStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserStatsTable,
			Columns: []string{user.UserStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userstats.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserStatsTable,
			Columns: []string{user.UserStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userstats.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.LearningStreaksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LearningStreaksTable,
			Columns: []string{user.LearningStreaksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(learningstreak.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedLearningStreaksIDs(); len(nodes) > 0 && !_u.mutation.LearningStreaksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LearningStreaksTable,
			Columns: []string{user.LearningStreaksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(learningstreak.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.LearningStreaksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LearningStreaksTable,
			Columns: []string{user.LearningStreaksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(learningstreak.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetEmail sets the "email" field.
func (_u *UserUpdateOne) SetEmail(v string) *UserUpdateOne {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableEmail(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// SetPasswordHash sets the "password_hash" field.
func (_u *UserUpdateOne) SetPasswordHash(v string) *UserUpdateOne {
	_u.mutation.SetPasswordHash(v)
	return _u
}

// SetNillablePasswordHash sets the "password_hash" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillablePasswordHash(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetPasswordHash(*v)
	}
	return _u
}

// SetUsername sets the "username" field.
func (_u *UserUpdateOne) SetUsername(v string) *UserUpdateOne {
	_u.mutation.SetUsername(v)
	return _u
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableUsername(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetUsername(*v)
	}
	return _u
}

// ClearUsername clears the value of the "username" field.
func (_u *UserUpdateOne) ClearUsername() *UserUpdateOne {
	_u.mutation.ClearUsername()
	return _u
}

// SetFirstName sets the "first_name" field.
func (_u *UserUpdateOne) SetFirstName(v string) *UserUpdateOne {
	_u.mutation.SetFirstName(v)
	return _u
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableFirstName(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetFirstName(*v)
	}
	return _u
}

// ClearFirstName clears the value of the "first_name" field.
func (_u *UserUpdateOne) ClearFirstName() *UserUpdateOne {
	_u.mutation.ClearFirstName()
	return _u
}

// SetLastName sets the "last_name" field.
func (_u *UserUpdateOne) SetLastName(v string) *UserUpdateOne {
	_u.mutation.SetLastName(v)
	return _u
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableLastName(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetLastName(*v)
	}
	return _u
}

// ClearLastName clears the value of the "last_name" field.
func (_u *UserUpdateOne) ClearLastName() *UserUpdateOne {
	_u.mutation.ClearLastName()
	return _u
}

// SetCurrentLevel sets the "current_level" field.
func (_u *UserUpdateOne) SetCurrentLevel(v string) *UserUpdateOne {
	_u.mutation.SetCurrentLevel(v)
	return _u
}

// SetNillableCurrentLevel sets the "current_level" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableCurrentLevel(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetCurrentLevel(*v)
	}
	return _u
}

// ClearCurrentLevel clears the value of the "current_level" field.
func (_u *UserUpdateOne) ClearCurrentLevel() *UserUpdateOne {
	_u.mutation.ClearCurrentLevel()
	return _u
}

// SetTargetLevel sets the "target_level" field.
func (_u *UserUpdateOne) SetTargetLevel(v string) *UserUpdateOne {
	_u.mutation.SetTargetLevel(v)
	return _u
}

// SetNillableTargetLevel sets the "target_level" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableTargetLevel(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetTargetLevel(*v)
	}
	return _u
}

// ClearTargetLevel clears the value of the "target_level" field.
func (_u *UserUpdateOne) ClearTargetLevel() *UserUpdateOne {
	_u.mutation.ClearTargetLevel()
	return _u
}

// SetDailyGoal sets the "daily_goal" field.
func (_u *UserUpdateOne) SetDailyGoal(v int) *UserUpdateOne {
	_u.mutation.ResetDailyGoal()
	_u.mutation.SetDailyGoal(v)
	return _u
}

// SetNillableDailyGoal sets the "daily_goal" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableDailyGoal(v *int) *UserUpdateOne {
	if v != nil {
		_u.SetDailyGoal(*v)
	}
	return _u
}

// AddDailyGoal adds value to the "daily_goal" field.
func (_u *UserUpdateOne) AddDailyGoal(v int) *UserUpdateOne {
	_u.mutation.AddDailyGoal(v)
	return _u
}

// SetTimezone sets the "timezone" field.
func (_u *UserUpdateOne) SetTimezone(v string) *UserUpdateOne {
	_u.mutation.SetTimezone(v)
	return _u
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableTimezone(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetTimezone(*v)
	}
	return _u
}

// SetLastActiveAt sets the "last_active_at" field.
func (_u *UserUpdateOne) SetLastActiveAt(v time.Time) *UserUpdateOne {
	_u.mutation.SetLastActiveAt(v)
	return _u
}

// SetNillableLastActiveAt sets the "last_active_at" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableLastActiveAt(v *time.Time) *UserUpdateOne {
	if v != nil {
		_u.SetLastActiveAt(*v)
	}
	return _u
}

// ClearLastActiveAt clears the value of the "last_active_at" field.
func (_u *UserUpdateOne) ClearLastActiveAt() *UserUpdateOne {
	_u.mutation.ClearLastActiveAt()
	return _u
}

// SetIsActive sets the "is_active" field.
func (_u *UserUpdateOne) SetIsActive(v bool) *UserUpdateOne {
	_u.mutation.SetIsActive(v)
	return _u
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableIsActive(v *bool) *UserUpdateOne {
	if v != nil {
		_u.SetIsActive(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *UserUpdateOne) SetCreatedAt(v time.Time) *UserUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableCreatedAt(v *time.Time) *UserUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UserUpdateOne) SetUpdatedAt(v time.Time) *UserUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// AddDeckIDs adds the "decks" edge to the Deck entity by IDs.
func (_u *UserUpdateOne) AddDeckIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddDeckIDs(ids...)
	return _u
}

// AddDecks adds the "decks" edges to the Deck entity.
func (_u *UserUpdateOne) AddDecks(v ...*Deck) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddDeckIDs(ids...)
}

// AddQuestionReviewIDs adds the "question_reviews" edge to the QuestionReview entity by IDs.
func (_u *UserUpdateOne) AddQuestionReviewIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddQuestionReviewIDs(ids...)
	return _u
}

// AddQuestionReviews adds the "question_reviews" edges to the QuestionReview entity.
func (_u *UserUpdateOne) AddQuestionReviews(v ...*QuestionReview) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddQuestionReviewIDs(ids...)
}

// AddQuestionAttemptIDs adds the "question_attempts" edge to the QuestionAttempt entity by IDs.
func (_u *UserUpdateOne) AddQuestionAttemptIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddQuestionAttemptIDs(ids...)
	return _u
}

// AddQuestionAttempts adds the "question_attempts" edges to the QuestionAttempt entity.
func (_u *UserUpdateOne) AddQuestionAttempts(v ...*QuestionAttempt) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddQuestionAttemptIDs(ids...)
}

// AddPronunciationAttemptIDs adds the "pronunciation_attempts" edge to the PronunciationAttempt entity by IDs.
func (_u *UserUpdateOne) AddPronunciationAttemptIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddPronunciationAttemptIDs(ids...)
	return _u
}

// AddPronunciationAttempts adds the "pronunciation_attempts" edges to the PronunciationAttempt entity.
func (_u *UserUpdateOne) AddPronunciationAttempts(v ...*PronunciationAttempt) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPronunciationAttemptIDs(ids...)
}

// AddUserStatIDs adds the "user_stats" edge to the UserStats entity by IDs.
func (_u *UserUpdateOne) AddUserStatIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddUserStatIDs(ids...)
	return _u
}

// AddUserStats adds the "user_stats" edges to the UserStats entity.
func (_u *UserUpdateOne) AddUserStats(v ...*UserStats) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserStatIDs(ids...)
}

// AddLearningStreakIDs adds the "learning_streaks" edge to the LearningStreak entity by IDs.
func (_u *UserUpdateOne) AddLearningStreakIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddLearningStreakIDs(ids...)
	return _u
}

// AddLearningStreaks adds the "learning_streaks" edges to the LearningStreak entity.
func (_u *UserUpdateOne) AddLearningStreaks(v ...*LearningStreak) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddLearningStreakIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdateOne) Mutation() *UserMutation {
	return _u.mutation
}

// ClearDecks clears all "decks" edges to the Deck entity.
func (_u *UserUpdateOne) ClearDecks() *UserUpdateOne {
	_u.mutation.ClearDecks()
	return _u
}

// RemoveDeckIDs removes the "decks" edge to Deck entities by IDs.
func (_u *UserUpdateOne) RemoveDeckIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveDeckIDs(ids...)
	return _u
}

// RemoveDecks removes "decks" edges to Deck entities.
func (_u *UserUpdateOne) RemoveDecks(v ...*Deck) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveDeckIDs(ids...)
}

// ClearQuestionReviews clears all "question_reviews" edges to the QuestionReview entity.
func (_u *UserUpdateOne) ClearQuestionReviews() *UserUpdateOne {
	_u.mutation.ClearQuestionReviews()
	return _u
}

// RemoveQuestionReviewIDs removes the "question_reviews" edge to QuestionReview entities by IDs.
func (_u *UserUpdateOne) RemoveQuestionReviewIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveQuestionReviewIDs(ids...)
	return _u
}

// RemoveQuestionReviews removes "question_reviews" edges to QuestionReview entities.
func (_u *UserUpdateOne) RemoveQuestionReviews(v ...*QuestionReview) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveQuestionReviewIDs(ids...)
}

// ClearQuestionAttempts clears all "question_attempts" edges to the QuestionAttempt entity.
func (_u *UserUpdateOne) ClearQuestionAttempts() *UserUpdateOne {
	_u.mutation.ClearQuestionAttempts()
	return _u
}

// RemoveQuestionAttemptIDs removes the "question_attempts" edge to QuestionAttempt entities by IDs.
func (_u *UserUpdateOne) RemoveQuestionAttemptIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveQuestionAttemptIDs(ids...)
	return _u
}

// RemoveQuestionAttempts removes "question_attempts" edges to QuestionAttempt entities.
func (_u *UserUpdateOne) RemoveQuestionAttempts(v ...*QuestionAttempt) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveQuestionAttemptIDs(ids...)
}

// ClearPronunciationAttempts clears all "pronunciation_attempts" edges to the PronunciationAttempt entity.
func (_u *UserUpdateOne) ClearPronunciationAttempts() *UserUpdateOne {
	_u.mutation.ClearPronunciationAttempts()
	return _u
}

// RemovePronunciationAttemptIDs removes the "pronunciation_attempts" edge to PronunciationAttempt entities by IDs.
func (_u *UserUpdateOne) RemovePronunciationAttemptIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemovePronunciationAttemptIDs(ids...)
	return _u
}

// RemovePronunciationAttempts removes "pronunciation_attempts" edges to PronunciationAttempt entities.
func (_u *UserUpdateOne) RemovePronunciationAttempts(v ...*PronunciationAttempt) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePronunciationAttemptIDs(ids...)
}

// ClearUserStats clears all "user_stats" edges to the UserStats entity.
func (_u *UserUpdateOne) ClearUserStats() *UserUpdateOne {
	_u.mutation.ClearUserStats()
	return _u
}

// RemoveUserStatIDs removes the "user_stats" edge to UserStats entities by IDs.
func (_u *UserUpdateOne) RemoveUserStatIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveUserStatIDs(ids...)
	return _u
}

// RemoveUserStats removes "user_stats" edges to UserStats entities.
func (_u *UserUpdateOne) RemoveUserStats(v ...*UserStats) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserStatIDs(ids...)
}

// ClearLearningStreaks clears all "learning_streaks" edges to the LearningStreak entity.
func (_u *UserUpdateOne) ClearLearningStreaks() *UserUpdateOne {
	_u.mutation.ClearLearningStreaks()
	return _u
}

// RemoveLearningStreakIDs removes the "learning_streaks" edge to LearningStreak entities by IDs.
func (_u *UserUpdateOne) RemoveLearningStreakIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveLearningStreakIDs(ids...)
	return _u
}

// RemoveLearningStreaks removes "learning_streaks" edges to LearningStreak entities.
func (_u *UserUpdateOne) RemoveLearningStreaks(v ...*LearningStreak) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveLearningStreakIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated User entity.
func (_u *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserUpdateOne) check() error {
	if v, ok := _u.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PasswordHash(); ok {
		if err := user.PasswordHashValidator(v); err != nil {
			return &ValidationError{Name: "password_hash", err: fmt.Errorf(`ent: validator failed for field "User.password_hash": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "User.username": %w`, err)}
		}
	}
	if v, ok := _u.mutation.FirstName(); ok {
		if err := user.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "User.first_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.LastName(); ok {
		if err := user.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "User.last_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CurrentLevel(); ok {
		if err := user.CurrentLevelValidator(v); err != nil {
			return &ValidationError{Name: "current_level", err: fmt.Errorf(`ent: validator failed for field "User.current_level": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TargetLevel(); ok {
		if err := user.TargetLevelValidator(v); err != nil {
			return &ValidationError{Name: "target_level", err: fmt.Errorf(`ent: validator failed for field "User.target_level": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Timezone(); ok {
		if err := user.TimezoneValidator(v); err != nil {
			return &ValidationError{Name: "timezone", err: fmt.Errorf(`ent: validator failed for field "User.timezone": %w`, err)}
		}
	}
	return nil
}

func (_u *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.PasswordHash(); ok {
		_spec.SetField(user.FieldPasswordHash, field.TypeString, value)
	}
	if value, ok := _u.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if _u.mutation.UsernameCleared() {
		_spec.ClearField(user.FieldUsername, field.TypeString)
	}
	if value, ok := _u.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
	}
	if _u.mutation.FirstNameCleared() {
		_spec.ClearField(user.FieldFirstName, field.TypeString)
	}
	if value, ok := _u.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
	}
	if _u.mutation.LastNameCleared() {
		_spec.ClearField(user.FieldLastName, field.TypeString)
	}
	if value, ok := _u.mutation.CurrentLevel(); ok {
		_spec.SetField(user.FieldCurrentLevel, field.TypeString, value)
	}
	if _u.mutation.CurrentLevelCleared() {
		_spec.ClearField(user.FieldCurrentLevel, field.TypeString)
	}
	if value, ok := _u.mutation.TargetLevel(); ok {
		_spec.SetField(user.FieldTargetLevel, field.TypeString, value)
	}
	if _u.mutation.TargetLevelCleared() {
		_spec.ClearField(user.FieldTargetLevel, field.TypeString)
	}
	if value, ok := _u.mutation.DailyGoal(); ok {
		_spec.SetField(user.FieldDailyGoal, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDailyGoal(); ok {
		_spec.AddField(user.FieldDailyGoal, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Timezone(); ok {
		_spec.SetField(user.FieldTimezone, field.TypeString, value)
	}
	if value, ok := _u.mutation.LastActiveAt(); ok {
		_spec.SetField(user.FieldLastActiveAt, field.TypeTime, value)
	}
	if _u.mutation.LastActiveAtCleared() {
		_spec.ClearField(user.FieldLastActiveAt, field.TypeTime)
	}
	if value, ok := _u.mutation.IsActive(); ok {
		_spec.SetField(user.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.DecksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DecksTable,
			Columns: []string{user.DecksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deck.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedDecksIDs(); len(nodes) > 0 && !_u.mutation.DecksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DecksTable,
			Columns: []string{user.DecksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deck.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DecksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DecksTable,
			Columns: []string{user.DecksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deck.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.QuestionReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.QuestionReviewsTable,
			Columns: []string{user.QuestionReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionreview.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedQuestionReviewsIDs(); len(nodes) > 0 && !_u.mutation.QuestionReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.QuestionReviewsTable,
			Columns: []string{user.QuestionReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionreview.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.QuestionReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.QuestionReviewsTable,
			Columns: []string{user.QuestionReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionreview.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.QuestionAttemptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.QuestionAttemptsTable,
			Columns: []string{user.QuestionAttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionattempt.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedQuestionAttemptsIDs(); len(nodes) > 0 && !_u.mutation.QuestionAttemptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.QuestionAttemptsTable,
			Columns: []string{user.QuestionAttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionattempt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.QuestionAttemptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.QuestionAttemptsTable,
			Columns: []string{user.QuestionAttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionattempt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PronunciationAttemptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PronunciationAttemptsTable,
			Columns: []string{user.PronunciationAttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pronunciationattempt.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPronunciationAttemptsIDs(); len(nodes) > 0 && !_u.mutation.PronunciationAttemptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PronunciationAttemptsTable,
			Columns: []string{user.PronunciationAttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pronunciationattempt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PronunciationAttemptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PronunciationAttemptsTable,
			Columns: []string{user.PronunciationAttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pronunciationattempt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserStatsTable,
			Columns: []string{user.UserStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userstats.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUserStatsIDs(); len(nodes) > 0 && !_u.mutation.UserStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserStatsTable,
			Columns: []string{user.UserStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userstats.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserStatsTable,
			Columns: []string{user.UserStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userstats.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.LearningStreaksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LearningStreaksTable,
			Columns: []string{user.LearningStreaksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(learningstreak.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedLearningStreaksIDs(); len(nodes) > 0 && !_u.mutation.LearningStreaksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LearningStreaksTable,
			Columns: []string{user.LearningStreaksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(learningstreak.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.LearningStreaksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LearningStreaksTable,
			Columns: []string{user.LearningStreaksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(learningstreak.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
