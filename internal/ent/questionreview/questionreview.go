// Code generated by ent, DO NOT EDIT.

package questionreview

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the questionreview type in the database.
	Label = "question_review"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEaseFactor holds the string denoting the ease_factor field in the database.
	FieldEaseFactor = "ease_factor"
	// FieldIntervalDays holds the string denoting the interval_days field in the database.
	FieldIntervalDays = "interval_days"
	// FieldRepetitionCount holds the string denoting the repetition_count field in the database.
	FieldRepetitionCount = "repetition_count"
	// FieldNextReviewDate holds the string denoting the next_review_date field in the database.
	FieldNextReviewDate = "next_review_date"
	// FieldLastReviewedAt holds the string denoting the last_reviewed_at field in the database.
	FieldLastReviewedAt = "last_reviewed_at"
	// FieldIsDue holds the string denoting the is_due field in the database.
	FieldIsDue = "is_due"
	// FieldTotalAttempts holds the string denoting the total_attempts field in the database.
	FieldTotalAttempts = "total_attempts"
	// FieldCorrectAttempts holds the string denoting the correct_attempts field in the database.
	FieldCorrectAttempts = "correct_attempts"
	// FieldAccuracyRate holds the string denoting the accuracy_rate field in the database.
	FieldAccuracyRate = "accuracy_rate"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeQuestion holds the string denoting the question edge name in mutations.
	EdgeQuestion = "question"
	// EdgeQuestionAttempts holds the string denoting the question_attempts edge name in mutations.
	EdgeQuestionAttempts = "question_attempts"
	// Table holds the table name of the questionreview in the database.
	Table = "question_reviews"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "question_reviews"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_question_reviews"
	// QuestionTable is the table that holds the question relation/edge.
	QuestionTable = "question_reviews"
	// QuestionInverseTable is the table name for the Question entity.
	// It exists in this package in order to avoid circular dependency with the "question" package.
	QuestionInverseTable = "questions"
	// QuestionColumn is the table column denoting the question relation/edge.
	QuestionColumn = "question_question_reviews"
	// QuestionAttemptsTable is the table that holds the question_attempts relation/edge.
	QuestionAttemptsTable = "question_attempts"
	// QuestionAttemptsInverseTable is the table name for the QuestionAttempt entity.
	// It exists in this package in order to avoid circular dependency with the "questionattempt" package.
	QuestionAttemptsInverseTable = "question_attempts"
	// QuestionAttemptsColumn is the table column denoting the question_attempts relation/edge.
	QuestionAttemptsColumn = "question_review_question_attempts"
)

// Columns holds all SQL columns for questionreview fields.
var Columns = []string{
	FieldID,
	FieldEaseFactor,
	FieldIntervalDays,
	FieldRepetitionCount,
	FieldNextReviewDate,
	FieldLastReviewedAt,
	FieldIsDue,
	FieldTotalAttempts,
	FieldCorrectAttempts,
	FieldAccuracyRate,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "question_reviews"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"question_question_reviews",
	"user_question_reviews",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultEaseFactor holds the default value on creation for the "ease_factor" field.
	DefaultEaseFactor float64
	// DefaultIntervalDays holds the default value on creation for the "interval_days" field.
	DefaultIntervalDays int
	// DefaultRepetitionCount holds the default value on creation for the "repetition_count" field.
	DefaultRepetitionCount int
	// DefaultNextReviewDate holds the default value on creation for the "next_review_date" field.
	DefaultNextReviewDate func() time.Time
	// DefaultIsDue holds the default value on creation for the "is_due" field.
	DefaultIsDue bool
	// DefaultTotalAttempts holds the default value on creation for the "total_attempts" field.
	DefaultTotalAttempts int
	// DefaultCorrectAttempts holds the default value on creation for the "correct_attempts" field.
	DefaultCorrectAttempts int
	// DefaultAccuracyRate holds the default value on creation for the "accuracy_rate" field.
	DefaultAccuracyRate float64
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the QuestionReview queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEaseFactor orders the results by the ease_factor field.
func ByEaseFactor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEaseFactor, opts...).ToFunc()
}

// ByIntervalDays orders the results by the interval_days field.
func ByIntervalDays(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIntervalDays, opts...).ToFunc()
}

// ByRepetitionCount orders the results by the repetition_count field.
func ByRepetitionCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRepetitionCount, opts...).ToFunc()
}

// ByNextReviewDate orders the results by the next_review_date field.
func ByNextReviewDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNextReviewDate, opts...).ToFunc()
}

// ByLastReviewedAt orders the results by the last_reviewed_at field.
func ByLastReviewedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastReviewedAt, opts...).ToFunc()
}

// ByIsDue orders the results by the is_due field.
func ByIsDue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDue, opts...).ToFunc()
}

// ByTotalAttempts orders the results by the total_attempts field.
func ByTotalAttempts(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalAttempts, opts...).ToFunc()
}

// ByCorrectAttempts orders the results by the correct_attempts field.
func ByCorrectAttempts(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCorrectAttempts, opts...).ToFunc()
}

// ByAccuracyRate orders the results by the accuracy_rate field.
func ByAccuracyRate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccuracyRate, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByQuestionField orders the results by question field.
func ByQuestionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newQuestionStep(), sql.OrderByField(field, opts...))
	}
}

// ByQuestionAttemptsCount orders the results by question_attempts count.
func ByQuestionAttemptsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newQuestionAttemptsStep(), opts...)
	}
}

// ByQuestionAttempts orders the results by question_attempts terms.
func ByQuestionAttempts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newQuestionAttemptsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newQuestionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(QuestionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, QuestionTable, QuestionColumn),
	)
}
func newQuestionAttemptsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(QuestionAttemptsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, QuestionAttemptsTable, QuestionAttemptsColumn),
	)
}
