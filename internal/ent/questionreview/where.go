// Code generated by ent, DO NOT EDIT.

package questionreview

import (
	"learning-french-service/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldLTE(FieldID, id))
}

// EaseFactor applies equality check predicate on the "ease_factor" field. It's identical to EaseFactorEQ.
func EaseFactor(v float64) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldEQ(FieldEaseFactor, v))
}

// IntervalDays applies equality check predicate on the "interval_days" field. It's identical to IntervalDaysEQ.
func IntervalDays(v int) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldEQ(FieldIntervalDays, v))
}

// RepetitionCount applies equality check predicate on the "repetition_count" field. It's identical to RepetitionCountEQ.
func RepetitionCount(v int) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldEQ(FieldRepetitionCount, v))
}

// NextReviewDate applies equality check predicate on the "next_review_date" field. It's identical to NextReviewDateEQ.
func NextReviewDate(v time.Time) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldEQ(FieldNextReviewDate, v))
}

// LastReviewedAt applies equality check predicate on the "last_reviewed_at" field. It's identical to LastReviewedAtEQ.
func LastReviewedAt(v time.Time) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldEQ(FieldLastReviewedAt, v))
}

// IsDue applies equality check predicate on the "is_due" field. It's identical to IsDueEQ.
func IsDue(v bool) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldEQ(FieldIsDue, v))
}

// TotalAttempts applies equality check predicate on the "total_attempts" field. It's identical to TotalAttemptsEQ.
func TotalAttempts(v int) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldEQ(FieldTotalAttempts, v))
}

// CorrectAttempts applies equality check predicate on the "correct_attempts" field. It's identical to CorrectAttemptsEQ.
func CorrectAttempts(v int) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldEQ(FieldCorrectAttempts, v))
}

// AccuracyRate applies equality check predicate on the "accuracy_rate" field. It's identical to AccuracyRateEQ.
func AccuracyRate(v float64) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldEQ(FieldAccuracyRate, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldEQ(FieldUpdatedAt, v))
}

// EaseFactorEQ applies the EQ predicate on the "ease_factor" field.
func EaseFactorEQ(v float64) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldEQ(FieldEaseFactor, v))
}

// EaseFactorNEQ applies the NEQ predicate on the "ease_factor" field.
func EaseFactorNEQ(v float64) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldNEQ(FieldEaseFactor, v))
}

// EaseFactorIn applies the In predicate on the "ease_factor" field.
func EaseFactorIn(vs ...float64) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldIn(FieldEaseFactor, vs...))
}

// EaseFactorNotIn applies the NotIn predicate on the "ease_factor" field.
func EaseFactorNotIn(vs ...float64) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldNotIn(FieldEaseFactor, vs...))
}

// EaseFactorGT applies the GT predicate on the "ease_factor" field.
func EaseFactorGT(v float64) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldGT(FieldEaseFactor, v))
}

// EaseFactorGTE applies the GTE predicate on the "ease_factor" field.
func EaseFactorGTE(v float64) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldGTE(FieldEaseFactor, v))
}

// EaseFactorLT applies the LT predicate on the "ease_factor" field.
func EaseFactorLT(v float64) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldLT(FieldEaseFactor, v))
}

// EaseFactorLTE applies the LTE predicate on the "ease_factor" field.
func EaseFactorLTE(v float64) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldLTE(FieldEaseFactor, v))
}

// IntervalDaysEQ applies the EQ predicate on the "interval_days" field.
func IntervalDaysEQ(v int) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldEQ(FieldIntervalDays, v))
}

// IntervalDaysNEQ applies the NEQ predicate on the "interval_days" field.
func IntervalDaysNEQ(v int) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldNEQ(FieldIntervalDays, v))
}

// IntervalDaysIn applies the In predicate on the "interval_days" field.
func IntervalDaysIn(vs ...int) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldIn(FieldIntervalDays, vs...))
}

// IntervalDaysNotIn applies the NotIn predicate on the "interval_days" field.
func IntervalDaysNotIn(vs ...int) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldNotIn(FieldIntervalDays, vs...))
}

// IntervalDaysGT applies the GT predicate on the "interval_days" field.
func IntervalDaysGT(v int) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldGT(FieldIntervalDays, v))
}

// IntervalDaysGTE applies the GTE predicate on the "interval_days" field.
func IntervalDaysGTE(v int) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldGTE(FieldIntervalDays, v))
}

// IntervalDaysLT applies the LT predicate on the "interval_days" field.
func IntervalDaysLT(v int) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldLT(FieldIntervalDays, v))
}

// IntervalDaysLTE applies the LTE predicate on the "interval_days" field.
func IntervalDaysLTE(v int) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldLTE(FieldIntervalDays, v))
}

// RepetitionCountEQ applies the EQ predicate on the "repetition_count" field.
func RepetitionCountEQ(v int) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldEQ(FieldRepetitionCount, v))
}

// RepetitionCountNEQ applies the NEQ predicate on the "repetition_count" field.
func RepetitionCountNEQ(v int) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldNEQ(FieldRepetitionCount, v))
}

// RepetitionCountIn applies the In predicate on the "repetition_count" field.
func RepetitionCountIn(vs ...int) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldIn(FieldRepetitionCount, vs...))
}

// RepetitionCountNotIn applies the NotIn predicate on the "repetition_count" field.
func RepetitionCountNotIn(vs ...int) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldNotIn(FieldRepetitionCount, vs...))
}

// RepetitionCountGT applies the GT predicate on the "repetition_count" field.
func RepetitionCountGT(v int) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldGT(FieldRepetitionCount, v))
}

// RepetitionCountGTE applies the GTE predicate on the "repetition_count" field.
func RepetitionCountGTE(v int) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldGTE(FieldRepetitionCount, v))
}

// RepetitionCountLT applies the LT predicate on the "repetition_count" field.
func RepetitionCountLT(v int) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldLT(FieldRepetitionCount, v))
}

// RepetitionCountLTE applies the LTE predicate on the "repetition_count" field.
func RepetitionCountLTE(v int) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldLTE(FieldRepetitionCount, v))
}

// NextReviewDateEQ applies the EQ predicate on the "next_review_date" field.
func NextReviewDateEQ(v time.Time) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldEQ(FieldNextReviewDate, v))
}

// NextReviewDateNEQ applies the NEQ predicate on the "next_review_date" field.
func NextReviewDateNEQ(v time.Time) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldNEQ(FieldNextReviewDate, v))
}

// NextReviewDateIn applies the In predicate on the "next_review_date" field.
func NextReviewDateIn(vs ...time.Time) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldIn(FieldNextReviewDate, vs...))
}

// NextReviewDateNotIn applies the NotIn predicate on the "next_review_date" field.
func NextReviewDateNotIn(vs ...time.Time) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldNotIn(FieldNextReviewDate, vs...))
}

// NextReviewDateGT applies the GT predicate on the "next_review_date" field.
func NextReviewDateGT(v time.Time) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldGT(FieldNextReviewDate, v))
}

// NextReviewDateGTE applies the GTE predicate on the "next_review_date" field.
func NextReviewDateGTE(v time.Time) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldGTE(FieldNextReviewDate, v))
}

// NextReviewDateLT applies the LT predicate on the "next_review_date" field.
func NextReviewDateLT(v time.Time) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldLT(FieldNextReviewDate, v))
}

// NextReviewDateLTE applies the LTE predicate on the "next_review_date" field.
func NextReviewDateLTE(v time.Time) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldLTE(FieldNextReviewDate, v))
}

// LastReviewedAtEQ applies the EQ predicate on the "last_reviewed_at" field.
func LastReviewedAtEQ(v time.Time) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldEQ(FieldLastReviewedAt, v))
}

// LastReviewedAtNEQ applies the NEQ predicate on the "last_reviewed_at" field.
func LastReviewedAtNEQ(v time.Time) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldNEQ(FieldLastReviewedAt, v))
}

// LastReviewedAtIn applies the In predicate on the "last_reviewed_at" field.
func LastReviewedAtIn(vs ...time.Time) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldIn(FieldLastReviewedAt, vs...))
}

// LastReviewedAtNotIn applies the NotIn predicate on the "last_reviewed_at" field.
func LastReviewedAtNotIn(vs ...time.Time) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldNotIn(FieldLastReviewedAt, vs...))
}

// LastReviewedAtGT applies the GT predicate on the "last_reviewed_at" field.
func LastReviewedAtGT(v time.Time) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldGT(FieldLastReviewedAt, v))
}

// LastReviewedAtGTE applies the GTE predicate on the "last_reviewed_at" field.
func LastReviewedAtGTE(v time.Time) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldGTE(FieldLastReviewedAt, v))
}

// LastReviewedAtLT applies the LT predicate on the "last_reviewed_at" field.
func LastReviewedAtLT(v time.Time) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldLT(FieldLastReviewedAt, v))
}

// LastReviewedAtLTE applies the LTE predicate on the "last_reviewed_at" field.
func LastReviewedAtLTE(v time.Time) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldLTE(FieldLastReviewedAt, v))
}

// LastReviewedAtIsNil applies the IsNil predicate on the "last_reviewed_at" field.
func LastReviewedAtIsNil() predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldIsNull(FieldLastReviewedAt))
}

// LastReviewedAtNotNil applies the NotNil predicate on the "last_reviewed_at" field.
func LastReviewedAtNotNil() predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldNotNull(FieldLastReviewedAt))
}

// IsDueEQ applies the EQ predicate on the "is_due" field.
func IsDueEQ(v bool) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldEQ(FieldIsDue, v))
}

// IsDueNEQ applies the NEQ predicate on the "is_due" field.
func IsDueNEQ(v bool) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldNEQ(FieldIsDue, v))
}

// TotalAttemptsEQ applies the EQ predicate on the "total_attempts" field.
func TotalAttemptsEQ(v int) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldEQ(FieldTotalAttempts, v))
}

// TotalAttemptsNEQ applies the NEQ predicate on the "total_attempts" field.
func TotalAttemptsNEQ(v int) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldNEQ(FieldTotalAttempts, v))
}

// TotalAttemptsIn applies the In predicate on the "total_attempts" field.
func TotalAttemptsIn(vs ...int) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldIn(FieldTotalAttempts, vs...))
}

// TotalAttemptsNotIn applies the NotIn predicate on the "total_attempts" field.
func TotalAttemptsNotIn(vs ...int) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldNotIn(FieldTotalAttempts, vs...))
}

// TotalAttemptsGT applies the GT predicate on the "total_attempts" field.
func TotalAttemptsGT(v int) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldGT(FieldTotalAttempts, v))
}

// TotalAttemptsGTE applies the GTE predicate on the "total_attempts" field.
func TotalAttemptsGTE(v int) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldGTE(FieldTotalAttempts, v))
}

// TotalAttemptsLT applies the LT predicate on the "total_attempts" field.
func TotalAttemptsLT(v int) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldLT(FieldTotalAttempts, v))
}

// TotalAttemptsLTE applies the LTE predicate on the "total_attempts" field.
func TotalAttemptsLTE(v int) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldLTE(FieldTotalAttempts, v))
}

// CorrectAttemptsEQ applies the EQ predicate on the "correct_attempts" field.
func CorrectAttemptsEQ(v int) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldEQ(FieldCorrectAttempts, v))
}

// CorrectAttemptsNEQ applies the NEQ predicate on the "correct_attempts" field.
func CorrectAttemptsNEQ(v int) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldNEQ(FieldCorrectAttempts, v))
}

// CorrectAttemptsIn applies the In predicate on the "correct_attempts" field.
func CorrectAttemptsIn(vs ...int) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldIn(FieldCorrectAttempts, vs...))
}

// CorrectAttemptsNotIn applies the NotIn predicate on the "correct_attempts" field.
func CorrectAttemptsNotIn(vs ...int) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldNotIn(FieldCorrectAttempts, vs...))
}

// CorrectAttemptsGT applies the GT predicate on the "correct_attempts" field.
func CorrectAttemptsGT(v int) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldGT(FieldCorrectAttempts, v))
}

// CorrectAttemptsGTE applies the GTE predicate on the "correct_attempts" field.
func CorrectAttemptsGTE(v int) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldGTE(FieldCorrectAttempts, v))
}

// CorrectAttemptsLT applies the LT predicate on the "correct_attempts" field.
func CorrectAttemptsLT(v int) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldLT(FieldCorrectAttempts, v))
}

// CorrectAttemptsLTE applies the LTE predicate on the "correct_attempts" field.
func CorrectAttemptsLTE(v int) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldLTE(FieldCorrectAttempts, v))
}

// AccuracyRateEQ applies the EQ predicate on the "accuracy_rate" field.
func AccuracyRateEQ(v float64) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldEQ(FieldAccuracyRate, v))
}

// AccuracyRateNEQ applies the NEQ predicate on the "accuracy_rate" field.
func AccuracyRateNEQ(v float64) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldNEQ(FieldAccuracyRate, v))
}

// AccuracyRateIn applies the In predicate on the "accuracy_rate" field.
func AccuracyRateIn(vs ...float64) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldIn(FieldAccuracyRate, vs...))
}

// AccuracyRateNotIn applies the NotIn predicate on the "accuracy_rate" field.
func AccuracyRateNotIn(vs ...float64) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldNotIn(FieldAccuracyRate, vs...))
}

// AccuracyRateGT applies the GT predicate on the "accuracy_rate" field.
func AccuracyRateGT(v float64) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldGT(FieldAccuracyRate, v))
}

// AccuracyRateGTE applies the GTE predicate on the "accuracy_rate" field.
func AccuracyRateGTE(v float64) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldGTE(FieldAccuracyRate, v))
}

// AccuracyRateLT applies the LT predicate on the "accuracy_rate" field.
func AccuracyRateLT(v float64) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldLT(FieldAccuracyRate, v))
}

// AccuracyRateLTE applies the LTE predicate on the "accuracy_rate" field.
func AccuracyRateLTE(v float64) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldLTE(FieldAccuracyRate, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.QuestionReview {
	return predicate.QuestionReview(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.QuestionReview {
	return predicate.QuestionReview(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.QuestionReview {
	return predicate.QuestionReview(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasQuestion applies the HasEdge predicate on the "question" edge.
func HasQuestion() predicate.QuestionReview {
	return predicate.QuestionReview(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, QuestionTable, QuestionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQuestionWith applies the HasEdge predicate on the "question" edge with a given conditions (other predicates).
func HasQuestionWith(preds ...predicate.Question) predicate.QuestionReview {
	return predicate.QuestionReview(func(s *sql.Selector) {
		step := newQuestionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasQuestionAttempts applies the HasEdge predicate on the "question_attempts" edge.
func HasQuestionAttempts() predicate.QuestionReview {
	return predicate.QuestionReview(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, QuestionAttemptsTable, QuestionAttemptsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQuestionAttemptsWith applies the HasEdge predicate on the "question_attempts" edge with a given conditions (other predicates).
func HasQuestionAttemptsWith(preds ...predicate.QuestionAttempt) predicate.QuestionReview {
	return predicate.QuestionReview(func(s *sql.Selector) {
		step := newQuestionAttemptsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.QuestionReview) predicate.QuestionReview {
	return predicate.QuestionReview(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.QuestionReview) predicate.QuestionReview {
	return predicate.QuestionReview(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.QuestionReview) predicate.QuestionReview {
	return predicate.QuestionReview(sql.NotPredicates(p))
}
