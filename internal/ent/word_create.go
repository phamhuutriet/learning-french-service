// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"learning-french-service/internal/ent/deck"
	"learning-french-service/internal/ent/pronunciationattempt"
	"learning-french-service/internal/ent/question"
	"learning-french-service/internal/ent/word"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WordCreate is the builder for creating a Word entity.
type WordCreate struct {
	config
	mutation *WordMutation
	hooks    []Hook
}

// SetFrenchWord sets the "french_word" field.
func (_c *WordCreate) SetFrenchWord(v string) *WordCreate {
	_c.mutation.SetFrenchWord(v)
	return _c
}

// SetEnglishTranslation sets the "english_translation" field.
func (_c *WordCreate) SetEnglishTranslation(v string) *WordCreate {
	_c.mutation.SetEnglishTranslation(v)
	return _c
}

// SetPartOfSpeech sets the "part_of_speech" field.
func (_c *WordCreate) SetPartOfSpeech(v string) *WordCreate {
	_c.mutation.SetPartOfSpeech(v)
	return _c
}

// SetNillablePartOfSpeech sets the "part_of_speech" field if the given value is not nil.
func (_c *WordCreate) SetNillablePartOfSpeech(v *string) *WordCreate {
	if v != nil {
		_c.SetPartOfSpeech(*v)
	}
	return _c
}

// SetGender sets the "gender" field.
func (_c *WordCreate) SetGender(v string) *WordCreate {
	_c.mutation.SetGender(v)
	return _c
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (_c *WordCreate) SetNillableGender(v *string) *WordCreate {
	if v != nil {
		_c.SetGender(*v)
	}
	return _c
}

// SetFrenchExample sets the "french_example" field.
func (_c *WordCreate) SetFrenchExample(v string) *WordCreate {
	_c.mutation.SetFrenchExample(v)
	return _c
}

// SetNillableFrenchExample sets the "french_example" field if the given value is not nil.
func (_c *WordCreate) SetNillableFrenchExample(v *string) *WordCreate {
	if v != nil {
		_c.SetFrenchExample(*v)
	}
	return _c
}

// SetEnglishExampleTranslation sets the "english_example_translation" field.
func (_c *WordCreate) SetEnglishExampleTranslation(v string) *WordCreate {
	_c.mutation.SetEnglishExampleTranslation(v)
	return _c
}

// SetNillableEnglishExampleTranslation sets the "english_example_translation" field if the given value is not nil.
func (_c *WordCreate) SetNillableEnglishExampleTranslation(v *string) *WordCreate {
	if v != nil {
		_c.SetEnglishExampleTranslation(*v)
	}
	return _c
}

// SetPhoneticTranscription sets the "phonetic_transcription" field.
func (_c *WordCreate) SetPhoneticTranscription(v string) *WordCreate {
	_c.mutation.SetPhoneticTranscription(v)
	return _c
}

// SetNillablePhoneticTranscription sets the "phonetic_transcription" field if the given value is not nil.
func (_c *WordCreate) SetNillablePhoneticTranscription(v *string) *WordCreate {
	if v != nil {
		_c.SetPhoneticTranscription(*v)
	}
	return _c
}

// SetPronunciationAudioURL sets the "pronunciation_audio_url" field.
func (_c *WordCreate) SetPronunciationAudioURL(v string) *WordCreate {
	_c.mutation.SetPronunciationAudioURL(v)
	return _c
}

// SetNillablePronunciationAudioURL sets the "pronunciation_audio_url" field if the given value is not nil.
func (_c *WordCreate) SetNillablePronunciationAudioURL(v *string) *WordCreate {
	if v != nil {
		_c.SetPronunciationAudioURL(*v)
	}
	return _c
}

// SetDifficultyLevel sets the "difficulty_level" field.
func (_c *WordCreate) SetDifficultyLevel(v string) *WordCreate {
	_c.mutation.SetDifficultyLevel(v)
	return _c
}

// SetNillableDifficultyLevel sets the "difficulty_level" field if the given value is not nil.
func (_c *WordCreate) SetNillableDifficultyLevel(v *string) *WordCreate {
	if v != nil {
		_c.SetDifficultyLevel(*v)
	}
	return _c
}

// SetTags sets the "tags" field.
func (_c *WordCreate) SetTags(v []string) *WordCreate {
	_c.mutation.SetTags(v)
	return _c
}

// SetUsageContext sets the "usage_context" field.
func (_c *WordCreate) SetUsageContext(v string) *WordCreate {
	_c.mutation.SetUsageContext(v)
	return _c
}

// SetNillableUsageContext sets the "usage_context" field if the given value is not nil.
func (_c *WordCreate) SetNillableUsageContext(v *string) *WordCreate {
	if v != nil {
		_c.SetUsageContext(*v)
	}
	return _c
}

// SetIsActive sets the "is_active" field.
func (_c *WordCreate) SetIsActive(v bool) *WordCreate {
	_c.mutation.SetIsActive(v)
	return _c
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_c *WordCreate) SetNillableIsActive(v *bool) *WordCreate {
	if v != nil {
		_c.SetIsActive(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *WordCreate) SetCreatedAt(v time.Time) *WordCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *WordCreate) SetNillableCreatedAt(v *time.Time) *WordCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *WordCreate) SetUpdatedAt(v time.Time) *WordCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *WordCreate) SetNillableUpdatedAt(v *time.Time) *WordCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDeckID sets the "deck" edge to the Deck entity by ID.
func (_c *WordCreate) SetDeckID(id int) *WordCreate {
	_c.mutation.SetDeckID(id)
	return _c
}

// SetDeck sets the "deck" edge to the Deck entity.
func (_c *WordCreate) SetDeck(v *Deck) *WordCreate {
	return _c.SetDeckID(v.ID)
}

// AddQuestionIDs adds the "questions" edge to the Question entity by IDs.
func (_c *WordCreate) AddQuestionIDs(ids ...int) *WordCreate {
	_c.mutation.AddQuestionIDs(ids...)
	return _c
}

// AddQuestions adds the "questions" edges to the Question entity.
func (_c *WordCreate) AddQuestions(v ...*Question) *WordCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddQuestionIDs(ids...)
}

// AddPronunciationAttemptIDs adds the "pronunciation_attempts" edge to the PronunciationAttempt entity by IDs.
func (_c *WordCreate) AddPronunciationAttemptIDs(ids ...int) *WordCreate {
	_c.mutation.AddPronunciationAttemptIDs(ids...)
	return _c
}

// AddPronunciationAttempts adds the "pronunciation_attempts" edges to the PronunciationAttempt entity.
func (_c *WordCreate) AddPronunciationAttempts(v ...*PronunciationAttempt) *WordCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddPronunciationAttemptIDs(ids...)
}

// Mutation returns the WordMutation object of the builder.
func (_c *WordCreate) Mutation() *WordMutation {
	return _c.mutation
}

// Save creates the Word in the database.
func (_c *WordCreate) Save(ctx context.Context) (*Word, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *WordCreate) SaveX(ctx context.Context) *Word {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *WordCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *WordCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *WordCreate) defaults() {
	if _, ok := _c.mutation.IsActive(); !ok {
		v := word.DefaultIsActive
		_c.mutation.SetIsActive(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := word.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := word.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *WordCreate) check() error {
	if _, ok := _c.mutation.FrenchWord(); !ok {
		return &ValidationError{Name: "french_word", err: errors.New(`ent: missing required field "Word.french_word"`)}
	}
	if v, ok := _c.mutation.FrenchWord(); ok {
		if err := word.FrenchWordValidator(v); err != nil {
			return &ValidationError{Name: "french_word", err: fmt.Errorf(`ent: validator failed for field "Word.french_word": %w`, err)}
		}
	}
	if _, ok := _c.mutation.EnglishTranslation(); !ok {
		return &ValidationError{Name: "english_translation", err: errors.New(`ent: missing required field "Word.english_translation"`)}
	}
	if v, ok := _c.mutation.PartOfSpeech(); ok {
		if err := word.PartOfSpeechValidator(v); err != nil {
			return &ValidationError{Name: "part_of_speech", err: fmt.Errorf(`ent: validator failed for field "Word.part_of_speech": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Gender(); ok {
		if err := word.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "Word.gender": %w`, err)}
		}
	}
	if v, ok := _c.mutation.PhoneticTranscription(); ok {
		if err := word.PhoneticTranscriptionValidator(v); err != nil {
			return &ValidationError{Name: "phonetic_transcription", err: fmt.Errorf(`ent: validator failed for field "Word.phonetic_transcription": %w`, err)}
		}
	}
	if v, ok := _c.mutation.PronunciationAudioURL(); ok {
		if err := word.PronunciationAudioURLValidator(v); err != nil {
			return &ValidationError{Name: "pronunciation_audio_url", err: fmt.Errorf(`ent: validator failed for field "Word.pronunciation_audio_url": %w`, err)}
		}
	}
	if v, ok := _c.mutation.DifficultyLevel(); ok {
		if err := word.DifficultyLevelValidator(v); err != nil {
			return &ValidationError{Name: "difficulty_level", err: fmt.Errorf(`ent: validator failed for field "Word.difficulty_level": %w`, err)}
		}
	}
	if _, ok := _c.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "Word.is_active"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Word.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Word.updated_at"`)}
	}
	if len(_c.mutation.DeckIDs()) == 0 {
		return &ValidationError{Name: "deck", err: errors.New(`ent: missing required edge "Word.deck"`)}
	}
	return nil
}

func (_c *WordCreate) sqlSave(ctx context.Context) (*Word, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *WordCreate) createSpec() (*Word, *sqlgraph.CreateSpec) {
	var (
		_node = &Word{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(word.Table, sqlgraph.NewFieldSpec(word.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.FrenchWord(); ok {
		_spec.SetField(word.FieldFrenchWord, field.TypeString, value)
		_node.FrenchWord = value
	}
	if value, ok := _c.mutation.EnglishTranslation(); ok {
		_spec.SetField(word.FieldEnglishTranslation, field.TypeString, value)
		_node.EnglishTranslation = value
	}
	if value, ok := _c.mutation.PartOfSpeech(); ok {
		_spec.SetField(word.FieldPartOfSpeech, field.TypeString, value)
		_node.PartOfSpeech = value
	}
	if value, ok := _c.mutation.Gender(); ok {
		_spec.SetField(word.FieldGender, field.TypeString, value)
		_node.Gender = value
	}
	if value, ok := _c.mutation.FrenchExample(); ok {
		_spec.SetField(word.FieldFrenchExample, field.TypeString, value)
		_node.FrenchExample = value
	}
	if value, ok := _c.mutation.EnglishExampleTranslation(); ok {
		_spec.SetField(word.FieldEnglishExampleTranslation, field.TypeString, value)
		_node.EnglishExampleTranslation = value
	}
	if value, ok := _c.mutation.PhoneticTranscription(); ok {
		_spec.SetField(word.FieldPhoneticTranscription, field.TypeString, value)
		_node.PhoneticTranscription = value
	}
	if value, ok := _c.mutation.PronunciationAudioURL(); ok {
		_spec.SetField(word.FieldPronunciationAudioURL, field.TypeString, value)
		_node.PronunciationAudioURL = value
	}
	if value, ok := _c.mutation.DifficultyLevel(); ok {
		_spec.SetField(word.FieldDifficultyLevel, field.TypeString, value)
		_node.DifficultyLevel = value
	}
	if value, ok := _c.mutation.Tags(); ok {
		_spec.SetField(word.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := _c.mutation.UsageContext(); ok {
		_spec.SetField(word.FieldUsageContext, field.TypeString, value)
		_node.UsageContext = value
	}
	if value, ok := _c.mutation.IsActive(); ok {
		_spec.SetField(word.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(word.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(word.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.DeckIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   word.DeckTable,
			Columns: []string{word.DeckColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deck.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.deck_words = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.QuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   word.QuestionsTable,
			Columns: []string{word.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.PronunciationAttemptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   word.PronunciationAttemptsTable,
			Columns: []string{word.PronunciationAttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pronunciationattempt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WordCreateBulk is the builder for creating many Word entities in bulk.
type WordCreateBulk struct {
	config
	err      error
	builders []*WordCreate
}

// Save creates the Word entities in the database.
func (_c *WordCreateBulk) Save(ctx context.Context) ([]*Word, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Word, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *WordCreateBulk) SaveX(ctx context.Context) []*Word {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *WordCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *WordCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
