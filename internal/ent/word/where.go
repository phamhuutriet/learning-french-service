// Code generated by ent, DO NOT EDIT.

package word

import (
	"learning-french-service/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Word {
	return predicate.Word(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Word {
	return predicate.Word(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Word {
	return predicate.Word(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Word {
	return predicate.Word(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Word {
	return predicate.Word(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Word {
	return predicate.Word(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Word {
	return predicate.Word(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Word {
	return predicate.Word(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Word {
	return predicate.Word(sql.FieldLTE(FieldID, id))
}

// FrenchWord applies equality check predicate on the "french_word" field. It's identical to FrenchWordEQ.
func FrenchWord(v string) predicate.Word {
	return predicate.Word(sql.FieldEQ(FieldFrenchWord, v))
}

// EnglishTranslation applies equality check predicate on the "english_translation" field. It's identical to EnglishTranslationEQ.
func EnglishTranslation(v string) predicate.Word {
	return predicate.Word(sql.FieldEQ(FieldEnglishTranslation, v))
}

// PartOfSpeech applies equality check predicate on the "part_of_speech" field. It's identical to PartOfSpeechEQ.
func PartOfSpeech(v string) predicate.Word {
	return predicate.Word(sql.FieldEQ(FieldPartOfSpeech, v))
}

// Gender applies equality check predicate on the "gender" field. It's identical to GenderEQ.
func Gender(v string) predicate.Word {
	return predicate.Word(sql.FieldEQ(FieldGender, v))
}

// FrenchExample applies equality check predicate on the "french_example" field. It's identical to FrenchExampleEQ.
func FrenchExample(v string) predicate.Word {
	return predicate.Word(sql.FieldEQ(FieldFrenchExample, v))
}

// EnglishExampleTranslation applies equality check predicate on the "english_example_translation" field. It's identical to EnglishExampleTranslationEQ.
func EnglishExampleTranslation(v string) predicate.Word {
	return predicate.Word(sql.FieldEQ(FieldEnglishExampleTranslation, v))
}

// PhoneticTranscription applies equality check predicate on the "phonetic_transcription" field. It's identical to PhoneticTranscriptionEQ.
func PhoneticTranscription(v string) predicate.Word {
	return predicate.Word(sql.FieldEQ(FieldPhoneticTranscription, v))
}

// PronunciationAudioURL applies equality check predicate on the "pronunciation_audio_url" field. It's identical to PronunciationAudioURLEQ.
func PronunciationAudioURL(v string) predicate.Word {
	return predicate.Word(sql.FieldEQ(FieldPronunciationAudioURL, v))
}

// DifficultyLevel applies equality check predicate on the "difficulty_level" field. It's identical to DifficultyLevelEQ.
func DifficultyLevel(v string) predicate.Word {
	return predicate.Word(sql.FieldEQ(FieldDifficultyLevel, v))
}

// UsageContext applies equality check predicate on the "usage_context" field. It's identical to UsageContextEQ.
func UsageContext(v string) predicate.Word {
	return predicate.Word(sql.FieldEQ(FieldUsageContext, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.Word {
	return predicate.Word(sql.FieldEQ(FieldIsActive, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Word {
	return predicate.Word(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Word {
	return predicate.Word(sql.FieldEQ(FieldUpdatedAt, v))
}

// FrenchWordEQ applies the EQ predicate on the "french_word" field.
func FrenchWordEQ(v string) predicate.Word {
	return predicate.Word(sql.FieldEQ(FieldFrenchWord, v))
}

// FrenchWordNEQ applies the NEQ predicate on the "french_word" field.
func FrenchWordNEQ(v string) predicate.Word {
	return predicate.Word(sql.FieldNEQ(FieldFrenchWord, v))
}

// FrenchWordIn applies the In predicate on the "french_word" field.
func FrenchWordIn(vs ...string) predicate.Word {
	return predicate.Word(sql.FieldIn(FieldFrenchWord, vs...))
}

// FrenchWordNotIn applies the NotIn predicate on the "french_word" field.
func FrenchWordNotIn(vs ...string) predicate.Word {
	return predicate.Word(sql.FieldNotIn(FieldFrenchWord, vs...))
}

// FrenchWordGT applies the GT predicate on the "french_word" field.
func FrenchWordGT(v string) predicate.Word {
	return predicate.Word(sql.FieldGT(FieldFrenchWord, v))
}

// FrenchWordGTE applies the GTE predicate on the "french_word" field.
func FrenchWordGTE(v string) predicate.Word {
	return predicate.Word(sql.FieldGTE(FieldFrenchWord, v))
}

// FrenchWordLT applies the LT predicate on the "french_word" field.
func FrenchWordLT(v string) predicate.Word {
	return predicate.Word(sql.FieldLT(FieldFrenchWord, v))
}

// FrenchWordLTE applies the LTE predicate on the "french_word" field.
func FrenchWordLTE(v string) predicate.Word {
	return predicate.Word(sql.FieldLTE(FieldFrenchWord, v))
}

// FrenchWordContains applies the Contains predicate on the "french_word" field.
func FrenchWordContains(v string) predicate.Word {
	return predicate.Word(sql.FieldContains(FieldFrenchWord, v))
}

// FrenchWordHasPrefix applies the HasPrefix predicate on the "french_word" field.
func FrenchWordHasPrefix(v string) predicate.Word {
	return predicate.Word(sql.FieldHasPrefix(FieldFrenchWord, v))
}

// FrenchWordHasSuffix applies the HasSuffix predicate on the "french_word" field.
func FrenchWordHasSuffix(v string) predicate.Word {
	return predicate.Word(sql.FieldHasSuffix(FieldFrenchWord, v))
}

// FrenchWordEqualFold applies the EqualFold predicate on the "french_word" field.
func FrenchWordEqualFold(v string) predicate.Word {
	return predicate.Word(sql.FieldEqualFold(FieldFrenchWord, v))
}

// FrenchWordContainsFold applies the ContainsFold predicate on the "french_word" field.
func FrenchWordContainsFold(v string) predicate.Word {
	return predicate.Word(sql.FieldContainsFold(FieldFrenchWord, v))
}

// EnglishTranslationEQ applies the EQ predicate on the "english_translation" field.
func EnglishTranslationEQ(v string) predicate.Word {
	return predicate.Word(sql.FieldEQ(FieldEnglishTranslation, v))
}

// EnglishTranslationNEQ applies the NEQ predicate on the "english_translation" field.
func EnglishTranslationNEQ(v string) predicate.Word {
	return predicate.Word(sql.FieldNEQ(FieldEnglishTranslation, v))
}

// EnglishTranslationIn applies the In predicate on the "english_translation" field.
func EnglishTranslationIn(vs ...string) predicate.Word {
	return predicate.Word(sql.FieldIn(FieldEnglishTranslation, vs...))
}

// EnglishTranslationNotIn applies the NotIn predicate on the "english_translation" field.
func EnglishTranslationNotIn(vs ...string) predicate.Word {
	return predicate.Word(sql.FieldNotIn(FieldEnglishTranslation, vs...))
}

// EnglishTranslationGT applies the GT predicate on the "english_translation" field.
func EnglishTranslationGT(v string) predicate.Word {
	return predicate.Word(sql.FieldGT(FieldEnglishTranslation, v))
}

// EnglishTranslationGTE applies the GTE predicate on the "english_translation" field.
func EnglishTranslationGTE(v string) predicate.Word {
	return predicate.Word(sql.FieldGTE(FieldEnglishTranslation, v))
}

// EnglishTranslationLT applies the LT predicate on the "english_translation" field.
func EnglishTranslationLT(v string) predicate.Word {
	return predicate.Word(sql.FieldLT(FieldEnglishTranslation, v))
}

// EnglishTranslationLTE applies the LTE predicate on the "english_translation" field.
func EnglishTranslationLTE(v string) predicate.Word {
	return predicate.Word(sql.FieldLTE(FieldEnglishTranslation, v))
}

// EnglishTranslationContains applies the Contains predicate on the "english_translation" field.
func EnglishTranslationContains(v string) predicate.Word {
	return predicate.Word(sql.FieldContains(FieldEnglishTranslation, v))
}

// EnglishTranslationHasPrefix applies the HasPrefix predicate on the "english_translation" field.
func EnglishTranslationHasPrefix(v string) predicate.Word {
	return predicate.Word(sql.FieldHasPrefix(FieldEnglishTranslation, v))
}

// EnglishTranslationHasSuffix applies the HasSuffix predicate on the "english_translation" field.
func EnglishTranslationHasSuffix(v string) predicate.Word {
	return predicate.Word(sql.FieldHasSuffix(FieldEnglishTranslation, v))
}

// EnglishTranslationEqualFold applies the EqualFold predicate on the "english_translation" field.
func EnglishTranslationEqualFold(v string) predicate.Word {
	return predicate.Word(sql.FieldEqualFold(FieldEnglishTranslation, v))
}

// EnglishTranslationContainsFold applies the ContainsFold predicate on the "english_translation" field.
func EnglishTranslationContainsFold(v string) predicate.Word {
	return predicate.Word(sql.FieldContainsFold(FieldEnglishTranslation, v))
}

// PartOfSpeechEQ applies the EQ predicate on the "part_of_speech" field.
func PartOfSpeechEQ(v string) predicate.Word {
	return predicate.Word(sql.FieldEQ(FieldPartOfSpeech, v))
}

// PartOfSpeechNEQ applies the NEQ predicate on the "part_of_speech" field.
func PartOfSpeechNEQ(v string) predicate.Word {
	return predicate.Word(sql.FieldNEQ(FieldPartOfSpeech, v))
}

// PartOfSpeechIn applies the In predicate on the "part_of_speech" field.
func PartOfSpeechIn(vs ...string) predicate.Word {
	return predicate.Word(sql.FieldIn(FieldPartOfSpeech, vs...))
}

// PartOfSpeechNotIn applies the NotIn predicate on the "part_of_speech" field.
func PartOfSpeechNotIn(vs ...string) predicate.Word {
	return predicate.Word(sql.FieldNotIn(FieldPartOfSpeech, vs...))
}

// PartOfSpeechGT applies the GT predicate on the "part_of_speech" field.
func PartOfSpeechGT(v string) predicate.Word {
	return predicate.Word(sql.FieldGT(FieldPartOfSpeech, v))
}

// PartOfSpeechGTE applies the GTE predicate on the "part_of_speech" field.
func PartOfSpeechGTE(v string) predicate.Word {
	return predicate.Word(sql.FieldGTE(FieldPartOfSpeech, v))
}

// PartOfSpeechLT applies the LT predicate on the "part_of_speech" field.
func PartOfSpeechLT(v string) predicate.Word {
	return predicate.Word(sql.FieldLT(FieldPartOfSpeech, v))
}

// PartOfSpeechLTE applies the LTE predicate on the "part_of_speech" field.
func PartOfSpeechLTE(v string) predicate.Word {
	return predicate.Word(sql.FieldLTE(FieldPartOfSpeech, v))
}

// PartOfSpeechContains applies the Contains predicate on the "part_of_speech" field.
func PartOfSpeechContains(v string) predicate.Word {
	return predicate.Word(sql.FieldContains(FieldPartOfSpeech, v))
}

// PartOfSpeechHasPrefix applies the HasPrefix predicate on the "part_of_speech" field.
func PartOfSpeechHasPrefix(v string) predicate.Word {
	return predicate.Word(sql.FieldHasPrefix(FieldPartOfSpeech, v))
}

// PartOfSpeechHasSuffix applies the HasSuffix predicate on the "part_of_speech" field.
func PartOfSpeechHasSuffix(v string) predicate.Word {
	return predicate.Word(sql.FieldHasSuffix(FieldPartOfSpeech, v))
}

// PartOfSpeechIsNil applies the IsNil predicate on the "part_of_speech" field.
func PartOfSpeechIsNil() predicate.Word {
	return predicate.Word(sql.FieldIsNull(FieldPartOfSpeech))
}

// PartOfSpeechNotNil applies the NotNil predicate on the "part_of_speech" field.
func PartOfSpeechNotNil() predicate.Word {
	return predicate.Word(sql.FieldNotNull(FieldPartOfSpeech))
}

// PartOfSpeechEqualFold applies the EqualFold predicate on the "part_of_speech" field.
func PartOfSpeechEqualFold(v string) predicate.Word {
	return predicate.Word(sql.FieldEqualFold(FieldPartOfSpeech, v))
}

// PartOfSpeechContainsFold applies the ContainsFold predicate on the "part_of_speech" field.
func PartOfSpeechContainsFold(v string) predicate.Word {
	return predicate.Word(sql.FieldContainsFold(FieldPartOfSpeech, v))
}

// GenderEQ applies the EQ predicate on the "gender" field.
func GenderEQ(v string) predicate.Word {
	return predicate.Word(sql.FieldEQ(FieldGender, v))
}

// GenderNEQ applies the NEQ predicate on the "gender" field.
func GenderNEQ(v string) predicate.Word {
	return predicate.Word(sql.FieldNEQ(FieldGender, v))
}

// GenderIn applies the In predicate on the "gender" field.
func GenderIn(vs ...string) predicate.Word {
	return predicate.Word(sql.FieldIn(FieldGender, vs...))
}

// GenderNotIn applies the NotIn predicate on the "gender" field.
func GenderNotIn(vs ...string) predicate.Word {
	return predicate.Word(sql.FieldNotIn(FieldGender, vs...))
}

// GenderGT applies the GT predicate on the "gender" field.
func GenderGT(v string) predicate.Word {
	return predicate.Word(sql.FieldGT(FieldGender, v))
}

// GenderGTE applies the GTE predicate on the "gender" field.
func GenderGTE(v string) predicate.Word {
	return predicate.Word(sql.FieldGTE(FieldGender, v))
}

// GenderLT applies the LT predicate on the "gender" field.
func GenderLT(v string) predicate.Word {
	return predicate.Word(sql.FieldLT(FieldGender, v))
}

// GenderLTE applies the LTE predicate on the "gender" field.
func GenderLTE(v string) predicate.Word {
	return predicate.Word(sql.FieldLTE(FieldGender, v))
}

// GenderContains applies the Contains predicate on the "gender" field.
func GenderContains(v string) predicate.Word {
	return predicate.Word(sql.FieldContains(FieldGender, v))
}

// GenderHasPrefix applies the HasPrefix predicate on the "gender" field.
func GenderHasPrefix(v string) predicate.Word {
	return predicate.Word(sql.FieldHasPrefix(FieldGender, v))
}

// GenderHasSuffix applies the HasSuffix predicate on the "gender" field.
func GenderHasSuffix(v string) predicate.Word {
	return predicate.Word(sql.FieldHasSuffix(FieldGender, v))
}

// GenderIsNil applies the IsNil predicate on the "gender" field.
func GenderIsNil() predicate.Word {
	return predicate.Word(sql.FieldIsNull(FieldGender))
}

// GenderNotNil applies the NotNil predicate on the "gender" field.
func GenderNotNil() predicate.Word {
	return predicate.Word(sql.FieldNotNull(FieldGender))
}

// GenderEqualFold applies the EqualFold predicate on the "gender" field.
func GenderEqualFold(v string) predicate.Word {
	return predicate.Word(sql.FieldEqualFold(FieldGender, v))
}

// GenderContainsFold applies the ContainsFold predicate on the "gender" field.
func GenderContainsFold(v string) predicate.Word {
	return predicate.Word(sql.FieldContainsFold(FieldGender, v))
}

// FrenchExampleEQ applies the EQ predicate on the "french_example" field.
func FrenchExampleEQ(v string) predicate.Word {
	return predicate.Word(sql.FieldEQ(FieldFrenchExample, v))
}

// FrenchExampleNEQ applies the NEQ predicate on the "french_example" field.
func FrenchExampleNEQ(v string) predicate.Word {
	return predicate.Word(sql.FieldNEQ(FieldFrenchExample, v))
}

// FrenchExampleIn applies the In predicate on the "french_example" field.
func FrenchExampleIn(vs ...string) predicate.Word {
	return predicate.Word(sql.FieldIn(FieldFrenchExample, vs...))
}

// FrenchExampleNotIn applies the NotIn predicate on the "french_example" field.
func FrenchExampleNotIn(vs ...string) predicate.Word {
	return predicate.Word(sql.FieldNotIn(FieldFrenchExample, vs...))
}

// FrenchExampleGT applies the GT predicate on the "french_example" field.
func FrenchExampleGT(v string) predicate.Word {
	return predicate.Word(sql.FieldGT(FieldFrenchExample, v))
}

// FrenchExampleGTE applies the GTE predicate on the "french_example" field.
func FrenchExampleGTE(v string) predicate.Word {
	return predicate.Word(sql.FieldGTE(FieldFrenchExample, v))
}

// FrenchExampleLT applies the LT predicate on the "french_example" field.
func FrenchExampleLT(v string) predicate.Word {
	return predicate.Word(sql.FieldLT(FieldFrenchExample, v))
}

// FrenchExampleLTE applies the LTE predicate on the "french_example" field.
func FrenchExampleLTE(v string) predicate.Word {
	return predicate.Word(sql.FieldLTE(FieldFrenchExample, v))
}

// FrenchExampleContains applies the Contains predicate on the "french_example" field.
func FrenchExampleContains(v string) predicate.Word {
	return predicate.Word(sql.FieldContains(FieldFrenchExample, v))
}

// FrenchExampleHasPrefix applies the HasPrefix predicate on the "french_example" field.
func FrenchExampleHasPrefix(v string) predicate.Word {
	return predicate.Word(sql.FieldHasPrefix(FieldFrenchExample, v))
}

// FrenchExampleHasSuffix applies the HasSuffix predicate on the "french_example" field.
func FrenchExampleHasSuffix(v string) predicate.Word {
	return predicate.Word(sql.FieldHasSuffix(FieldFrenchExample, v))
}

// FrenchExampleIsNil applies the IsNil predicate on the "french_example" field.
func FrenchExampleIsNil() predicate.Word {
	return predicate.Word(sql.FieldIsNull(FieldFrenchExample))
}

// FrenchExampleNotNil applies the NotNil predicate on the "french_example" field.
func FrenchExampleNotNil() predicate.Word {
	return predicate.Word(sql.FieldNotNull(FieldFrenchExample))
}

// FrenchExampleEqualFold applies the EqualFold predicate on the "french_example" field.
func FrenchExampleEqualFold(v string) predicate.Word {
	return predicate.Word(sql.FieldEqualFold(FieldFrenchExample, v))
}

// FrenchExampleContainsFold applies the ContainsFold predicate on the "french_example" field.
func FrenchExampleContainsFold(v string) predicate.Word {
	return predicate.Word(sql.FieldContainsFold(FieldFrenchExample, v))
}

// EnglishExampleTranslationEQ applies the EQ predicate on the "english_example_translation" field.
func EnglishExampleTranslationEQ(v string) predicate.Word {
	return predicate.Word(sql.FieldEQ(FieldEnglishExampleTranslation, v))
}

// EnglishExampleTranslationNEQ applies the NEQ predicate on the "english_example_translation" field.
func EnglishExampleTranslationNEQ(v string) predicate.Word {
	return predicate.Word(sql.FieldNEQ(FieldEnglishExampleTranslation, v))
}

// EnglishExampleTranslationIn applies the In predicate on the "english_example_translation" field.
func EnglishExampleTranslationIn(vs ...string) predicate.Word {
	return predicate.Word(sql.FieldIn(FieldEnglishExampleTranslation, vs...))
}

// EnglishExampleTranslationNotIn applies the NotIn predicate on the "english_example_translation" field.
func EnglishExampleTranslationNotIn(vs ...string) predicate.Word {
	return predicate.Word(sql.FieldNotIn(FieldEnglishExampleTranslation, vs...))
}

// EnglishExampleTranslationGT applies the GT predicate on the "english_example_translation" field.
func EnglishExampleTranslationGT(v string) predicate.Word {
	return predicate.Word(sql.FieldGT(FieldEnglishExampleTranslation, v))
}

// EnglishExampleTranslationGTE applies the GTE predicate on the "english_example_translation" field.
func EnglishExampleTranslationGTE(v string) predicate.Word {
	return predicate.Word(sql.FieldGTE(FieldEnglishExampleTranslation, v))
}

// EnglishExampleTranslationLT applies the LT predicate on the "english_example_translation" field.
func EnglishExampleTranslationLT(v string) predicate.Word {
	return predicate.Word(sql.FieldLT(FieldEnglishExampleTranslation, v))
}

// EnglishExampleTranslationLTE applies the LTE predicate on the "english_example_translation" field.
func EnglishExampleTranslationLTE(v string) predicate.Word {
	return predicate.Word(sql.FieldLTE(FieldEnglishExampleTranslation, v))
}

// EnglishExampleTranslationContains applies the Contains predicate on the "english_example_translation" field.
func EnglishExampleTranslationContains(v string) predicate.Word {
	return predicate.Word(sql.FieldContains(FieldEnglishExampleTranslation, v))
}

// EnglishExampleTranslationHasPrefix applies the HasPrefix predicate on the "english_example_translation" field.
func EnglishExampleTranslationHasPrefix(v string) predicate.Word {
	return predicate.Word(sql.FieldHasPrefix(FieldEnglishExampleTranslation, v))
}

// EnglishExampleTranslationHasSuffix applies the HasSuffix predicate on the "english_example_translation" field.
func EnglishExampleTranslationHasSuffix(v string) predicate.Word {
	return predicate.Word(sql.FieldHasSuffix(FieldEnglishExampleTranslation, v))
}

// EnglishExampleTranslationIsNil applies the IsNil predicate on the "english_example_translation" field.
func EnglishExampleTranslationIsNil() predicate.Word {
	return predicate.Word(sql.FieldIsNull(FieldEnglishExampleTranslation))
}

// EnglishExampleTranslationNotNil applies the NotNil predicate on the "english_example_translation" field.
func EnglishExampleTranslationNotNil() predicate.Word {
	return predicate.Word(sql.FieldNotNull(FieldEnglishExampleTranslation))
}

// EnglishExampleTranslationEqualFold applies the EqualFold predicate on the "english_example_translation" field.
func EnglishExampleTranslationEqualFold(v string) predicate.Word {
	return predicate.Word(sql.FieldEqualFold(FieldEnglishExampleTranslation, v))
}

// EnglishExampleTranslationContainsFold applies the ContainsFold predicate on the "english_example_translation" field.
func EnglishExampleTranslationContainsFold(v string) predicate.Word {
	return predicate.Word(sql.FieldContainsFold(FieldEnglishExampleTranslation, v))
}

// PhoneticTranscriptionEQ applies the EQ predicate on the "phonetic_transcription" field.
func PhoneticTranscriptionEQ(v string) predicate.Word {
	return predicate.Word(sql.FieldEQ(FieldPhoneticTranscription, v))
}

// PhoneticTranscriptionNEQ applies the NEQ predicate on the "phonetic_transcription" field.
func PhoneticTranscriptionNEQ(v string) predicate.Word {
	return predicate.Word(sql.FieldNEQ(FieldPhoneticTranscription, v))
}

// PhoneticTranscriptionIn applies the In predicate on the "phonetic_transcription" field.
func PhoneticTranscriptionIn(vs ...string) predicate.Word {
	return predicate.Word(sql.FieldIn(FieldPhoneticTranscription, vs...))
}

// PhoneticTranscriptionNotIn applies the NotIn predicate on the "phonetic_transcription" field.
func PhoneticTranscriptionNotIn(vs ...string) predicate.Word {
	return predicate.Word(sql.FieldNotIn(FieldPhoneticTranscription, vs...))
}

// PhoneticTranscriptionGT applies the GT predicate on the "phonetic_transcription" field.
func PhoneticTranscriptionGT(v string) predicate.Word {
	return predicate.Word(sql.FieldGT(FieldPhoneticTranscription, v))
}

// PhoneticTranscriptionGTE applies the GTE predicate on the "phonetic_transcription" field.
func PhoneticTranscriptionGTE(v string) predicate.Word {
	return predicate.Word(sql.FieldGTE(FieldPhoneticTranscription, v))
}

// PhoneticTranscriptionLT applies the LT predicate on the "phonetic_transcription" field.
func PhoneticTranscriptionLT(v string) predicate.Word {
	return predicate.Word(sql.FieldLT(FieldPhoneticTranscription, v))
}

// PhoneticTranscriptionLTE applies the LTE predicate on the "phonetic_transcription" field.
func PhoneticTranscriptionLTE(v string) predicate.Word {
	return predicate.Word(sql.FieldLTE(FieldPhoneticTranscription, v))
}

// PhoneticTranscriptionContains applies the Contains predicate on the "phonetic_transcription" field.
func PhoneticTranscriptionContains(v string) predicate.Word {
	return predicate.Word(sql.FieldContains(FieldPhoneticTranscription, v))
}

// PhoneticTranscriptionHasPrefix applies the HasPrefix predicate on the "phonetic_transcription" field.
func PhoneticTranscriptionHasPrefix(v string) predicate.Word {
	return predicate.Word(sql.FieldHasPrefix(FieldPhoneticTranscription, v))
}

// PhoneticTranscriptionHasSuffix applies the HasSuffix predicate on the "phonetic_transcription" field.
func PhoneticTranscriptionHasSuffix(v string) predicate.Word {
	return predicate.Word(sql.FieldHasSuffix(FieldPhoneticTranscription, v))
}

// PhoneticTranscriptionIsNil applies the IsNil predicate on the "phonetic_transcription" field.
func PhoneticTranscriptionIsNil() predicate.Word {
	return predicate.Word(sql.FieldIsNull(FieldPhoneticTranscription))
}

// PhoneticTranscriptionNotNil applies the NotNil predicate on the "phonetic_transcription" field.
func PhoneticTranscriptionNotNil() predicate.Word {
	return predicate.Word(sql.FieldNotNull(FieldPhoneticTranscription))
}

// PhoneticTranscriptionEqualFold applies the EqualFold predicate on the "phonetic_transcription" field.
func PhoneticTranscriptionEqualFold(v string) predicate.Word {
	return predicate.Word(sql.FieldEqualFold(FieldPhoneticTranscription, v))
}

// PhoneticTranscriptionContainsFold applies the ContainsFold predicate on the "phonetic_transcription" field.
func PhoneticTranscriptionContainsFold(v string) predicate.Word {
	return predicate.Word(sql.FieldContainsFold(FieldPhoneticTranscription, v))
}

// PronunciationAudioURLEQ applies the EQ predicate on the "pronunciation_audio_url" field.
func PronunciationAudioURLEQ(v string) predicate.Word {
	return predicate.Word(sql.FieldEQ(FieldPronunciationAudioURL, v))
}

// PronunciationAudioURLNEQ applies the NEQ predicate on the "pronunciation_audio_url" field.
func PronunciationAudioURLNEQ(v string) predicate.Word {
	return predicate.Word(sql.FieldNEQ(FieldPronunciationAudioURL, v))
}

// PronunciationAudioURLIn applies the In predicate on the "pronunciation_audio_url" field.
func PronunciationAudioURLIn(vs ...string) predicate.Word {
	return predicate.Word(sql.FieldIn(FieldPronunciationAudioURL, vs...))
}

// PronunciationAudioURLNotIn applies the NotIn predicate on the "pronunciation_audio_url" field.
func PronunciationAudioURLNotIn(vs ...string) predicate.Word {
	return predicate.Word(sql.FieldNotIn(FieldPronunciationAudioURL, vs...))
}

// PronunciationAudioURLGT applies the GT predicate on the "pronunciation_audio_url" field.
func PronunciationAudioURLGT(v string) predicate.Word {
	return predicate.Word(sql.FieldGT(FieldPronunciationAudioURL, v))
}

// PronunciationAudioURLGTE applies the GTE predicate on the "pronunciation_audio_url" field.
func PronunciationAudioURLGTE(v string) predicate.Word {
	return predicate.Word(sql.FieldGTE(FieldPronunciationAudioURL, v))
}

// PronunciationAudioURLLT applies the LT predicate on the "pronunciation_audio_url" field.
func PronunciationAudioURLLT(v string) predicate.Word {
	return predicate.Word(sql.FieldLT(FieldPronunciationAudioURL, v))
}

// PronunciationAudioURLLTE applies the LTE predicate on the "pronunciation_audio_url" field.
func PronunciationAudioURLLTE(v string) predicate.Word {
	return predicate.Word(sql.FieldLTE(FieldPronunciationAudioURL, v))
}

// PronunciationAudioURLContains applies the Contains predicate on the "pronunciation_audio_url" field.
func PronunciationAudioURLContains(v string) predicate.Word {
	return predicate.Word(sql.FieldContains(FieldPronunciationAudioURL, v))
}

// PronunciationAudioURLHasPrefix applies the HasPrefix predicate on the "pronunciation_audio_url" field.
func PronunciationAudioURLHasPrefix(v string) predicate.Word {
	return predicate.Word(sql.FieldHasPrefix(FieldPronunciationAudioURL, v))
}

// PronunciationAudioURLHasSuffix applies the HasSuffix predicate on the "pronunciation_audio_url" field.
func PronunciationAudioURLHasSuffix(v string) predicate.Word {
	return predicate.Word(sql.FieldHasSuffix(FieldPronunciationAudioURL, v))
}

// PronunciationAudioURLIsNil applies the IsNil predicate on the "pronunciation_audio_url" field.
func PronunciationAudioURLIsNil() predicate.Word {
	return predicate.Word(sql.FieldIsNull(FieldPronunciationAudioURL))
}

// PronunciationAudioURLNotNil applies the NotNil predicate on the "pronunciation_audio_url" field.
func PronunciationAudioURLNotNil() predicate.Word {
	return predicate.Word(sql.FieldNotNull(FieldPronunciationAudioURL))
}

// PronunciationAudioURLEqualFold applies the EqualFold predicate on the "pronunciation_audio_url" field.
func PronunciationAudioURLEqualFold(v string) predicate.Word {
	return predicate.Word(sql.FieldEqualFold(FieldPronunciationAudioURL, v))
}

// PronunciationAudioURLContainsFold applies the ContainsFold predicate on the "pronunciation_audio_url" field.
func PronunciationAudioURLContainsFold(v string) predicate.Word {
	return predicate.Word(sql.FieldContainsFold(FieldPronunciationAudioURL, v))
}

// DifficultyLevelEQ applies the EQ predicate on the "difficulty_level" field.
func DifficultyLevelEQ(v string) predicate.Word {
	return predicate.Word(sql.FieldEQ(FieldDifficultyLevel, v))
}

// DifficultyLevelNEQ applies the NEQ predicate on the "difficulty_level" field.
func DifficultyLevelNEQ(v string) predicate.Word {
	return predicate.Word(sql.FieldNEQ(FieldDifficultyLevel, v))
}

// DifficultyLevelIn applies the In predicate on the "difficulty_level" field.
func DifficultyLevelIn(vs ...string) predicate.Word {
	return predicate.Word(sql.FieldIn(FieldDifficultyLevel, vs...))
}

// DifficultyLevelNotIn applies the NotIn predicate on the "difficulty_level" field.
func DifficultyLevelNotIn(vs ...string) predicate.Word {
	return predicate.Word(sql.FieldNotIn(FieldDifficultyLevel, vs...))
}

// DifficultyLevelGT applies the GT predicate on the "difficulty_level" field.
func DifficultyLevelGT(v string) predicate.Word {
	return predicate.Word(sql.FieldGT(FieldDifficultyLevel, v))
}

// DifficultyLevelGTE applies the GTE predicate on the "difficulty_level" field.
func DifficultyLevelGTE(v string) predicate.Word {
	return predicate.Word(sql.FieldGTE(FieldDifficultyLevel, v))
}

// DifficultyLevelLT applies the LT predicate on the "difficulty_level" field.
func DifficultyLevelLT(v string) predicate.Word {
	return predicate.Word(sql.FieldLT(FieldDifficultyLevel, v))
}

// DifficultyLevelLTE applies the LTE predicate on the "difficulty_level" field.
func DifficultyLevelLTE(v string) predicate.Word {
	return predicate.Word(sql.FieldLTE(FieldDifficultyLevel, v))
}

// DifficultyLevelContains applies the Contains predicate on the "difficulty_level" field.
func DifficultyLevelContains(v string) predicate.Word {
	return predicate.Word(sql.FieldContains(FieldDifficultyLevel, v))
}

// DifficultyLevelHasPrefix applies the HasPrefix predicate on the "difficulty_level" field.
func DifficultyLevelHasPrefix(v string) predicate.Word {
	return predicate.Word(sql.FieldHasPrefix(FieldDifficultyLevel, v))
}

// DifficultyLevelHasSuffix applies the HasSuffix predicate on the "difficulty_level" field.
func DifficultyLevelHasSuffix(v string) predicate.Word {
	return predicate.Word(sql.FieldHasSuffix(FieldDifficultyLevel, v))
}

// DifficultyLevelIsNil applies the IsNil predicate on the "difficulty_level" field.
func DifficultyLevelIsNil() predicate.Word {
	return predicate.Word(sql.FieldIsNull(FieldDifficultyLevel))
}

// DifficultyLevelNotNil applies the NotNil predicate on the "difficulty_level" field.
func DifficultyLevelNotNil() predicate.Word {
	return predicate.Word(sql.FieldNotNull(FieldDifficultyLevel))
}

// DifficultyLevelEqualFold applies the EqualFold predicate on the "difficulty_level" field.
func DifficultyLevelEqualFold(v string) predicate.Word {
	return predicate.Word(sql.FieldEqualFold(FieldDifficultyLevel, v))
}

// DifficultyLevelContainsFold applies the ContainsFold predicate on the "difficulty_level" field.
func DifficultyLevelContainsFold(v string) predicate.Word {
	return predicate.Word(sql.FieldContainsFold(FieldDifficultyLevel, v))
}

// TagsIsNil applies the IsNil predicate on the "tags" field.
func TagsIsNil() predicate.Word {
	return predicate.Word(sql.FieldIsNull(FieldTags))
}

// TagsNotNil applies the NotNil predicate on the "tags" field.
func TagsNotNil() predicate.Word {
	return predicate.Word(sql.FieldNotNull(FieldTags))
}

// UsageContextEQ applies the EQ predicate on the "usage_context" field.
func UsageContextEQ(v string) predicate.Word {
	return predicate.Word(sql.FieldEQ(FieldUsageContext, v))
}

// UsageContextNEQ applies the NEQ predicate on the "usage_context" field.
func UsageContextNEQ(v string) predicate.Word {
	return predicate.Word(sql.FieldNEQ(FieldUsageContext, v))
}

// UsageContextIn applies the In predicate on the "usage_context" field.
func UsageContextIn(vs ...string) predicate.Word {
	return predicate.Word(sql.FieldIn(FieldUsageContext, vs...))
}

// UsageContextNotIn applies the NotIn predicate on the "usage_context" field.
func UsageContextNotIn(vs ...string) predicate.Word {
	return predicate.Word(sql.FieldNotIn(FieldUsageContext, vs...))
}

// UsageContextGT applies the GT predicate on the "usage_context" field.
func UsageContextGT(v string) predicate.Word {
	return predicate.Word(sql.FieldGT(FieldUsageContext, v))
}

// UsageContextGTE applies the GTE predicate on the "usage_context" field.
func UsageContextGTE(v string) predicate.Word {
	return predicate.Word(sql.FieldGTE(FieldUsageContext, v))
}

// UsageContextLT applies the LT predicate on the "usage_context" field.
func UsageContextLT(v string) predicate.Word {
	return predicate.Word(sql.FieldLT(FieldUsageContext, v))
}

// UsageContextLTE applies the LTE predicate on the "usage_context" field.
func UsageContextLTE(v string) predicate.Word {
	return predicate.Word(sql.FieldLTE(FieldUsageContext, v))
}

// UsageContextContains applies the Contains predicate on the "usage_context" field.
func UsageContextContains(v string) predicate.Word {
	return predicate.Word(sql.FieldContains(FieldUsageContext, v))
}

// UsageContextHasPrefix applies the HasPrefix predicate on the "usage_context" field.
func UsageContextHasPrefix(v string) predicate.Word {
	return predicate.Word(sql.FieldHasPrefix(FieldUsageContext, v))
}

// UsageContextHasSuffix applies the HasSuffix predicate on the "usage_context" field.
func UsageContextHasSuffix(v string) predicate.Word {
	return predicate.Word(sql.FieldHasSuffix(FieldUsageContext, v))
}

// UsageContextIsNil applies the IsNil predicate on the "usage_context" field.
func UsageContextIsNil() predicate.Word {
	return predicate.Word(sql.FieldIsNull(FieldUsageContext))
}

// UsageContextNotNil applies the NotNil predicate on the "usage_context" field.
func UsageContextNotNil() predicate.Word {
	return predicate.Word(sql.FieldNotNull(FieldUsageContext))
}

// UsageContextEqualFold applies the EqualFold predicate on the "usage_context" field.
func UsageContextEqualFold(v string) predicate.Word {
	return predicate.Word(sql.FieldEqualFold(FieldUsageContext, v))
}

// UsageContextContainsFold applies the ContainsFold predicate on the "usage_context" field.
func UsageContextContainsFold(v string) predicate.Word {
	return predicate.Word(sql.FieldContainsFold(FieldUsageContext, v))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.Word {
	return predicate.Word(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.Word {
	return predicate.Word(sql.FieldNEQ(FieldIsActive, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Word {
	return predicate.Word(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Word {
	return predicate.Word(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Word {
	return predicate.Word(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Word {
	return predicate.Word(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Word {
	return predicate.Word(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Word {
	return predicate.Word(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Word {
	return predicate.Word(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Word {
	return predicate.Word(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Word {
	return predicate.Word(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Word {
	return predicate.Word(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Word {
	return predicate.Word(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Word {
	return predicate.Word(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Word {
	return predicate.Word(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Word {
	return predicate.Word(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Word {
	return predicate.Word(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Word {
	return predicate.Word(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasDeck applies the HasEdge predicate on the "deck" edge.
func HasDeck() predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DeckTable, DeckColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeckWith applies the HasEdge predicate on the "deck" edge with a given conditions (other predicates).
func HasDeckWith(preds ...predicate.Deck) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		step := newDeckStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasQuestions applies the HasEdge predicate on the "questions" edge.
func HasQuestions() predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, QuestionsTable, QuestionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQuestionsWith applies the HasEdge predicate on the "questions" edge with a given conditions (other predicates).
func HasQuestionsWith(preds ...predicate.Question) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		step := newQuestionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPronunciationAttempts applies the HasEdge predicate on the "pronunciation_attempts" edge.
func HasPronunciationAttempts() predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PronunciationAttemptsTable, PronunciationAttemptsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPronunciationAttemptsWith applies the HasEdge predicate on the "pronunciation_attempts" edge with a given conditions (other predicates).
func HasPronunciationAttemptsWith(preds ...predicate.PronunciationAttempt) predicate.Word {
	return predicate.Word(func(s *sql.Selector) {
		step := newPronunciationAttemptsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Word) predicate.Word {
	return predicate.Word(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Word) predicate.Word {
	return predicate.Word(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Word) predicate.Word {
	return predicate.Word(sql.NotPredicates(p))
}
