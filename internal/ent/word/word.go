// Code generated by ent, DO NOT EDIT.

package word

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the word type in the database.
	Label = "word"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFrenchWord holds the string denoting the french_word field in the database.
	FieldFrenchWord = "french_word"
	// FieldEnglishTranslation holds the string denoting the english_translation field in the database.
	FieldEnglishTranslation = "english_translation"
	// FieldPartOfSpeech holds the string denoting the part_of_speech field in the database.
	FieldPartOfSpeech = "part_of_speech"
	// FieldGender holds the string denoting the gender field in the database.
	FieldGender = "gender"
	// FieldFrenchExample holds the string denoting the french_example field in the database.
	FieldFrenchExample = "french_example"
	// FieldEnglishExampleTranslation holds the string denoting the english_example_translation field in the database.
	FieldEnglishExampleTranslation = "english_example_translation"
	// FieldPhoneticTranscription holds the string denoting the phonetic_transcription field in the database.
	FieldPhoneticTranscription = "phonetic_transcription"
	// FieldPronunciationAudioURL holds the string denoting the pronunciation_audio_url field in the database.
	FieldPronunciationAudioURL = "pronunciation_audio_url"
	// FieldDifficultyLevel holds the string denoting the difficulty_level field in the database.
	FieldDifficultyLevel = "difficulty_level"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldUsageContext holds the string denoting the usage_context field in the database.
	FieldUsageContext = "usage_context"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeDeck holds the string denoting the deck edge name in mutations.
	EdgeDeck = "deck"
	// EdgeQuestions holds the string denoting the questions edge name in mutations.
	EdgeQuestions = "questions"
	// EdgePronunciationAttempts holds the string denoting the pronunciation_attempts edge name in mutations.
	EdgePronunciationAttempts = "pronunciation_attempts"
	// Table holds the table name of the word in the database.
	Table = "words"
	// DeckTable is the table that holds the deck relation/edge.
	DeckTable = "words"
	// DeckInverseTable is the table name for the Deck entity.
	// It exists in this package in order to avoid circular dependency with the "deck" package.
	DeckInverseTable = "decks"
	// DeckColumn is the table column denoting the deck relation/edge.
	DeckColumn = "deck_words"
	// QuestionsTable is the table that holds the questions relation/edge.
	QuestionsTable = "questions"
	// QuestionsInverseTable is the table name for the Question entity.
	// It exists in this package in order to avoid circular dependency with the "question" package.
	QuestionsInverseTable = "questions"
	// QuestionsColumn is the table column denoting the questions relation/edge.
	QuestionsColumn = "word_questions"
	// PronunciationAttemptsTable is the table that holds the pronunciation_attempts relation/edge.
	PronunciationAttemptsTable = "pronunciation_attempts"
	// PronunciationAttemptsInverseTable is the table name for the PronunciationAttempt entity.
	// It exists in this package in order to avoid circular dependency with the "pronunciationattempt" package.
	PronunciationAttemptsInverseTable = "pronunciation_attempts"
	// PronunciationAttemptsColumn is the table column denoting the pronunciation_attempts relation/edge.
	PronunciationAttemptsColumn = "word_pronunciation_attempts"
)

// Columns holds all SQL columns for word fields.
var Columns = []string{
	FieldID,
	FieldFrenchWord,
	FieldEnglishTranslation,
	FieldPartOfSpeech,
	FieldGender,
	FieldFrenchExample,
	FieldEnglishExampleTranslation,
	FieldPhoneticTranscription,
	FieldPronunciationAudioURL,
	FieldDifficultyLevel,
	FieldTags,
	FieldUsageContext,
	FieldIsActive,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "words"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"deck_words",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// FrenchWordValidator is a validator for the "french_word" field. It is called by the builders before save.
	FrenchWordValidator func(string) error
	// PartOfSpeechValidator is a validator for the "part_of_speech" field. It is called by the builders before save.
	PartOfSpeechValidator func(string) error
	// GenderValidator is a validator for the "gender" field. It is called by the builders before save.
	GenderValidator func(string) error
	// PhoneticTranscriptionValidator is a validator for the "phonetic_transcription" field. It is called by the builders before save.
	PhoneticTranscriptionValidator func(string) error
	// PronunciationAudioURLValidator is a validator for the "pronunciation_audio_url" field. It is called by the builders before save.
	PronunciationAudioURLValidator func(string) error
	// DifficultyLevelValidator is a validator for the "difficulty_level" field. It is called by the builders before save.
	DifficultyLevelValidator func(string) error
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Word queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFrenchWord orders the results by the french_word field.
func ByFrenchWord(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFrenchWord, opts...).ToFunc()
}

// ByEnglishTranslation orders the results by the english_translation field.
func ByEnglishTranslation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnglishTranslation, opts...).ToFunc()
}

// ByPartOfSpeech orders the results by the part_of_speech field.
func ByPartOfSpeech(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPartOfSpeech, opts...).ToFunc()
}

// ByGender orders the results by the gender field.
func ByGender(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGender, opts...).ToFunc()
}

// ByFrenchExample orders the results by the french_example field.
func ByFrenchExample(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFrenchExample, opts...).ToFunc()
}

// ByEnglishExampleTranslation orders the results by the english_example_translation field.
func ByEnglishExampleTranslation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnglishExampleTranslation, opts...).ToFunc()
}

// ByPhoneticTranscription orders the results by the phonetic_transcription field.
func ByPhoneticTranscription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhoneticTranscription, opts...).ToFunc()
}

// ByPronunciationAudioURL orders the results by the pronunciation_audio_url field.
func ByPronunciationAudioURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPronunciationAudioURL, opts...).ToFunc()
}

// ByDifficultyLevel orders the results by the difficulty_level field.
func ByDifficultyLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDifficultyLevel, opts...).ToFunc()
}

// ByUsageContext orders the results by the usage_context field.
func ByUsageContext(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsageContext, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeckField orders the results by deck field.
func ByDeckField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeckStep(), sql.OrderByField(field, opts...))
	}
}

// ByQuestionsCount orders the results by questions count.
func ByQuestionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newQuestionsStep(), opts...)
	}
}

// ByQuestions orders the results by questions terms.
func ByQuestions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newQuestionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPronunciationAttemptsCount orders the results by pronunciation_attempts count.
func ByPronunciationAttemptsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPronunciationAttemptsStep(), opts...)
	}
}

// ByPronunciationAttempts orders the results by pronunciation_attempts terms.
func ByPronunciationAttempts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPronunciationAttemptsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newDeckStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeckInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DeckTable, DeckColumn),
	)
}
func newQuestionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(QuestionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, QuestionsTable, QuestionsColumn),
	)
}
func newPronunciationAttemptsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PronunciationAttemptsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PronunciationAttemptsTable, PronunciationAttemptsColumn),
	)
}
