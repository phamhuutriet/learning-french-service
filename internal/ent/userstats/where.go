// Code generated by ent, DO NOT EDIT.

package userstats

import (
	"learning-french-service/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserStats {
	return predicate.UserStats(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserStats {
	return predicate.UserStats(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserStats {
	return predicate.UserStats(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserStats {
	return predicate.UserStats(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserStats {
	return predicate.UserStats(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserStats {
	return predicate.UserStats(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserStats {
	return predicate.UserStats(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserStats {
	return predicate.UserStats(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserStats {
	return predicate.UserStats(sql.FieldLTE(FieldID, id))
}

// StatDate applies equality check predicate on the "stat_date" field. It's identical to StatDateEQ.
func StatDate(v time.Time) predicate.UserStats {
	return predicate.UserStats(sql.FieldEQ(FieldStatDate, v))
}

// QuestionsAnswered applies equality check predicate on the "questions_answered" field. It's identical to QuestionsAnsweredEQ.
func QuestionsAnswered(v int) predicate.UserStats {
	return predicate.UserStats(sql.FieldEQ(FieldQuestionsAnswered, v))
}

// QuestionsCorrect applies equality check predicate on the "questions_correct" field. It's identical to QuestionsCorrectEQ.
func QuestionsCorrect(v int) predicate.UserStats {
	return predicate.UserStats(sql.FieldEQ(FieldQuestionsCorrect, v))
}

// WordsLearned applies equality check predicate on the "words_learned" field. It's identical to WordsLearnedEQ.
func WordsLearned(v int) predicate.UserStats {
	return predicate.UserStats(sql.FieldEQ(FieldWordsLearned, v))
}

// TotalStudyTimeMinutes applies equality check predicate on the "total_study_time_minutes" field. It's identical to TotalStudyTimeMinutesEQ.
func TotalStudyTimeMinutes(v int) predicate.UserStats {
	return predicate.UserStats(sql.FieldEQ(FieldTotalStudyTimeMinutes, v))
}

// StreakDays applies equality check predicate on the "streak_days" field. It's identical to StreakDaysEQ.
func StreakDays(v int) predicate.UserStats {
	return predicate.UserStats(sql.FieldEQ(FieldStreakDays, v))
}

// EnglishToFrenchAccuracy applies equality check predicate on the "english_to_french_accuracy" field. It's identical to EnglishToFrenchAccuracyEQ.
func EnglishToFrenchAccuracy(v float64) predicate.UserStats {
	return predicate.UserStats(sql.FieldEQ(FieldEnglishToFrenchAccuracy, v))
}

// FrenchToEnglishAccuracy applies equality check predicate on the "french_to_english_accuracy" field. It's identical to FrenchToEnglishAccuracyEQ.
func FrenchToEnglishAccuracy(v float64) predicate.UserStats {
	return predicate.UserStats(sql.FieldEQ(FieldFrenchToEnglishAccuracy, v))
}

// PronunciationAccuracy applies equality check predicate on the "pronunciation_accuracy" field. It's identical to PronunciationAccuracyEQ.
func PronunciationAccuracy(v float64) predicate.UserStats {
	return predicate.UserStats(sql.FieldEQ(FieldPronunciationAccuracy, v))
}

// AverageResponseTimeMs applies equality check predicate on the "average_response_time_ms" field. It's identical to AverageResponseTimeMsEQ.
func AverageResponseTimeMs(v int) predicate.UserStats {
	return predicate.UserStats(sql.FieldEQ(FieldAverageResponseTimeMs, v))
}

// WordsPerMinute applies equality check predicate on the "words_per_minute" field. It's identical to WordsPerMinuteEQ.
func WordsPerMinute(v float64) predicate.UserStats {
	return predicate.UserStats(sql.FieldEQ(FieldWordsPerMinute, v))
}

// Recommendations applies equality check predicate on the "recommendations" field. It's identical to RecommendationsEQ.
func Recommendations(v string) predicate.UserStats {
	return predicate.UserStats(sql.FieldEQ(FieldRecommendations, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserStats {
	return predicate.UserStats(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.UserStats {
	return predicate.UserStats(sql.FieldEQ(FieldUpdatedAt, v))
}

// StatDateEQ applies the EQ predicate on the "stat_date" field.
func StatDateEQ(v time.Time) predicate.UserStats {
	return predicate.UserStats(sql.FieldEQ(FieldStatDate, v))
}

// StatDateNEQ applies the NEQ predicate on the "stat_date" field.
func StatDateNEQ(v time.Time) predicate.UserStats {
	return predicate.UserStats(sql.FieldNEQ(FieldStatDate, v))
}

// StatDateIn applies the In predicate on the "stat_date" field.
func StatDateIn(vs ...time.Time) predicate.UserStats {
	return predicate.UserStats(sql.FieldIn(FieldStatDate, vs...))
}

// StatDateNotIn applies the NotIn predicate on the "stat_date" field.
func StatDateNotIn(vs ...time.Time) predicate.UserStats {
	return predicate.UserStats(sql.FieldNotIn(FieldStatDate, vs...))
}

// StatDateGT applies the GT predicate on the "stat_date" field.
func StatDateGT(v time.Time) predicate.UserStats {
	return predicate.UserStats(sql.FieldGT(FieldStatDate, v))
}

// StatDateGTE applies the GTE predicate on the "stat_date" field.
func StatDateGTE(v time.Time) predicate.UserStats {
	return predicate.UserStats(sql.FieldGTE(FieldStatDate, v))
}

// StatDateLT applies the LT predicate on the "stat_date" field.
func StatDateLT(v time.Time) predicate.UserStats {
	return predicate.UserStats(sql.FieldLT(FieldStatDate, v))
}

// StatDateLTE applies the LTE predicate on the "stat_date" field.
func StatDateLTE(v time.Time) predicate.UserStats {
	return predicate.UserStats(sql.FieldLTE(FieldStatDate, v))
}

// QuestionsAnsweredEQ applies the EQ predicate on the "questions_answered" field.
func QuestionsAnsweredEQ(v int) predicate.UserStats {
	return predicate.UserStats(sql.FieldEQ(FieldQuestionsAnswered, v))
}

// QuestionsAnsweredNEQ applies the NEQ predicate on the "questions_answered" field.
func QuestionsAnsweredNEQ(v int) predicate.UserStats {
	return predicate.UserStats(sql.FieldNEQ(FieldQuestionsAnswered, v))
}

// QuestionsAnsweredIn applies the In predicate on the "questions_answered" field.
func QuestionsAnsweredIn(vs ...int) predicate.UserStats {
	return predicate.UserStats(sql.FieldIn(FieldQuestionsAnswered, vs...))
}

// QuestionsAnsweredNotIn applies the NotIn predicate on the "questions_answered" field.
func QuestionsAnsweredNotIn(vs ...int) predicate.UserStats {
	return predicate.UserStats(sql.FieldNotIn(FieldQuestionsAnswered, vs...))
}

// QuestionsAnsweredGT applies the GT predicate on the "questions_answered" field.
func QuestionsAnsweredGT(v int) predicate.UserStats {
	return predicate.UserStats(sql.FieldGT(FieldQuestionsAnswered, v))
}

// QuestionsAnsweredGTE applies the GTE predicate on the "questions_answered" field.
func QuestionsAnsweredGTE(v int) predicate.UserStats {
	return predicate.UserStats(sql.FieldGTE(FieldQuestionsAnswered, v))
}

// QuestionsAnsweredLT applies the LT predicate on the "questions_answered" field.
func QuestionsAnsweredLT(v int) predicate.UserStats {
	return predicate.UserStats(sql.FieldLT(FieldQuestionsAnswered, v))
}

// QuestionsAnsweredLTE applies the LTE predicate on the "questions_answered" field.
func QuestionsAnsweredLTE(v int) predicate.UserStats {
	return predicate.UserStats(sql.FieldLTE(FieldQuestionsAnswered, v))
}

// QuestionsCorrectEQ applies the EQ predicate on the "questions_correct" field.
func QuestionsCorrectEQ(v int) predicate.UserStats {
	return predicate.UserStats(sql.FieldEQ(FieldQuestionsCorrect, v))
}

// QuestionsCorrectNEQ applies the NEQ predicate on the "questions_correct" field.
func QuestionsCorrectNEQ(v int) predicate.UserStats {
	return predicate.UserStats(sql.FieldNEQ(FieldQuestionsCorrect, v))
}

// QuestionsCorrectIn applies the In predicate on the "questions_correct" field.
func QuestionsCorrectIn(vs ...int) predicate.UserStats {
	return predicate.UserStats(sql.FieldIn(FieldQuestionsCorrect, vs...))
}

// QuestionsCorrectNotIn applies the NotIn predicate on the "questions_correct" field.
func QuestionsCorrectNotIn(vs ...int) predicate.UserStats {
	return predicate.UserStats(sql.FieldNotIn(FieldQuestionsCorrect, vs...))
}

// QuestionsCorrectGT applies the GT predicate on the "questions_correct" field.
func QuestionsCorrectGT(v int) predicate.UserStats {
	return predicate.UserStats(sql.FieldGT(FieldQuestionsCorrect, v))
}

// QuestionsCorrectGTE applies the GTE predicate on the "questions_correct" field.
func QuestionsCorrectGTE(v int) predicate.UserStats {
	return predicate.UserStats(sql.FieldGTE(FieldQuestionsCorrect, v))
}

// QuestionsCorrectLT applies the LT predicate on the "questions_correct" field.
func QuestionsCorrectLT(v int) predicate.UserStats {
	return predicate.UserStats(sql.FieldLT(FieldQuestionsCorrect, v))
}

// QuestionsCorrectLTE applies the LTE predicate on the "questions_correct" field.
func QuestionsCorrectLTE(v int) predicate.UserStats {
	return predicate.UserStats(sql.FieldLTE(FieldQuestionsCorrect, v))
}

// WordsLearnedEQ applies the EQ predicate on the "words_learned" field.
func WordsLearnedEQ(v int) predicate.UserStats {
	return predicate.UserStats(sql.FieldEQ(FieldWordsLearned, v))
}

// WordsLearnedNEQ applies the NEQ predicate on the "words_learned" field.
func WordsLearnedNEQ(v int) predicate.UserStats {
	return predicate.UserStats(sql.FieldNEQ(FieldWordsLearned, v))
}

// WordsLearnedIn applies the In predicate on the "words_learned" field.
func WordsLearnedIn(vs ...int) predicate.UserStats {
	return predicate.UserStats(sql.FieldIn(FieldWordsLearned, vs...))
}

// WordsLearnedNotIn applies the NotIn predicate on the "words_learned" field.
func WordsLearnedNotIn(vs ...int) predicate.UserStats {
	return predicate.UserStats(sql.FieldNotIn(FieldWordsLearned, vs...))
}

// WordsLearnedGT applies the GT predicate on the "words_learned" field.
func WordsLearnedGT(v int) predicate.UserStats {
	return predicate.UserStats(sql.FieldGT(FieldWordsLearned, v))
}

// WordsLearnedGTE applies the GTE predicate on the "words_learned" field.
func WordsLearnedGTE(v int) predicate.UserStats {
	return predicate.UserStats(sql.FieldGTE(FieldWordsLearned, v))
}

// WordsLearnedLT applies the LT predicate on the "words_learned" field.
func WordsLearnedLT(v int) predicate.UserStats {
	return predicate.UserStats(sql.FieldLT(FieldWordsLearned, v))
}

// WordsLearnedLTE applies the LTE predicate on the "words_learned" field.
func WordsLearnedLTE(v int) predicate.UserStats {
	return predicate.UserStats(sql.FieldLTE(FieldWordsLearned, v))
}

// TotalStudyTimeMinutesEQ applies the EQ predicate on the "total_study_time_minutes" field.
func TotalStudyTimeMinutesEQ(v int) predicate.UserStats {
	return predicate.UserStats(sql.FieldEQ(FieldTotalStudyTimeMinutes, v))
}

// TotalStudyTimeMinutesNEQ applies the NEQ predicate on the "total_study_time_minutes" field.
func TotalStudyTimeMinutesNEQ(v int) predicate.UserStats {
	return predicate.UserStats(sql.FieldNEQ(FieldTotalStudyTimeMinutes, v))
}

// TotalStudyTimeMinutesIn applies the In predicate on the "total_study_time_minutes" field.
func TotalStudyTimeMinutesIn(vs ...int) predicate.UserStats {
	return predicate.UserStats(sql.FieldIn(FieldTotalStudyTimeMinutes, vs...))
}

// TotalStudyTimeMinutesNotIn applies the NotIn predicate on the "total_study_time_minutes" field.
func TotalStudyTimeMinutesNotIn(vs ...int) predicate.UserStats {
	return predicate.UserStats(sql.FieldNotIn(FieldTotalStudyTimeMinutes, vs...))
}

// TotalStudyTimeMinutesGT applies the GT predicate on the "total_study_time_minutes" field.
func TotalStudyTimeMinutesGT(v int) predicate.UserStats {
	return predicate.UserStats(sql.FieldGT(FieldTotalStudyTimeMinutes, v))
}

// TotalStudyTimeMinutesGTE applies the GTE predicate on the "total_study_time_minutes" field.
func TotalStudyTimeMinutesGTE(v int) predicate.UserStats {
	return predicate.UserStats(sql.FieldGTE(FieldTotalStudyTimeMinutes, v))
}

// TotalStudyTimeMinutesLT applies the LT predicate on the "total_study_time_minutes" field.
func TotalStudyTimeMinutesLT(v int) predicate.UserStats {
	return predicate.UserStats(sql.FieldLT(FieldTotalStudyTimeMinutes, v))
}

// TotalStudyTimeMinutesLTE applies the LTE predicate on the "total_study_time_minutes" field.
func TotalStudyTimeMinutesLTE(v int) predicate.UserStats {
	return predicate.UserStats(sql.FieldLTE(FieldTotalStudyTimeMinutes, v))
}

// StreakDaysEQ applies the EQ predicate on the "streak_days" field.
func StreakDaysEQ(v int) predicate.UserStats {
	return predicate.UserStats(sql.FieldEQ(FieldStreakDays, v))
}

// StreakDaysNEQ applies the NEQ predicate on the "streak_days" field.
func StreakDaysNEQ(v int) predicate.UserStats {
	return predicate.UserStats(sql.FieldNEQ(FieldStreakDays, v))
}

// StreakDaysIn applies the In predicate on the "streak_days" field.
func StreakDaysIn(vs ...int) predicate.UserStats {
	return predicate.UserStats(sql.FieldIn(FieldStreakDays, vs...))
}

// StreakDaysNotIn applies the NotIn predicate on the "streak_days" field.
func StreakDaysNotIn(vs ...int) predicate.UserStats {
	return predicate.UserStats(sql.FieldNotIn(FieldStreakDays, vs...))
}

// StreakDaysGT applies the GT predicate on the "streak_days" field.
func StreakDaysGT(v int) predicate.UserStats {
	return predicate.UserStats(sql.FieldGT(FieldStreakDays, v))
}

// StreakDaysGTE applies the GTE predicate on the "streak_days" field.
func StreakDaysGTE(v int) predicate.UserStats {
	return predicate.UserStats(sql.FieldGTE(FieldStreakDays, v))
}

// StreakDaysLT applies the LT predicate on the "streak_days" field.
func StreakDaysLT(v int) predicate.UserStats {
	return predicate.UserStats(sql.FieldLT(FieldStreakDays, v))
}

// StreakDaysLTE applies the LTE predicate on the "streak_days" field.
func StreakDaysLTE(v int) predicate.UserStats {
	return predicate.UserStats(sql.FieldLTE(FieldStreakDays, v))
}

// EnglishToFrenchAccuracyEQ applies the EQ predicate on the "english_to_french_accuracy" field.
func EnglishToFrenchAccuracyEQ(v float64) predicate.UserStats {
	return predicate.UserStats(sql.FieldEQ(FieldEnglishToFrenchAccuracy, v))
}

// EnglishToFrenchAccuracyNEQ applies the NEQ predicate on the "english_to_french_accuracy" field.
func EnglishToFrenchAccuracyNEQ(v float64) predicate.UserStats {
	return predicate.UserStats(sql.FieldNEQ(FieldEnglishToFrenchAccuracy, v))
}

// EnglishToFrenchAccuracyIn applies the In predicate on the "english_to_french_accuracy" field.
func EnglishToFrenchAccuracyIn(vs ...float64) predicate.UserStats {
	return predicate.UserStats(sql.FieldIn(FieldEnglishToFrenchAccuracy, vs...))
}

// EnglishToFrenchAccuracyNotIn applies the NotIn predicate on the "english_to_french_accuracy" field.
func EnglishToFrenchAccuracyNotIn(vs ...float64) predicate.UserStats {
	return predicate.UserStats(sql.FieldNotIn(FieldEnglishToFrenchAccuracy, vs...))
}

// EnglishToFrenchAccuracyGT applies the GT predicate on the "english_to_french_accuracy" field.
func EnglishToFrenchAccuracyGT(v float64) predicate.UserStats {
	return predicate.UserStats(sql.FieldGT(FieldEnglishToFrenchAccuracy, v))
}

// EnglishToFrenchAccuracyGTE applies the GTE predicate on the "english_to_french_accuracy" field.
func EnglishToFrenchAccuracyGTE(v float64) predicate.UserStats {
	return predicate.UserStats(sql.FieldGTE(FieldEnglishToFrenchAccuracy, v))
}

// EnglishToFrenchAccuracyLT applies the LT predicate on the "english_to_french_accuracy" field.
func EnglishToFrenchAccuracyLT(v float64) predicate.UserStats {
	return predicate.UserStats(sql.FieldLT(FieldEnglishToFrenchAccuracy, v))
}

// EnglishToFrenchAccuracyLTE applies the LTE predicate on the "english_to_french_accuracy" field.
func EnglishToFrenchAccuracyLTE(v float64) predicate.UserStats {
	return predicate.UserStats(sql.FieldLTE(FieldEnglishToFrenchAccuracy, v))
}

// FrenchToEnglishAccuracyEQ applies the EQ predicate on the "french_to_english_accuracy" field.
func FrenchToEnglishAccuracyEQ(v float64) predicate.UserStats {
	return predicate.UserStats(sql.FieldEQ(FieldFrenchToEnglishAccuracy, v))
}

// FrenchToEnglishAccuracyNEQ applies the NEQ predicate on the "french_to_english_accuracy" field.
func FrenchToEnglishAccuracyNEQ(v float64) predicate.UserStats {
	return predicate.UserStats(sql.FieldNEQ(FieldFrenchToEnglishAccuracy, v))
}

// FrenchToEnglishAccuracyIn applies the In predicate on the "french_to_english_accuracy" field.
func FrenchToEnglishAccuracyIn(vs ...float64) predicate.UserStats {
	return predicate.UserStats(sql.FieldIn(FieldFrenchToEnglishAccuracy, vs...))
}

// FrenchToEnglishAccuracyNotIn applies the NotIn predicate on the "french_to_english_accuracy" field.
func FrenchToEnglishAccuracyNotIn(vs ...float64) predicate.UserStats {
	return predicate.UserStats(sql.FieldNotIn(FieldFrenchToEnglishAccuracy, vs...))
}

// FrenchToEnglishAccuracyGT applies the GT predicate on the "french_to_english_accuracy" field.
func FrenchToEnglishAccuracyGT(v float64) predicate.UserStats {
	return predicate.UserStats(sql.FieldGT(FieldFrenchToEnglishAccuracy, v))
}

// FrenchToEnglishAccuracyGTE applies the GTE predicate on the "french_to_english_accuracy" field.
func FrenchToEnglishAccuracyGTE(v float64) predicate.UserStats {
	return predicate.UserStats(sql.FieldGTE(FieldFrenchToEnglishAccuracy, v))
}

// FrenchToEnglishAccuracyLT applies the LT predicate on the "french_to_english_accuracy" field.
func FrenchToEnglishAccuracyLT(v float64) predicate.UserStats {
	return predicate.UserStats(sql.FieldLT(FieldFrenchToEnglishAccuracy, v))
}

// FrenchToEnglishAccuracyLTE applies the LTE predicate on the "french_to_english_accuracy" field.
func FrenchToEnglishAccuracyLTE(v float64) predicate.UserStats {
	return predicate.UserStats(sql.FieldLTE(FieldFrenchToEnglishAccuracy, v))
}

// PronunciationAccuracyEQ applies the EQ predicate on the "pronunciation_accuracy" field.
func PronunciationAccuracyEQ(v float64) predicate.UserStats {
	return predicate.UserStats(sql.FieldEQ(FieldPronunciationAccuracy, v))
}

// PronunciationAccuracyNEQ applies the NEQ predicate on the "pronunciation_accuracy" field.
func PronunciationAccuracyNEQ(v float64) predicate.UserStats {
	return predicate.UserStats(sql.FieldNEQ(FieldPronunciationAccuracy, v))
}

// PronunciationAccuracyIn applies the In predicate on the "pronunciation_accuracy" field.
func PronunciationAccuracyIn(vs ...float64) predicate.UserStats {
	return predicate.UserStats(sql.FieldIn(FieldPronunciationAccuracy, vs...))
}

// PronunciationAccuracyNotIn applies the NotIn predicate on the "pronunciation_accuracy" field.
func PronunciationAccuracyNotIn(vs ...float64) predicate.UserStats {
	return predicate.UserStats(sql.FieldNotIn(FieldPronunciationAccuracy, vs...))
}

// PronunciationAccuracyGT applies the GT predicate on the "pronunciation_accuracy" field.
func PronunciationAccuracyGT(v float64) predicate.UserStats {
	return predicate.UserStats(sql.FieldGT(FieldPronunciationAccuracy, v))
}

// PronunciationAccuracyGTE applies the GTE predicate on the "pronunciation_accuracy" field.
func PronunciationAccuracyGTE(v float64) predicate.UserStats {
	return predicate.UserStats(sql.FieldGTE(FieldPronunciationAccuracy, v))
}

// PronunciationAccuracyLT applies the LT predicate on the "pronunciation_accuracy" field.
func PronunciationAccuracyLT(v float64) predicate.UserStats {
	return predicate.UserStats(sql.FieldLT(FieldPronunciationAccuracy, v))
}

// PronunciationAccuracyLTE applies the LTE predicate on the "pronunciation_accuracy" field.
func PronunciationAccuracyLTE(v float64) predicate.UserStats {
	return predicate.UserStats(sql.FieldLTE(FieldPronunciationAccuracy, v))
}

// AverageResponseTimeMsEQ applies the EQ predicate on the "average_response_time_ms" field.
func AverageResponseTimeMsEQ(v int) predicate.UserStats {
	return predicate.UserStats(sql.FieldEQ(FieldAverageResponseTimeMs, v))
}

// AverageResponseTimeMsNEQ applies the NEQ predicate on the "average_response_time_ms" field.
func AverageResponseTimeMsNEQ(v int) predicate.UserStats {
	return predicate.UserStats(sql.FieldNEQ(FieldAverageResponseTimeMs, v))
}

// AverageResponseTimeMsIn applies the In predicate on the "average_response_time_ms" field.
func AverageResponseTimeMsIn(vs ...int) predicate.UserStats {
	return predicate.UserStats(sql.FieldIn(FieldAverageResponseTimeMs, vs...))
}

// AverageResponseTimeMsNotIn applies the NotIn predicate on the "average_response_time_ms" field.
func AverageResponseTimeMsNotIn(vs ...int) predicate.UserStats {
	return predicate.UserStats(sql.FieldNotIn(FieldAverageResponseTimeMs, vs...))
}

// AverageResponseTimeMsGT applies the GT predicate on the "average_response_time_ms" field.
func AverageResponseTimeMsGT(v int) predicate.UserStats {
	return predicate.UserStats(sql.FieldGT(FieldAverageResponseTimeMs, v))
}

// AverageResponseTimeMsGTE applies the GTE predicate on the "average_response_time_ms" field.
func AverageResponseTimeMsGTE(v int) predicate.UserStats {
	return predicate.UserStats(sql.FieldGTE(FieldAverageResponseTimeMs, v))
}

// AverageResponseTimeMsLT applies the LT predicate on the "average_response_time_ms" field.
func AverageResponseTimeMsLT(v int) predicate.UserStats {
	return predicate.UserStats(sql.FieldLT(FieldAverageResponseTimeMs, v))
}

// AverageResponseTimeMsLTE applies the LTE predicate on the "average_response_time_ms" field.
func AverageResponseTimeMsLTE(v int) predicate.UserStats {
	return predicate.UserStats(sql.FieldLTE(FieldAverageResponseTimeMs, v))
}

// WordsPerMinuteEQ applies the EQ predicate on the "words_per_minute" field.
func WordsPerMinuteEQ(v float64) predicate.UserStats {
	return predicate.UserStats(sql.FieldEQ(FieldWordsPerMinute, v))
}

// WordsPerMinuteNEQ applies the NEQ predicate on the "words_per_minute" field.
func WordsPerMinuteNEQ(v float64) predicate.UserStats {
	return predicate.UserStats(sql.FieldNEQ(FieldWordsPerMinute, v))
}

// WordsPerMinuteIn applies the In predicate on the "words_per_minute" field.
func WordsPerMinuteIn(vs ...float64) predicate.UserStats {
	return predicate.UserStats(sql.FieldIn(FieldWordsPerMinute, vs...))
}

// WordsPerMinuteNotIn applies the NotIn predicate on the "words_per_minute" field.
func WordsPerMinuteNotIn(vs ...float64) predicate.UserStats {
	return predicate.UserStats(sql.FieldNotIn(FieldWordsPerMinute, vs...))
}

// WordsPerMinuteGT applies the GT predicate on the "words_per_minute" field.
func WordsPerMinuteGT(v float64) predicate.UserStats {
	return predicate.UserStats(sql.FieldGT(FieldWordsPerMinute, v))
}

// WordsPerMinuteGTE applies the GTE predicate on the "words_per_minute" field.
func WordsPerMinuteGTE(v float64) predicate.UserStats {
	return predicate.UserStats(sql.FieldGTE(FieldWordsPerMinute, v))
}

// WordsPerMinuteLT applies the LT predicate on the "words_per_minute" field.
func WordsPerMinuteLT(v float64) predicate.UserStats {
	return predicate.UserStats(sql.FieldLT(FieldWordsPerMinute, v))
}

// WordsPerMinuteLTE applies the LTE predicate on the "words_per_minute" field.
func WordsPerMinuteLTE(v float64) predicate.UserStats {
	return predicate.UserStats(sql.FieldLTE(FieldWordsPerMinute, v))
}

// StrengthsIsNil applies the IsNil predicate on the "strengths" field.
func StrengthsIsNil() predicate.UserStats {
	return predicate.UserStats(sql.FieldIsNull(FieldStrengths))
}

// StrengthsNotNil applies the NotNil predicate on the "strengths" field.
func StrengthsNotNil() predicate.UserStats {
	return predicate.UserStats(sql.FieldNotNull(FieldStrengths))
}

// WeaknessesIsNil applies the IsNil predicate on the "weaknesses" field.
func WeaknessesIsNil() predicate.UserStats {
	return predicate.UserStats(sql.FieldIsNull(FieldWeaknesses))
}

// WeaknessesNotNil applies the NotNil predicate on the "weaknesses" field.
func WeaknessesNotNil() predicate.UserStats {
	return predicate.UserStats(sql.FieldNotNull(FieldWeaknesses))
}

// RecommendationsEQ applies the EQ predicate on the "recommendations" field.
func RecommendationsEQ(v string) predicate.UserStats {
	return predicate.UserStats(sql.FieldEQ(FieldRecommendations, v))
}

// RecommendationsNEQ applies the NEQ predicate on the "recommendations" field.
func RecommendationsNEQ(v string) predicate.UserStats {
	return predicate.UserStats(sql.FieldNEQ(FieldRecommendations, v))
}

// RecommendationsIn applies the In predicate on the "recommendations" field.
func RecommendationsIn(vs ...string) predicate.UserStats {
	return predicate.UserStats(sql.FieldIn(FieldRecommendations, vs...))
}

// RecommendationsNotIn applies the NotIn predicate on the "recommendations" field.
func RecommendationsNotIn(vs ...string) predicate.UserStats {
	return predicate.UserStats(sql.FieldNotIn(FieldRecommendations, vs...))
}

// RecommendationsGT applies the GT predicate on the "recommendations" field.
func RecommendationsGT(v string) predicate.UserStats {
	return predicate.UserStats(sql.FieldGT(FieldRecommendations, v))
}

// RecommendationsGTE applies the GTE predicate on the "recommendations" field.
func RecommendationsGTE(v string) predicate.UserStats {
	return predicate.UserStats(sql.FieldGTE(FieldRecommendations, v))
}

// RecommendationsLT applies the LT predicate on the "recommendations" field.
func RecommendationsLT(v string) predicate.UserStats {
	return predicate.UserStats(sql.FieldLT(FieldRecommendations, v))
}

// RecommendationsLTE applies the LTE predicate on the "recommendations" field.
func RecommendationsLTE(v string) predicate.UserStats {
	return predicate.UserStats(sql.FieldLTE(FieldRecommendations, v))
}

// RecommendationsContains applies the Contains predicate on the "recommendations" field.
func RecommendationsContains(v string) predicate.UserStats {
	return predicate.UserStats(sql.FieldContains(FieldRecommendations, v))
}

// RecommendationsHasPrefix applies the HasPrefix predicate on the "recommendations" field.
func RecommendationsHasPrefix(v string) predicate.UserStats {
	return predicate.UserStats(sql.FieldHasPrefix(FieldRecommendations, v))
}

// RecommendationsHasSuffix applies the HasSuffix predicate on the "recommendations" field.
func RecommendationsHasSuffix(v string) predicate.UserStats {
	return predicate.UserStats(sql.FieldHasSuffix(FieldRecommendations, v))
}

// RecommendationsIsNil applies the IsNil predicate on the "recommendations" field.
func RecommendationsIsNil() predicate.UserStats {
	return predicate.UserStats(sql.FieldIsNull(FieldRecommendations))
}

// RecommendationsNotNil applies the NotNil predicate on the "recommendations" field.
func RecommendationsNotNil() predicate.UserStats {
	return predicate.UserStats(sql.FieldNotNull(FieldRecommendations))
}

// RecommendationsEqualFold applies the EqualFold predicate on the "recommendations" field.
func RecommendationsEqualFold(v string) predicate.UserStats {
	return predicate.UserStats(sql.FieldEqualFold(FieldRecommendations, v))
}

// RecommendationsContainsFold applies the ContainsFold predicate on the "recommendations" field.
func RecommendationsContainsFold(v string) predicate.UserStats {
	return predicate.UserStats(sql.FieldContainsFold(FieldRecommendations, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UserStats {
	return predicate.UserStats(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UserStats {
	return predicate.UserStats(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UserStats {
	return predicate.UserStats(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserStats {
	return predicate.UserStats(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UserStats {
	return predicate.UserStats(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UserStats {
	return predicate.UserStats(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UserStats {
	return predicate.UserStats(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UserStats {
	return predicate.UserStats(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.UserStats {
	return predicate.UserStats(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.UserStats {
	return predicate.UserStats(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.UserStats {
	return predicate.UserStats(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.UserStats {
	return predicate.UserStats(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.UserStats {
	return predicate.UserStats(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.UserStats {
	return predicate.UserStats(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.UserStats {
	return predicate.UserStats(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.UserStats {
	return predicate.UserStats(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserStats {
	return predicate.UserStats(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserStats {
	return predicate.UserStats(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserStats) predicate.UserStats {
	return predicate.UserStats(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserStats) predicate.UserStats {
	return predicate.UserStats(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserStats) predicate.UserStats {
	return predicate.UserStats(sql.NotPredicates(p))
}
