// Code generated by ent, DO NOT EDIT.

package userstats

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the userstats type in the database.
	Label = "user_stats"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStatDate holds the string denoting the stat_date field in the database.
	FieldStatDate = "stat_date"
	// FieldQuestionsAnswered holds the string denoting the questions_answered field in the database.
	FieldQuestionsAnswered = "questions_answered"
	// FieldQuestionsCorrect holds the string denoting the questions_correct field in the database.
	FieldQuestionsCorrect = "questions_correct"
	// FieldWordsLearned holds the string denoting the words_learned field in the database.
	FieldWordsLearned = "words_learned"
	// FieldTotalStudyTimeMinutes holds the string denoting the total_study_time_minutes field in the database.
	FieldTotalStudyTimeMinutes = "total_study_time_minutes"
	// FieldStreakDays holds the string denoting the streak_days field in the database.
	FieldStreakDays = "streak_days"
	// FieldEnglishToFrenchAccuracy holds the string denoting the english_to_french_accuracy field in the database.
	FieldEnglishToFrenchAccuracy = "english_to_french_accuracy"
	// FieldFrenchToEnglishAccuracy holds the string denoting the french_to_english_accuracy field in the database.
	FieldFrenchToEnglishAccuracy = "french_to_english_accuracy"
	// FieldPronunciationAccuracy holds the string denoting the pronunciation_accuracy field in the database.
	FieldPronunciationAccuracy = "pronunciation_accuracy"
	// FieldAverageResponseTimeMs holds the string denoting the average_response_time_ms field in the database.
	FieldAverageResponseTimeMs = "average_response_time_ms"
	// FieldWordsPerMinute holds the string denoting the words_per_minute field in the database.
	FieldWordsPerMinute = "words_per_minute"
	// FieldStrengths holds the string denoting the strengths field in the database.
	FieldStrengths = "strengths"
	// FieldWeaknesses holds the string denoting the weaknesses field in the database.
	FieldWeaknesses = "weaknesses"
	// FieldRecommendations holds the string denoting the recommendations field in the database.
	FieldRecommendations = "recommendations"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the userstats in the database.
	Table = "user_stats"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "user_stats"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_user_stats"
)

// Columns holds all SQL columns for userstats fields.
var Columns = []string{
	FieldID,
	FieldStatDate,
	FieldQuestionsAnswered,
	FieldQuestionsCorrect,
	FieldWordsLearned,
	FieldTotalStudyTimeMinutes,
	FieldStreakDays,
	FieldEnglishToFrenchAccuracy,
	FieldFrenchToEnglishAccuracy,
	FieldPronunciationAccuracy,
	FieldAverageResponseTimeMs,
	FieldWordsPerMinute,
	FieldStrengths,
	FieldWeaknesses,
	FieldRecommendations,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "user_stats"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_user_stats",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultStatDate holds the default value on creation for the "stat_date" field.
	DefaultStatDate func() time.Time
	// DefaultQuestionsAnswered holds the default value on creation for the "questions_answered" field.
	DefaultQuestionsAnswered int
	// DefaultQuestionsCorrect holds the default value on creation for the "questions_correct" field.
	DefaultQuestionsCorrect int
	// DefaultWordsLearned holds the default value on creation for the "words_learned" field.
	DefaultWordsLearned int
	// DefaultTotalStudyTimeMinutes holds the default value on creation for the "total_study_time_minutes" field.
	DefaultTotalStudyTimeMinutes int
	// DefaultStreakDays holds the default value on creation for the "streak_days" field.
	DefaultStreakDays int
	// DefaultEnglishToFrenchAccuracy holds the default value on creation for the "english_to_french_accuracy" field.
	DefaultEnglishToFrenchAccuracy float64
	// DefaultFrenchToEnglishAccuracy holds the default value on creation for the "french_to_english_accuracy" field.
	DefaultFrenchToEnglishAccuracy float64
	// DefaultPronunciationAccuracy holds the default value on creation for the "pronunciation_accuracy" field.
	DefaultPronunciationAccuracy float64
	// DefaultAverageResponseTimeMs holds the default value on creation for the "average_response_time_ms" field.
	DefaultAverageResponseTimeMs int
	// DefaultWordsPerMinute holds the default value on creation for the "words_per_minute" field.
	DefaultWordsPerMinute float64
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the UserStats queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStatDate orders the results by the stat_date field.
func ByStatDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatDate, opts...).ToFunc()
}

// ByQuestionsAnswered orders the results by the questions_answered field.
func ByQuestionsAnswered(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuestionsAnswered, opts...).ToFunc()
}

// ByQuestionsCorrect orders the results by the questions_correct field.
func ByQuestionsCorrect(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuestionsCorrect, opts...).ToFunc()
}

// ByWordsLearned orders the results by the words_learned field.
func ByWordsLearned(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWordsLearned, opts...).ToFunc()
}

// ByTotalStudyTimeMinutes orders the results by the total_study_time_minutes field.
func ByTotalStudyTimeMinutes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalStudyTimeMinutes, opts...).ToFunc()
}

// ByStreakDays orders the results by the streak_days field.
func ByStreakDays(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStreakDays, opts...).ToFunc()
}

// ByEnglishToFrenchAccuracy orders the results by the english_to_french_accuracy field.
func ByEnglishToFrenchAccuracy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnglishToFrenchAccuracy, opts...).ToFunc()
}

// ByFrenchToEnglishAccuracy orders the results by the french_to_english_accuracy field.
func ByFrenchToEnglishAccuracy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFrenchToEnglishAccuracy, opts...).ToFunc()
}

// ByPronunciationAccuracy orders the results by the pronunciation_accuracy field.
func ByPronunciationAccuracy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPronunciationAccuracy, opts...).ToFunc()
}

// ByAverageResponseTimeMs orders the results by the average_response_time_ms field.
func ByAverageResponseTimeMs(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAverageResponseTimeMs, opts...).ToFunc()
}

// ByWordsPerMinute orders the results by the words_per_minute field.
func ByWordsPerMinute(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWordsPerMinute, opts...).ToFunc()
}

// ByRecommendations orders the results by the recommendations field.
func ByRecommendations(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRecommendations, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
