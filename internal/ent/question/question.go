// Code generated by ent, DO NOT EDIT.

package question

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the question type in the database.
	Label = "question"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldQuestionType holds the string denoting the question_type field in the database.
	FieldQuestionType = "question_type"
	// FieldQuestionText holds the string denoting the question_text field in the database.
	FieldQuestionText = "question_text"
	// FieldCorrectAnswer holds the string denoting the correct_answer field in the database.
	FieldCorrectAnswer = "correct_answer"
	// FieldDifficultyLevel holds the string denoting the difficulty_level field in the database.
	FieldDifficultyLevel = "difficulty_level"
	// FieldGeneratedAt holds the string denoting the generated_at field in the database.
	FieldGeneratedAt = "generated_at"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldOptions holds the string denoting the options field in the database.
	FieldOptions = "options"
	// FieldHints holds the string denoting the hints field in the database.
	FieldHints = "hints"
	// EdgeWord holds the string denoting the word edge name in mutations.
	EdgeWord = "word"
	// EdgeQuestionReviews holds the string denoting the question_reviews edge name in mutations.
	EdgeQuestionReviews = "question_reviews"
	// EdgeQuestionAttempts holds the string denoting the question_attempts edge name in mutations.
	EdgeQuestionAttempts = "question_attempts"
	// EdgePronunciationAttempts holds the string denoting the pronunciation_attempts edge name in mutations.
	EdgePronunciationAttempts = "pronunciation_attempts"
	// Table holds the table name of the question in the database.
	Table = "questions"
	// WordTable is the table that holds the word relation/edge.
	WordTable = "questions"
	// WordInverseTable is the table name for the Word entity.
	// It exists in this package in order to avoid circular dependency with the "word" package.
	WordInverseTable = "words"
	// WordColumn is the table column denoting the word relation/edge.
	WordColumn = "word_questions"
	// QuestionReviewsTable is the table that holds the question_reviews relation/edge.
	QuestionReviewsTable = "question_reviews"
	// QuestionReviewsInverseTable is the table name for the QuestionReview entity.
	// It exists in this package in order to avoid circular dependency with the "questionreview" package.
	QuestionReviewsInverseTable = "question_reviews"
	// QuestionReviewsColumn is the table column denoting the question_reviews relation/edge.
	QuestionReviewsColumn = "question_question_reviews"
	// QuestionAttemptsTable is the table that holds the question_attempts relation/edge.
	QuestionAttemptsTable = "question_attempts"
	// QuestionAttemptsInverseTable is the table name for the QuestionAttempt entity.
	// It exists in this package in order to avoid circular dependency with the "questionattempt" package.
	QuestionAttemptsInverseTable = "question_attempts"
	// QuestionAttemptsColumn is the table column denoting the question_attempts relation/edge.
	QuestionAttemptsColumn = "question_question_attempts"
	// PronunciationAttemptsTable is the table that holds the pronunciation_attempts relation/edge.
	PronunciationAttemptsTable = "pronunciation_attempts"
	// PronunciationAttemptsInverseTable is the table name for the PronunciationAttempt entity.
	// It exists in this package in order to avoid circular dependency with the "pronunciationattempt" package.
	PronunciationAttemptsInverseTable = "pronunciation_attempts"
	// PronunciationAttemptsColumn is the table column denoting the pronunciation_attempts relation/edge.
	PronunciationAttemptsColumn = "question_pronunciation_attempts"
)

// Columns holds all SQL columns for question fields.
var Columns = []string{
	FieldID,
	FieldQuestionType,
	FieldQuestionText,
	FieldCorrectAnswer,
	FieldDifficultyLevel,
	FieldGeneratedAt,
	FieldIsActive,
	FieldOptions,
	FieldHints,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "questions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"word_questions",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// QuestionTypeValidator is a validator for the "question_type" field. It is called by the builders before save.
	QuestionTypeValidator func(string) error
	// QuestionTextValidator is a validator for the "question_text" field. It is called by the builders before save.
	QuestionTextValidator func(string) error
	// CorrectAnswerValidator is a validator for the "correct_answer" field. It is called by the builders before save.
	CorrectAnswerValidator func(string) error
	// DifficultyLevelValidator is a validator for the "difficulty_level" field. It is called by the builders before save.
	DifficultyLevelValidator func(string) error
	// DefaultGeneratedAt holds the default value on creation for the "generated_at" field.
	DefaultGeneratedAt func() time.Time
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
)

// OrderOption defines the ordering options for the Question queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByQuestionType orders the results by the question_type field.
func ByQuestionType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuestionType, opts...).ToFunc()
}

// ByQuestionText orders the results by the question_text field.
func ByQuestionText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuestionText, opts...).ToFunc()
}

// ByCorrectAnswer orders the results by the correct_answer field.
func ByCorrectAnswer(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCorrectAnswer, opts...).ToFunc()
}

// ByDifficultyLevel orders the results by the difficulty_level field.
func ByDifficultyLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDifficultyLevel, opts...).ToFunc()
}

// ByGeneratedAt orders the results by the generated_at field.
func ByGeneratedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGeneratedAt, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByHints orders the results by the hints field.
func ByHints(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHints, opts...).ToFunc()
}

// ByWordField orders the results by word field.
func ByWordField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWordStep(), sql.OrderByField(field, opts...))
	}
}

// ByQuestionReviewsCount orders the results by question_reviews count.
func ByQuestionReviewsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newQuestionReviewsStep(), opts...)
	}
}

// ByQuestionReviews orders the results by question_reviews terms.
func ByQuestionReviews(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newQuestionReviewsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByQuestionAttemptsCount orders the results by question_attempts count.
func ByQuestionAttemptsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newQuestionAttemptsStep(), opts...)
	}
}

// ByQuestionAttempts orders the results by question_attempts terms.
func ByQuestionAttempts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newQuestionAttemptsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPronunciationAttemptsCount orders the results by pronunciation_attempts count.
func ByPronunciationAttemptsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPronunciationAttemptsStep(), opts...)
	}
}

// ByPronunciationAttempts orders the results by pronunciation_attempts terms.
func ByPronunciationAttempts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPronunciationAttemptsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newWordStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WordInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, WordTable, WordColumn),
	)
}
func newQuestionReviewsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(QuestionReviewsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, QuestionReviewsTable, QuestionReviewsColumn),
	)
}
func newQuestionAttemptsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(QuestionAttemptsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, QuestionAttemptsTable, QuestionAttemptsColumn),
	)
}
func newPronunciationAttemptsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PronunciationAttemptsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PronunciationAttemptsTable, PronunciationAttemptsColumn),
	)
}
