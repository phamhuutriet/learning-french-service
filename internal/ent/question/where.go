// Code generated by ent, DO NOT EDIT.

package question

import (
	"learning-french-service/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldID, id))
}

// QuestionType applies equality check predicate on the "question_type" field. It's identical to QuestionTypeEQ.
func QuestionType(v string) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldQuestionType, v))
}

// QuestionText applies equality check predicate on the "question_text" field. It's identical to QuestionTextEQ.
func QuestionText(v string) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldQuestionText, v))
}

// CorrectAnswer applies equality check predicate on the "correct_answer" field. It's identical to CorrectAnswerEQ.
func CorrectAnswer(v string) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldCorrectAnswer, v))
}

// DifficultyLevel applies equality check predicate on the "difficulty_level" field. It's identical to DifficultyLevelEQ.
func DifficultyLevel(v string) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldDifficultyLevel, v))
}

// GeneratedAt applies equality check predicate on the "generated_at" field. It's identical to GeneratedAtEQ.
func GeneratedAt(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldGeneratedAt, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldIsActive, v))
}

// Hints applies equality check predicate on the "hints" field. It's identical to HintsEQ.
func Hints(v string) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldHints, v))
}

// QuestionTypeEQ applies the EQ predicate on the "question_type" field.
func QuestionTypeEQ(v string) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldQuestionType, v))
}

// QuestionTypeNEQ applies the NEQ predicate on the "question_type" field.
func QuestionTypeNEQ(v string) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldQuestionType, v))
}

// QuestionTypeIn applies the In predicate on the "question_type" field.
func QuestionTypeIn(vs ...string) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldQuestionType, vs...))
}

// QuestionTypeNotIn applies the NotIn predicate on the "question_type" field.
func QuestionTypeNotIn(vs ...string) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldQuestionType, vs...))
}

// QuestionTypeGT applies the GT predicate on the "question_type" field.
func QuestionTypeGT(v string) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldQuestionType, v))
}

// QuestionTypeGTE applies the GTE predicate on the "question_type" field.
func QuestionTypeGTE(v string) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldQuestionType, v))
}

// QuestionTypeLT applies the LT predicate on the "question_type" field.
func QuestionTypeLT(v string) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldQuestionType, v))
}

// QuestionTypeLTE applies the LTE predicate on the "question_type" field.
func QuestionTypeLTE(v string) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldQuestionType, v))
}

// QuestionTypeContains applies the Contains predicate on the "question_type" field.
func QuestionTypeContains(v string) predicate.Question {
	return predicate.Question(sql.FieldContains(FieldQuestionType, v))
}

// QuestionTypeHasPrefix applies the HasPrefix predicate on the "question_type" field.
func QuestionTypeHasPrefix(v string) predicate.Question {
	return predicate.Question(sql.FieldHasPrefix(FieldQuestionType, v))
}

// QuestionTypeHasSuffix applies the HasSuffix predicate on the "question_type" field.
func QuestionTypeHasSuffix(v string) predicate.Question {
	return predicate.Question(sql.FieldHasSuffix(FieldQuestionType, v))
}

// QuestionTypeEqualFold applies the EqualFold predicate on the "question_type" field.
func QuestionTypeEqualFold(v string) predicate.Question {
	return predicate.Question(sql.FieldEqualFold(FieldQuestionType, v))
}

// QuestionTypeContainsFold applies the ContainsFold predicate on the "question_type" field.
func QuestionTypeContainsFold(v string) predicate.Question {
	return predicate.Question(sql.FieldContainsFold(FieldQuestionType, v))
}

// QuestionTextEQ applies the EQ predicate on the "question_text" field.
func QuestionTextEQ(v string) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldQuestionText, v))
}

// QuestionTextNEQ applies the NEQ predicate on the "question_text" field.
func QuestionTextNEQ(v string) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldQuestionText, v))
}

// QuestionTextIn applies the In predicate on the "question_text" field.
func QuestionTextIn(vs ...string) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldQuestionText, vs...))
}

// QuestionTextNotIn applies the NotIn predicate on the "question_text" field.
func QuestionTextNotIn(vs ...string) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldQuestionText, vs...))
}

// QuestionTextGT applies the GT predicate on the "question_text" field.
func QuestionTextGT(v string) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldQuestionText, v))
}

// QuestionTextGTE applies the GTE predicate on the "question_text" field.
func QuestionTextGTE(v string) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldQuestionText, v))
}

// QuestionTextLT applies the LT predicate on the "question_text" field.
func QuestionTextLT(v string) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldQuestionText, v))
}

// QuestionTextLTE applies the LTE predicate on the "question_text" field.
func QuestionTextLTE(v string) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldQuestionText, v))
}

// QuestionTextContains applies the Contains predicate on the "question_text" field.
func QuestionTextContains(v string) predicate.Question {
	return predicate.Question(sql.FieldContains(FieldQuestionText, v))
}

// QuestionTextHasPrefix applies the HasPrefix predicate on the "question_text" field.
func QuestionTextHasPrefix(v string) predicate.Question {
	return predicate.Question(sql.FieldHasPrefix(FieldQuestionText, v))
}

// QuestionTextHasSuffix applies the HasSuffix predicate on the "question_text" field.
func QuestionTextHasSuffix(v string) predicate.Question {
	return predicate.Question(sql.FieldHasSuffix(FieldQuestionText, v))
}

// QuestionTextEqualFold applies the EqualFold predicate on the "question_text" field.
func QuestionTextEqualFold(v string) predicate.Question {
	return predicate.Question(sql.FieldEqualFold(FieldQuestionText, v))
}

// QuestionTextContainsFold applies the ContainsFold predicate on the "question_text" field.
func QuestionTextContainsFold(v string) predicate.Question {
	return predicate.Question(sql.FieldContainsFold(FieldQuestionText, v))
}

// CorrectAnswerEQ applies the EQ predicate on the "correct_answer" field.
func CorrectAnswerEQ(v string) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldCorrectAnswer, v))
}

// CorrectAnswerNEQ applies the NEQ predicate on the "correct_answer" field.
func CorrectAnswerNEQ(v string) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldCorrectAnswer, v))
}

// CorrectAnswerIn applies the In predicate on the "correct_answer" field.
func CorrectAnswerIn(vs ...string) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldCorrectAnswer, vs...))
}

// CorrectAnswerNotIn applies the NotIn predicate on the "correct_answer" field.
func CorrectAnswerNotIn(vs ...string) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldCorrectAnswer, vs...))
}

// CorrectAnswerGT applies the GT predicate on the "correct_answer" field.
func CorrectAnswerGT(v string) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldCorrectAnswer, v))
}

// CorrectAnswerGTE applies the GTE predicate on the "correct_answer" field.
func CorrectAnswerGTE(v string) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldCorrectAnswer, v))
}

// CorrectAnswerLT applies the LT predicate on the "correct_answer" field.
func CorrectAnswerLT(v string) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldCorrectAnswer, v))
}

// CorrectAnswerLTE applies the LTE predicate on the "correct_answer" field.
func CorrectAnswerLTE(v string) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldCorrectAnswer, v))
}

// CorrectAnswerContains applies the Contains predicate on the "correct_answer" field.
func CorrectAnswerContains(v string) predicate.Question {
	return predicate.Question(sql.FieldContains(FieldCorrectAnswer, v))
}

// CorrectAnswerHasPrefix applies the HasPrefix predicate on the "correct_answer" field.
func CorrectAnswerHasPrefix(v string) predicate.Question {
	return predicate.Question(sql.FieldHasPrefix(FieldCorrectAnswer, v))
}

// CorrectAnswerHasSuffix applies the HasSuffix predicate on the "correct_answer" field.
func CorrectAnswerHasSuffix(v string) predicate.Question {
	return predicate.Question(sql.FieldHasSuffix(FieldCorrectAnswer, v))
}

// CorrectAnswerEqualFold applies the EqualFold predicate on the "correct_answer" field.
func CorrectAnswerEqualFold(v string) predicate.Question {
	return predicate.Question(sql.FieldEqualFold(FieldCorrectAnswer, v))
}

// CorrectAnswerContainsFold applies the ContainsFold predicate on the "correct_answer" field.
func CorrectAnswerContainsFold(v string) predicate.Question {
	return predicate.Question(sql.FieldContainsFold(FieldCorrectAnswer, v))
}

// DifficultyLevelEQ applies the EQ predicate on the "difficulty_level" field.
func DifficultyLevelEQ(v string) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldDifficultyLevel, v))
}

// DifficultyLevelNEQ applies the NEQ predicate on the "difficulty_level" field.
func DifficultyLevelNEQ(v string) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldDifficultyLevel, v))
}

// DifficultyLevelIn applies the In predicate on the "difficulty_level" field.
func DifficultyLevelIn(vs ...string) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldDifficultyLevel, vs...))
}

// DifficultyLevelNotIn applies the NotIn predicate on the "difficulty_level" field.
func DifficultyLevelNotIn(vs ...string) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldDifficultyLevel, vs...))
}

// DifficultyLevelGT applies the GT predicate on the "difficulty_level" field.
func DifficultyLevelGT(v string) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldDifficultyLevel, v))
}

// DifficultyLevelGTE applies the GTE predicate on the "difficulty_level" field.
func DifficultyLevelGTE(v string) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldDifficultyLevel, v))
}

// DifficultyLevelLT applies the LT predicate on the "difficulty_level" field.
func DifficultyLevelLT(v string) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldDifficultyLevel, v))
}

// DifficultyLevelLTE applies the LTE predicate on the "difficulty_level" field.
func DifficultyLevelLTE(v string) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldDifficultyLevel, v))
}

// DifficultyLevelContains applies the Contains predicate on the "difficulty_level" field.
func DifficultyLevelContains(v string) predicate.Question {
	return predicate.Question(sql.FieldContains(FieldDifficultyLevel, v))
}

// DifficultyLevelHasPrefix applies the HasPrefix predicate on the "difficulty_level" field.
func DifficultyLevelHasPrefix(v string) predicate.Question {
	return predicate.Question(sql.FieldHasPrefix(FieldDifficultyLevel, v))
}

// DifficultyLevelHasSuffix applies the HasSuffix predicate on the "difficulty_level" field.
func DifficultyLevelHasSuffix(v string) predicate.Question {
	return predicate.Question(sql.FieldHasSuffix(FieldDifficultyLevel, v))
}

// DifficultyLevelIsNil applies the IsNil predicate on the "difficulty_level" field.
func DifficultyLevelIsNil() predicate.Question {
	return predicate.Question(sql.FieldIsNull(FieldDifficultyLevel))
}

// DifficultyLevelNotNil applies the NotNil predicate on the "difficulty_level" field.
func DifficultyLevelNotNil() predicate.Question {
	return predicate.Question(sql.FieldNotNull(FieldDifficultyLevel))
}

// DifficultyLevelEqualFold applies the EqualFold predicate on the "difficulty_level" field.
func DifficultyLevelEqualFold(v string) predicate.Question {
	return predicate.Question(sql.FieldEqualFold(FieldDifficultyLevel, v))
}

// DifficultyLevelContainsFold applies the ContainsFold predicate on the "difficulty_level" field.
func DifficultyLevelContainsFold(v string) predicate.Question {
	return predicate.Question(sql.FieldContainsFold(FieldDifficultyLevel, v))
}

// GeneratedAtEQ applies the EQ predicate on the "generated_at" field.
func GeneratedAtEQ(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldGeneratedAt, v))
}

// GeneratedAtNEQ applies the NEQ predicate on the "generated_at" field.
func GeneratedAtNEQ(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldGeneratedAt, v))
}

// GeneratedAtIn applies the In predicate on the "generated_at" field.
func GeneratedAtIn(vs ...time.Time) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldGeneratedAt, vs...))
}

// GeneratedAtNotIn applies the NotIn predicate on the "generated_at" field.
func GeneratedAtNotIn(vs ...time.Time) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldGeneratedAt, vs...))
}

// GeneratedAtGT applies the GT predicate on the "generated_at" field.
func GeneratedAtGT(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldGeneratedAt, v))
}

// GeneratedAtGTE applies the GTE predicate on the "generated_at" field.
func GeneratedAtGTE(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldGeneratedAt, v))
}

// GeneratedAtLT applies the LT predicate on the "generated_at" field.
func GeneratedAtLT(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldGeneratedAt, v))
}

// GeneratedAtLTE applies the LTE predicate on the "generated_at" field.
func GeneratedAtLTE(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldGeneratedAt, v))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldIsActive, v))
}

// OptionsIsNil applies the IsNil predicate on the "options" field.
func OptionsIsNil() predicate.Question {
	return predicate.Question(sql.FieldIsNull(FieldOptions))
}

// OptionsNotNil applies the NotNil predicate on the "options" field.
func OptionsNotNil() predicate.Question {
	return predicate.Question(sql.FieldNotNull(FieldOptions))
}

// HintsEQ applies the EQ predicate on the "hints" field.
func HintsEQ(v string) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldHints, v))
}

// HintsNEQ applies the NEQ predicate on the "hints" field.
func HintsNEQ(v string) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldHints, v))
}

// HintsIn applies the In predicate on the "hints" field.
func HintsIn(vs ...string) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldHints, vs...))
}

// HintsNotIn applies the NotIn predicate on the "hints" field.
func HintsNotIn(vs ...string) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldHints, vs...))
}

// HintsGT applies the GT predicate on the "hints" field.
func HintsGT(v string) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldHints, v))
}

// HintsGTE applies the GTE predicate on the "hints" field.
func HintsGTE(v string) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldHints, v))
}

// HintsLT applies the LT predicate on the "hints" field.
func HintsLT(v string) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldHints, v))
}

// HintsLTE applies the LTE predicate on the "hints" field.
func HintsLTE(v string) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldHints, v))
}

// HintsContains applies the Contains predicate on the "hints" field.
func HintsContains(v string) predicate.Question {
	return predicate.Question(sql.FieldContains(FieldHints, v))
}

// HintsHasPrefix applies the HasPrefix predicate on the "hints" field.
func HintsHasPrefix(v string) predicate.Question {
	return predicate.Question(sql.FieldHasPrefix(FieldHints, v))
}

// HintsHasSuffix applies the HasSuffix predicate on the "hints" field.
func HintsHasSuffix(v string) predicate.Question {
	return predicate.Question(sql.FieldHasSuffix(FieldHints, v))
}

// HintsIsNil applies the IsNil predicate on the "hints" field.
func HintsIsNil() predicate.Question {
	return predicate.Question(sql.FieldIsNull(FieldHints))
}

// HintsNotNil applies the NotNil predicate on the "hints" field.
func HintsNotNil() predicate.Question {
	return predicate.Question(sql.FieldNotNull(FieldHints))
}

// HintsEqualFold applies the EqualFold predicate on the "hints" field.
func HintsEqualFold(v string) predicate.Question {
	return predicate.Question(sql.FieldEqualFold(FieldHints, v))
}

// HintsContainsFold applies the ContainsFold predicate on the "hints" field.
func HintsContainsFold(v string) predicate.Question {
	return predicate.Question(sql.FieldContainsFold(FieldHints, v))
}

// HasWord applies the HasEdge predicate on the "word" edge.
func HasWord() predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WordTable, WordColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWordWith applies the HasEdge predicate on the "word" edge with a given conditions (other predicates).
func HasWordWith(preds ...predicate.Word) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		step := newWordStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasQuestionReviews applies the HasEdge predicate on the "question_reviews" edge.
func HasQuestionReviews() predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, QuestionReviewsTable, QuestionReviewsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQuestionReviewsWith applies the HasEdge predicate on the "question_reviews" edge with a given conditions (other predicates).
func HasQuestionReviewsWith(preds ...predicate.QuestionReview) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		step := newQuestionReviewsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasQuestionAttempts applies the HasEdge predicate on the "question_attempts" edge.
func HasQuestionAttempts() predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, QuestionAttemptsTable, QuestionAttemptsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQuestionAttemptsWith applies the HasEdge predicate on the "question_attempts" edge with a given conditions (other predicates).
func HasQuestionAttemptsWith(preds ...predicate.QuestionAttempt) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		step := newQuestionAttemptsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPronunciationAttempts applies the HasEdge predicate on the "pronunciation_attempts" edge.
func HasPronunciationAttempts() predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PronunciationAttemptsTable, PronunciationAttemptsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPronunciationAttemptsWith applies the HasEdge predicate on the "pronunciation_attempts" edge with a given conditions (other predicates).
func HasPronunciationAttemptsWith(preds ...predicate.PronunciationAttempt) predicate.Question {
	return predicate.Question(func(s *sql.Selector) {
		step := newPronunciationAttemptsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Question) predicate.Question {
	return predicate.Question(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Question) predicate.Question {
	return predicate.Question(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Question) predicate.Question {
	return predicate.Question(sql.NotPredicates(p))
}
