// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"learning-french-service/internal/ent/predicate"
	"learning-french-service/internal/ent/question"
	"learning-french-service/internal/ent/questionattempt"
	"learning-french-service/internal/ent/questionreview"
	"learning-french-service/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// QuestionReviewUpdate is the builder for updating QuestionReview entities.
type QuestionReviewUpdate struct {
	config
	hooks    []Hook
	mutation *QuestionReviewMutation
}

// Where appends a list predicates to the QuestionReviewUpdate builder.
func (_u *QuestionReviewUpdate) Where(ps ...predicate.QuestionReview) *QuestionReviewUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetEaseFactor sets the "ease_factor" field.
func (_u *QuestionReviewUpdate) SetEaseFactor(v float64) *QuestionReviewUpdate {
	_u.mutation.ResetEaseFactor()
	_u.mutation.SetEaseFactor(v)
	return _u
}

// SetNillableEaseFactor sets the "ease_factor" field if the given value is not nil.
func (_u *QuestionReviewUpdate) SetNillableEaseFactor(v *float64) *QuestionReviewUpdate {
	if v != nil {
		_u.SetEaseFactor(*v)
	}
	return _u
}

// AddEaseFactor adds value to the "ease_factor" field.
func (_u *QuestionReviewUpdate) AddEaseFactor(v float64) *QuestionReviewUpdate {
	_u.mutation.AddEaseFactor(v)
	return _u
}

// SetIntervalDays sets the "interval_days" field.
func (_u *QuestionReviewUpdate) SetIntervalDays(v int) *QuestionReviewUpdate {
	_u.mutation.ResetIntervalDays()
	_u.mutation.SetIntervalDays(v)
	return _u
}

// SetNillableIntervalDays sets the "interval_days" field if the given value is not nil.
func (_u *QuestionReviewUpdate) SetNillableIntervalDays(v *int) *QuestionReviewUpdate {
	if v != nil {
		_u.SetIntervalDays(*v)
	}
	return _u
}

// AddIntervalDays adds value to the "interval_days" field.
func (_u *QuestionReviewUpdate) AddIntervalDays(v int) *QuestionReviewUpdate {
	_u.mutation.AddIntervalDays(v)
	return _u
}

// SetRepetitionCount sets the "repetition_count" field.
func (_u *QuestionReviewUpdate) SetRepetitionCount(v int) *QuestionReviewUpdate {
	_u.mutation.ResetRepetitionCount()
	_u.mutation.SetRepetitionCount(v)
	return _u
}

// SetNillableRepetitionCount sets the "repetition_count" field if the given value is not nil.
func (_u *QuestionReviewUpdate) SetNillableRepetitionCount(v *int) *QuestionReviewUpdate {
	if v != nil {
		_u.SetRepetitionCount(*v)
	}
	return _u
}

// AddRepetitionCount adds value to the "repetition_count" field.
func (_u *QuestionReviewUpdate) AddRepetitionCount(v int) *QuestionReviewUpdate {
	_u.mutation.AddRepetitionCount(v)
	return _u
}

// SetNextReviewDate sets the "next_review_date" field.
func (_u *QuestionReviewUpdate) SetNextReviewDate(v time.Time) *QuestionReviewUpdate {
	_u.mutation.SetNextReviewDate(v)
	return _u
}

// SetNillableNextReviewDate sets the "next_review_date" field if the given value is not nil.
func (_u *QuestionReviewUpdate) SetNillableNextReviewDate(v *time.Time) *QuestionReviewUpdate {
	if v != nil {
		_u.SetNextReviewDate(*v)
	}
	return _u
}

// SetLastReviewedAt sets the "last_reviewed_at" field.
func (_u *QuestionReviewUpdate) SetLastReviewedAt(v time.Time) *QuestionReviewUpdate {
	_u.mutation.SetLastReviewedAt(v)
	return _u
}

// SetNillableLastReviewedAt sets the "last_reviewed_at" field if the given value is not nil.
func (_u *QuestionReviewUpdate) SetNillableLastReviewedAt(v *time.Time) *QuestionReviewUpdate {
	if v != nil {
		_u.SetLastReviewedAt(*v)
	}
	return _u
}

// ClearLastReviewedAt clears the value of the "last_reviewed_at" field.
func (_u *QuestionReviewUpdate) ClearLastReviewedAt() *QuestionReviewUpdate {
	_u.mutation.ClearLastReviewedAt()
	return _u
}

// SetIsDue sets the "is_due" field.
func (_u *QuestionReviewUpdate) SetIsDue(v bool) *QuestionReviewUpdate {
	_u.mutation.SetIsDue(v)
	return _u
}

// SetNillableIsDue sets the "is_due" field if the given value is not nil.
func (_u *QuestionReviewUpdate) SetNillableIsDue(v *bool) *QuestionReviewUpdate {
	if v != nil {
		_u.SetIsDue(*v)
	}
	return _u
}

// SetTotalAttempts sets the "total_attempts" field.
func (_u *QuestionReviewUpdate) SetTotalAttempts(v int) *QuestionReviewUpdate {
	_u.mutation.ResetTotalAttempts()
	_u.mutation.SetTotalAttempts(v)
	return _u
}

// SetNillableTotalAttempts sets the "total_attempts" field if the given value is not nil.
func (_u *QuestionReviewUpdate) SetNillableTotalAttempts(v *int) *QuestionReviewUpdate {
	if v != nil {
		_u.SetTotalAttempts(*v)
	}
	return _u
}

// AddTotalAttempts adds value to the "total_attempts" field.
func (_u *QuestionReviewUpdate) AddTotalAttempts(v int) *QuestionReviewUpdate {
	_u.mutation.AddTotalAttempts(v)
	return _u
}

// SetCorrectAttempts sets the "correct_attempts" field.
func (_u *QuestionReviewUpdate) SetCorrectAttempts(v int) *QuestionReviewUpdate {
	_u.mutation.ResetCorrectAttempts()
	_u.mutation.SetCorrectAttempts(v)
	return _u
}

// SetNillableCorrectAttempts sets the "correct_attempts" field if the given value is not nil.
func (_u *QuestionReviewUpdate) SetNillableCorrectAttempts(v *int) *QuestionReviewUpdate {
	if v != nil {
		_u.SetCorrectAttempts(*v)
	}
	return _u
}

// AddCorrectAttempts adds value to the "correct_attempts" field.
func (_u *QuestionReviewUpdate) AddCorrectAttempts(v int) *QuestionReviewUpdate {
	_u.mutation.AddCorrectAttempts(v)
	return _u
}

// SetAccuracyRate sets the "accuracy_rate" field.
func (_u *QuestionReviewUpdate) SetAccuracyRate(v float64) *QuestionReviewUpdate {
	_u.mutation.ResetAccuracyRate()
	_u.mutation.SetAccuracyRate(v)
	return _u
}

// SetNillableAccuracyRate sets the "accuracy_rate" field if the given value is not nil.
func (_u *QuestionReviewUpdate) SetNillableAccuracyRate(v *float64) *QuestionReviewUpdate {
	if v != nil {
		_u.SetAccuracyRate(*v)
	}
	return _u
}

// AddAccuracyRate adds value to the "accuracy_rate" field.
func (_u *QuestionReviewUpdate) AddAccuracyRate(v float64) *QuestionReviewUpdate {
	_u.mutation.AddAccuracyRate(v)
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *QuestionReviewUpdate) SetCreatedAt(v time.Time) *QuestionReviewUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *QuestionReviewUpdate) SetNillableCreatedAt(v *time.Time) *QuestionReviewUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *QuestionReviewUpdate) SetUpdatedAt(v time.Time) *QuestionReviewUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *QuestionReviewUpdate) SetUserID(id int) *QuestionReviewUpdate {
	_u.mutation.SetUserID(id)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *QuestionReviewUpdate) SetUser(v *User) *QuestionReviewUpdate {
	return _u.SetUserID(v.ID)
}

// SetQuestionID sets the "question" edge to the Question entity by ID.
func (_u *QuestionReviewUpdate) SetQuestionID(id int) *QuestionReviewUpdate {
	_u.mutation.SetQuestionID(id)
	return _u
}

// SetQuestion sets the "question" edge to the Question entity.
func (_u *QuestionReviewUpdate) SetQuestion(v *Question) *QuestionReviewUpdate {
	return _u.SetQuestionID(v.ID)
}

// AddQuestionAttemptIDs adds the "question_attempts" edge to the QuestionAttempt entity by IDs.
func (_u *QuestionReviewUpdate) AddQuestionAttemptIDs(ids ...int) *QuestionReviewUpdate {
	_u.mutation.AddQuestionAttemptIDs(ids...)
	return _u
}

// AddQuestionAttempts adds the "question_attempts" edges to the QuestionAttempt entity.
func (_u *QuestionReviewUpdate) AddQuestionAttempts(v ...*QuestionAttempt) *QuestionReviewUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddQuestionAttemptIDs(ids...)
}

// Mutation returns the QuestionReviewMutation object of the builder.
func (_u *QuestionReviewUpdate) Mutation() *QuestionReviewMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *QuestionReviewUpdate) ClearUser() *QuestionReviewUpdate {
	_u.mutation.ClearUser()
	return _u
}

// ClearQuestion clears the "question" edge to the Question entity.
func (_u *QuestionReviewUpdate) ClearQuestion() *QuestionReviewUpdate {
	_u.mutation.ClearQuestion()
	return _u
}

// ClearQuestionAttempts clears all "question_attempts" edges to the QuestionAttempt entity.
func (_u *QuestionReviewUpdate) ClearQuestionAttempts() *QuestionReviewUpdate {
	_u.mutation.ClearQuestionAttempts()
	return _u
}

// RemoveQuestionAttemptIDs removes the "question_attempts" edge to QuestionAttempt entities by IDs.
func (_u *QuestionReviewUpdate) RemoveQuestionAttemptIDs(ids ...int) *QuestionReviewUpdate {
	_u.mutation.RemoveQuestionAttemptIDs(ids...)
	return _u
}

// RemoveQuestionAttempts removes "question_attempts" edges to QuestionAttempt entities.
func (_u *QuestionReviewUpdate) RemoveQuestionAttempts(v ...*QuestionAttempt) *QuestionReviewUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveQuestionAttemptIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *QuestionReviewUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *QuestionReviewUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *QuestionReviewUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *QuestionReviewUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *QuestionReviewUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := questionreview.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *QuestionReviewUpdate) check() error {
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "QuestionReview.user"`)
	}
	if _u.mutation.QuestionCleared() && len(_u.mutation.QuestionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "QuestionReview.question"`)
	}
	return nil
}

func (_u *QuestionReviewUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(questionreview.Table, questionreview.Columns, sqlgraph.NewFieldSpec(questionreview.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.EaseFactor(); ok {
		_spec.SetField(questionreview.FieldEaseFactor, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedEaseFactor(); ok {
		_spec.AddField(questionreview.FieldEaseFactor, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.IntervalDays(); ok {
		_spec.SetField(questionreview.FieldIntervalDays, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedIntervalDays(); ok {
		_spec.AddField(questionreview.FieldIntervalDays, field.TypeInt, value)
	}
	if value, ok := _u.mutation.RepetitionCount(); ok {
		_spec.SetField(questionreview.FieldRepetitionCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedRepetitionCount(); ok {
		_spec.AddField(questionreview.FieldRepetitionCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.NextReviewDate(); ok {
		_spec.SetField(questionreview.FieldNextReviewDate, field.TypeTime, value)
	}
	if value, ok := _u.mutation.LastReviewedAt(); ok {
		_spec.SetField(questionreview.FieldLastReviewedAt, field.TypeTime, value)
	}
	if _u.mutation.LastReviewedAtCleared() {
		_spec.ClearField(questionreview.FieldLastReviewedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.IsDue(); ok {
		_spec.SetField(questionreview.FieldIsDue, field.TypeBool, value)
	}
	if value, ok := _u.mutation.TotalAttempts(); ok {
		_spec.SetField(questionreview.FieldTotalAttempts, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedTotalAttempts(); ok {
		_spec.AddField(questionreview.FieldTotalAttempts, field.TypeInt, value)
	}
	if value, ok := _u.mutation.CorrectAttempts(); ok {
		_spec.SetField(questionreview.FieldCorrectAttempts, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedCorrectAttempts(); ok {
		_spec.AddField(questionreview.FieldCorrectAttempts, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AccuracyRate(); ok {
		_spec.SetField(questionreview.FieldAccuracyRate, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedAccuracyRate(); ok {
		_spec.AddField(questionreview.FieldAccuracyRate, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(questionreview.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(questionreview.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionreview.UserTable,
			Columns: []string{questionreview.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionreview.UserTable,
			Columns: []string{questionreview.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionreview.QuestionTable,
			Columns: []string{questionreview.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionreview.QuestionTable,
			Columns: []string{questionreview.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.QuestionAttemptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   questionreview.QuestionAttemptsTable,
			Columns: []string{questionreview.QuestionAttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionattempt.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedQuestionAttemptsIDs(); len(nodes) > 0 && !_u.mutation.QuestionAttemptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   questionreview.QuestionAttemptsTable,
			Columns: []string{questionreview.QuestionAttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionattempt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.QuestionAttemptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   questionreview.QuestionAttemptsTable,
			Columns: []string{questionreview.QuestionAttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionattempt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{questionreview.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// QuestionReviewUpdateOne is the builder for updating a single QuestionReview entity.
type QuestionReviewUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *QuestionReviewMutation
}

// SetEaseFactor sets the "ease_factor" field.
func (_u *QuestionReviewUpdateOne) SetEaseFactor(v float64) *QuestionReviewUpdateOne {
	_u.mutation.ResetEaseFactor()
	_u.mutation.SetEaseFactor(v)
	return _u
}

// SetNillableEaseFactor sets the "ease_factor" field if the given value is not nil.
func (_u *QuestionReviewUpdateOne) SetNillableEaseFactor(v *float64) *QuestionReviewUpdateOne {
	if v != nil {
		_u.SetEaseFactor(*v)
	}
	return _u
}

// AddEaseFactor adds value to the "ease_factor" field.
func (_u *QuestionReviewUpdateOne) AddEaseFactor(v float64) *QuestionReviewUpdateOne {
	_u.mutation.AddEaseFactor(v)
	return _u
}

// SetIntervalDays sets the "interval_days" field.
func (_u *QuestionReviewUpdateOne) SetIntervalDays(v int) *QuestionReviewUpdateOne {
	_u.mutation.ResetIntervalDays()
	_u.mutation.SetIntervalDays(v)
	return _u
}

// SetNillableIntervalDays sets the "interval_days" field if the given value is not nil.
func (_u *QuestionReviewUpdateOne) SetNillableIntervalDays(v *int) *QuestionReviewUpdateOne {
	if v != nil {
		_u.SetIntervalDays(*v)
	}
	return _u
}

// AddIntervalDays adds value to the "interval_days" field.
func (_u *QuestionReviewUpdateOne) AddIntervalDays(v int) *QuestionReviewUpdateOne {
	_u.mutation.AddIntervalDays(v)
	return _u
}

// SetRepetitionCount sets the "repetition_count" field.
func (_u *QuestionReviewUpdateOne) SetRepetitionCount(v int) *QuestionReviewUpdateOne {
	_u.mutation.ResetRepetitionCount()
	_u.mutation.SetRepetitionCount(v)
	return _u
}

// SetNillableRepetitionCount sets the "repetition_count" field if the given value is not nil.
func (_u *QuestionReviewUpdateOne) SetNillableRepetitionCount(v *int) *QuestionReviewUpdateOne {
	if v != nil {
		_u.SetRepetitionCount(*v)
	}
	return _u
}

// AddRepetitionCount adds value to the "repetition_count" field.
func (_u *QuestionReviewUpdateOne) AddRepetitionCount(v int) *QuestionReviewUpdateOne {
	_u.mutation.AddRepetitionCount(v)
	return _u
}

// SetNextReviewDate sets the "next_review_date" field.
func (_u *QuestionReviewUpdateOne) SetNextReviewDate(v time.Time) *QuestionReviewUpdateOne {
	_u.mutation.SetNextReviewDate(v)
	return _u
}

// SetNillableNextReviewDate sets the "next_review_date" field if the given value is not nil.
func (_u *QuestionReviewUpdateOne) SetNillableNextReviewDate(v *time.Time) *QuestionReviewUpdateOne {
	if v != nil {
		_u.SetNextReviewDate(*v)
	}
	return _u
}

// SetLastReviewedAt sets the "last_reviewed_at" field.
func (_u *QuestionReviewUpdateOne) SetLastReviewedAt(v time.Time) *QuestionReviewUpdateOne {
	_u.mutation.SetLastReviewedAt(v)
	return _u
}

// SetNillableLastReviewedAt sets the "last_reviewed_at" field if the given value is not nil.
func (_u *QuestionReviewUpdateOne) SetNillableLastReviewedAt(v *time.Time) *QuestionReviewUpdateOne {
	if v != nil {
		_u.SetLastReviewedAt(*v)
	}
	return _u
}

// ClearLastReviewedAt clears the value of the "last_reviewed_at" field.
func (_u *QuestionReviewUpdateOne) ClearLastReviewedAt() *QuestionReviewUpdateOne {
	_u.mutation.ClearLastReviewedAt()
	return _u
}

// SetIsDue sets the "is_due" field.
func (_u *QuestionReviewUpdateOne) SetIsDue(v bool) *QuestionReviewUpdateOne {
	_u.mutation.SetIsDue(v)
	return _u
}

// SetNillableIsDue sets the "is_due" field if the given value is not nil.
func (_u *QuestionReviewUpdateOne) SetNillableIsDue(v *bool) *QuestionReviewUpdateOne {
	if v != nil {
		_u.SetIsDue(*v)
	}
	return _u
}

// SetTotalAttempts sets the "total_attempts" field.
func (_u *QuestionReviewUpdateOne) SetTotalAttempts(v int) *QuestionReviewUpdateOne {
	_u.mutation.ResetTotalAttempts()
	_u.mutation.SetTotalAttempts(v)
	return _u
}

// SetNillableTotalAttempts sets the "total_attempts" field if the given value is not nil.
func (_u *QuestionReviewUpdateOne) SetNillableTotalAttempts(v *int) *QuestionReviewUpdateOne {
	if v != nil {
		_u.SetTotalAttempts(*v)
	}
	return _u
}

// AddTotalAttempts adds value to the "total_attempts" field.
func (_u *QuestionReviewUpdateOne) AddTotalAttempts(v int) *QuestionReviewUpdateOne {
	_u.mutation.AddTotalAttempts(v)
	return _u
}

// SetCorrectAttempts sets the "correct_attempts" field.
func (_u *QuestionReviewUpdateOne) SetCorrectAttempts(v int) *QuestionReviewUpdateOne {
	_u.mutation.ResetCorrectAttempts()
	_u.mutation.SetCorrectAttempts(v)
	return _u
}

// SetNillableCorrectAttempts sets the "correct_attempts" field if the given value is not nil.
func (_u *QuestionReviewUpdateOne) SetNillableCorrectAttempts(v *int) *QuestionReviewUpdateOne {
	if v != nil {
		_u.SetCorrectAttempts(*v)
	}
	return _u
}

// AddCorrectAttempts adds value to the "correct_attempts" field.
func (_u *QuestionReviewUpdateOne) AddCorrectAttempts(v int) *QuestionReviewUpdateOne {
	_u.mutation.AddCorrectAttempts(v)
	return _u
}

// SetAccuracyRate sets the "accuracy_rate" field.
func (_u *QuestionReviewUpdateOne) SetAccuracyRate(v float64) *QuestionReviewUpdateOne {
	_u.mutation.ResetAccuracyRate()
	_u.mutation.SetAccuracyRate(v)
	return _u
}

// SetNillableAccuracyRate sets the "accuracy_rate" field if the given value is not nil.
func (_u *QuestionReviewUpdateOne) SetNillableAccuracyRate(v *float64) *QuestionReviewUpdateOne {
	if v != nil {
		_u.SetAccuracyRate(*v)
	}
	return _u
}

// AddAccuracyRate adds value to the "accuracy_rate" field.
func (_u *QuestionReviewUpdateOne) AddAccuracyRate(v float64) *QuestionReviewUpdateOne {
	_u.mutation.AddAccuracyRate(v)
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *QuestionReviewUpdateOne) SetCreatedAt(v time.Time) *QuestionReviewUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *QuestionReviewUpdateOne) SetNillableCreatedAt(v *time.Time) *QuestionReviewUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *QuestionReviewUpdateOne) SetUpdatedAt(v time.Time) *QuestionReviewUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *QuestionReviewUpdateOne) SetUserID(id int) *QuestionReviewUpdateOne {
	_u.mutation.SetUserID(id)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *QuestionReviewUpdateOne) SetUser(v *User) *QuestionReviewUpdateOne {
	return _u.SetUserID(v.ID)
}

// SetQuestionID sets the "question" edge to the Question entity by ID.
func (_u *QuestionReviewUpdateOne) SetQuestionID(id int) *QuestionReviewUpdateOne {
	_u.mutation.SetQuestionID(id)
	return _u
}

// SetQuestion sets the "question" edge to the Question entity.
func (_u *QuestionReviewUpdateOne) SetQuestion(v *Question) *QuestionReviewUpdateOne {
	return _u.SetQuestionID(v.ID)
}

// AddQuestionAttemptIDs adds the "question_attempts" edge to the QuestionAttempt entity by IDs.
func (_u *QuestionReviewUpdateOne) AddQuestionAttemptIDs(ids ...int) *QuestionReviewUpdateOne {
	_u.mutation.AddQuestionAttemptIDs(ids...)
	return _u
}

// AddQuestionAttempts adds the "question_attempts" edges to the QuestionAttempt entity.
func (_u *QuestionReviewUpdateOne) AddQuestionAttempts(v ...*QuestionAttempt) *QuestionReviewUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddQuestionAttemptIDs(ids...)
}

// Mutation returns the QuestionReviewMutation object of the builder.
func (_u *QuestionReviewUpdateOne) Mutation() *QuestionReviewMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *QuestionReviewUpdateOne) ClearUser() *QuestionReviewUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// ClearQuestion clears the "question" edge to the Question entity.
func (_u *QuestionReviewUpdateOne) ClearQuestion() *QuestionReviewUpdateOne {
	_u.mutation.ClearQuestion()
	return _u
}

// ClearQuestionAttempts clears all "question_attempts" edges to the QuestionAttempt entity.
func (_u *QuestionReviewUpdateOne) ClearQuestionAttempts() *QuestionReviewUpdateOne {
	_u.mutation.ClearQuestionAttempts()
	return _u
}

// RemoveQuestionAttemptIDs removes the "question_attempts" edge to QuestionAttempt entities by IDs.
func (_u *QuestionReviewUpdateOne) RemoveQuestionAttemptIDs(ids ...int) *QuestionReviewUpdateOne {
	_u.mutation.RemoveQuestionAttemptIDs(ids...)
	return _u
}

// RemoveQuestionAttempts removes "question_attempts" edges to QuestionAttempt entities.
func (_u *QuestionReviewUpdateOne) RemoveQuestionAttempts(v ...*QuestionAttempt) *QuestionReviewUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveQuestionAttemptIDs(ids...)
}

// Where appends a list predicates to the QuestionReviewUpdate builder.
func (_u *QuestionReviewUpdateOne) Where(ps ...predicate.QuestionReview) *QuestionReviewUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *QuestionReviewUpdateOne) Select(field string, fields ...string) *QuestionReviewUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated QuestionReview entity.
func (_u *QuestionReviewUpdateOne) Save(ctx context.Context) (*QuestionReview, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *QuestionReviewUpdateOne) SaveX(ctx context.Context) *QuestionReview {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *QuestionReviewUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *QuestionReviewUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *QuestionReviewUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := questionreview.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *QuestionReviewUpdateOne) check() error {
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "QuestionReview.user"`)
	}
	if _u.mutation.QuestionCleared() && len(_u.mutation.QuestionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "QuestionReview.question"`)
	}
	return nil
}

func (_u *QuestionReviewUpdateOne) sqlSave(ctx context.Context) (_node *QuestionReview, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(questionreview.Table, questionreview.Columns, sqlgraph.NewFieldSpec(questionreview.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "QuestionReview.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, questionreview.FieldID)
		for _, f := range fields {
			if !questionreview.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != questionreview.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.EaseFactor(); ok {
		_spec.SetField(questionreview.FieldEaseFactor, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedEaseFactor(); ok {
		_spec.AddField(questionreview.FieldEaseFactor, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.IntervalDays(); ok {
		_spec.SetField(questionreview.FieldIntervalDays, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedIntervalDays(); ok {
		_spec.AddField(questionreview.FieldIntervalDays, field.TypeInt, value)
	}
	if value, ok := _u.mutation.RepetitionCount(); ok {
		_spec.SetField(questionreview.FieldRepetitionCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedRepetitionCount(); ok {
		_spec.AddField(questionreview.FieldRepetitionCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.NextReviewDate(); ok {
		_spec.SetField(questionreview.FieldNextReviewDate, field.TypeTime, value)
	}
	if value, ok := _u.mutation.LastReviewedAt(); ok {
		_spec.SetField(questionreview.FieldLastReviewedAt, field.TypeTime, value)
	}
	if _u.mutation.LastReviewedAtCleared() {
		_spec.ClearField(questionreview.FieldLastReviewedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.IsDue(); ok {
		_spec.SetField(questionreview.FieldIsDue, field.TypeBool, value)
	}
	if value, ok := _u.mutation.TotalAttempts(); ok {
		_spec.SetField(questionreview.FieldTotalAttempts, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedTotalAttempts(); ok {
		_spec.AddField(questionreview.FieldTotalAttempts, field.TypeInt, value)
	}
	if value, ok := _u.mutation.CorrectAttempts(); ok {
		_spec.SetField(questionreview.FieldCorrectAttempts, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedCorrectAttempts(); ok {
		_spec.AddField(questionreview.FieldCorrectAttempts, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AccuracyRate(); ok {
		_spec.SetField(questionreview.FieldAccuracyRate, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedAccuracyRate(); ok {
		_spec.AddField(questionreview.FieldAccuracyRate, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(questionreview.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(questionreview.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionreview.UserTable,
			Columns: []string{questionreview.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionreview.UserTable,
			Columns: []string{questionreview.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionreview.QuestionTable,
			Columns: []string{questionreview.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionreview.QuestionTable,
			Columns: []string{questionreview.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.QuestionAttemptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   questionreview.QuestionAttemptsTable,
			Columns: []string{questionreview.QuestionAttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionattempt.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedQuestionAttemptsIDs(); len(nodes) > 0 && !_u.mutation.QuestionAttemptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   questionreview.QuestionAttemptsTable,
			Columns: []string{questionreview.QuestionAttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionattempt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.QuestionAttemptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   questionreview.QuestionAttemptsTable,
			Columns: []string{questionreview.QuestionAttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionattempt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &QuestionReview{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{questionreview.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
