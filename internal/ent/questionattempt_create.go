// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"learning-french-service/internal/ent/question"
	"learning-french-service/internal/ent/questionattempt"
	"learning-french-service/internal/ent/questionreview"
	"learning-french-service/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// QuestionAttemptCreate is the builder for creating a QuestionAttempt entity.
type QuestionAttemptCreate struct {
	config
	mutation *QuestionAttemptMutation
	hooks    []Hook
}

// SetUserAnswer sets the "user_answer" field.
func (_c *QuestionAttemptCreate) SetUserAnswer(v string) *QuestionAttemptCreate {
	_c.mutation.SetUserAnswer(v)
	return _c
}

// SetNillableUserAnswer sets the "user_answer" field if the given value is not nil.
func (_c *QuestionAttemptCreate) SetNillableUserAnswer(v *string) *QuestionAttemptCreate {
	if v != nil {
		_c.SetUserAnswer(*v)
	}
	return _c
}

// SetAiGrade sets the "ai_grade" field.
func (_c *QuestionAttemptCreate) SetAiGrade(v string) *QuestionAttemptCreate {
	_c.mutation.SetAiGrade(v)
	return _c
}

// SetNillableAiGrade sets the "ai_grade" field if the given value is not nil.
func (_c *QuestionAttemptCreate) SetNillableAiGrade(v *string) *QuestionAttemptCreate {
	if v != nil {
		_c.SetAiGrade(*v)
	}
	return _c
}

// SetAiFeedback sets the "ai_feedback" field.
func (_c *QuestionAttemptCreate) SetAiFeedback(v string) *QuestionAttemptCreate {
	_c.mutation.SetAiFeedback(v)
	return _c
}

// SetNillableAiFeedback sets the "ai_feedback" field if the given value is not nil.
func (_c *QuestionAttemptCreate) SetNillableAiFeedback(v *string) *QuestionAttemptCreate {
	if v != nil {
		_c.SetAiFeedback(*v)
	}
	return _c
}

// SetSimilarityScore sets the "similarity_score" field.
func (_c *QuestionAttemptCreate) SetSimilarityScore(v float64) *QuestionAttemptCreate {
	_c.mutation.SetSimilarityScore(v)
	return _c
}

// SetNillableSimilarityScore sets the "similarity_score" field if the given value is not nil.
func (_c *QuestionAttemptCreate) SetNillableSimilarityScore(v *float64) *QuestionAttemptCreate {
	if v != nil {
		_c.SetSimilarityScore(*v)
	}
	return _c
}

// SetQualityRating sets the "quality_rating" field.
func (_c *QuestionAttemptCreate) SetQualityRating(v int) *QuestionAttemptCreate {
	_c.mutation.SetQualityRating(v)
	return _c
}

// SetNillableQualityRating sets the "quality_rating" field if the given value is not nil.
func (_c *QuestionAttemptCreate) SetNillableQualityRating(v *int) *QuestionAttemptCreate {
	if v != nil {
		_c.SetQualityRating(*v)
	}
	return _c
}

// SetResponseTimeMs sets the "response_time_ms" field.
func (_c *QuestionAttemptCreate) SetResponseTimeMs(v int) *QuestionAttemptCreate {
	_c.mutation.SetResponseTimeMs(v)
	return _c
}

// SetNillableResponseTimeMs sets the "response_time_ms" field if the given value is not nil.
func (_c *QuestionAttemptCreate) SetNillableResponseTimeMs(v *int) *QuestionAttemptCreate {
	if v != nil {
		_c.SetResponseTimeMs(*v)
	}
	return _c
}

// SetWasCorrect sets the "was_correct" field.
func (_c *QuestionAttemptCreate) SetWasCorrect(v bool) *QuestionAttemptCreate {
	_c.mutation.SetWasCorrect(v)
	return _c
}

// SetNillableWasCorrect sets the "was_correct" field if the given value is not nil.
func (_c *QuestionAttemptCreate) SetNillableWasCorrect(v *bool) *QuestionAttemptCreate {
	if v != nil {
		_c.SetWasCorrect(*v)
	}
	return _c
}

// SetNeedsRepeat sets the "needs_repeat" field.
func (_c *QuestionAttemptCreate) SetNeedsRepeat(v bool) *QuestionAttemptCreate {
	_c.mutation.SetNeedsRepeat(v)
	return _c
}

// SetNillableNeedsRepeat sets the "needs_repeat" field if the given value is not nil.
func (_c *QuestionAttemptCreate) SetNillableNeedsRepeat(v *bool) *QuestionAttemptCreate {
	if v != nil {
		_c.SetNeedsRepeat(*v)
	}
	return _c
}

// SetAttemptDate sets the "attempt_date" field.
func (_c *QuestionAttemptCreate) SetAttemptDate(v time.Time) *QuestionAttemptCreate {
	_c.mutation.SetAttemptDate(v)
	return _c
}

// SetNillableAttemptDate sets the "attempt_date" field if the given value is not nil.
func (_c *QuestionAttemptCreate) SetNillableAttemptDate(v *time.Time) *QuestionAttemptCreate {
	if v != nil {
		_c.SetAttemptDate(*v)
	}
	return _c
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_c *QuestionAttemptCreate) SetUserID(id int) *QuestionAttemptCreate {
	_c.mutation.SetUserID(id)
	return _c
}

// SetUser sets the "user" edge to the User entity.
func (_c *QuestionAttemptCreate) SetUser(v *User) *QuestionAttemptCreate {
	return _c.SetUserID(v.ID)
}

// SetQuestionID sets the "question" edge to the Question entity by ID.
func (_c *QuestionAttemptCreate) SetQuestionID(id int) *QuestionAttemptCreate {
	_c.mutation.SetQuestionID(id)
	return _c
}

// SetQuestion sets the "question" edge to the Question entity.
func (_c *QuestionAttemptCreate) SetQuestion(v *Question) *QuestionAttemptCreate {
	return _c.SetQuestionID(v.ID)
}

// SetQuestionReviewID sets the "question_review" edge to the QuestionReview entity by ID.
func (_c *QuestionAttemptCreate) SetQuestionReviewID(id int) *QuestionAttemptCreate {
	_c.mutation.SetQuestionReviewID(id)
	return _c
}

// SetQuestionReview sets the "question_review" edge to the QuestionReview entity.
func (_c *QuestionAttemptCreate) SetQuestionReview(v *QuestionReview) *QuestionAttemptCreate {
	return _c.SetQuestionReviewID(v.ID)
}

// Mutation returns the QuestionAttemptMutation object of the builder.
func (_c *QuestionAttemptCreate) Mutation() *QuestionAttemptMutation {
	return _c.mutation
}

// Save creates the QuestionAttempt in the database.
func (_c *QuestionAttemptCreate) Save(ctx context.Context) (*QuestionAttempt, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *QuestionAttemptCreate) SaveX(ctx context.Context) *QuestionAttempt {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *QuestionAttemptCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *QuestionAttemptCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *QuestionAttemptCreate) defaults() {
	if _, ok := _c.mutation.WasCorrect(); !ok {
		v := questionattempt.DefaultWasCorrect
		_c.mutation.SetWasCorrect(v)
	}
	if _, ok := _c.mutation.NeedsRepeat(); !ok {
		v := questionattempt.DefaultNeedsRepeat
		_c.mutation.SetNeedsRepeat(v)
	}
	if _, ok := _c.mutation.AttemptDate(); !ok {
		v := questionattempt.DefaultAttemptDate()
		_c.mutation.SetAttemptDate(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *QuestionAttemptCreate) check() error {
	if v, ok := _c.mutation.AiGrade(); ok {
		if err := questionattempt.AiGradeValidator(v); err != nil {
			return &ValidationError{Name: "ai_grade", err: fmt.Errorf(`ent: validator failed for field "QuestionAttempt.ai_grade": %w`, err)}
		}
	}
	if _, ok := _c.mutation.WasCorrect(); !ok {
		return &ValidationError{Name: "was_correct", err: errors.New(`ent: missing required field "QuestionAttempt.was_correct"`)}
	}
	if _, ok := _c.mutation.NeedsRepeat(); !ok {
		return &ValidationError{Name: "needs_repeat", err: errors.New(`ent: missing required field "QuestionAttempt.needs_repeat"`)}
	}
	if _, ok := _c.mutation.AttemptDate(); !ok {
		return &ValidationError{Name: "attempt_date", err: errors.New(`ent: missing required field "QuestionAttempt.attempt_date"`)}
	}
	if len(_c.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "QuestionAttempt.user"`)}
	}
	if len(_c.mutation.QuestionIDs()) == 0 {
		return &ValidationError{Name: "question", err: errors.New(`ent: missing required edge "QuestionAttempt.question"`)}
	}
	if len(_c.mutation.QuestionReviewIDs()) == 0 {
		return &ValidationError{Name: "question_review", err: errors.New(`ent: missing required edge "QuestionAttempt.question_review"`)}
	}
	return nil
}

func (_c *QuestionAttemptCreate) sqlSave(ctx context.Context) (*QuestionAttempt, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *QuestionAttemptCreate) createSpec() (*QuestionAttempt, *sqlgraph.CreateSpec) {
	var (
		_node = &QuestionAttempt{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(questionattempt.Table, sqlgraph.NewFieldSpec(questionattempt.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.UserAnswer(); ok {
		_spec.SetField(questionattempt.FieldUserAnswer, field.TypeString, value)
		_node.UserAnswer = value
	}
	if value, ok := _c.mutation.AiGrade(); ok {
		_spec.SetField(questionattempt.FieldAiGrade, field.TypeString, value)
		_node.AiGrade = value
	}
	if value, ok := _c.mutation.AiFeedback(); ok {
		_spec.SetField(questionattempt.FieldAiFeedback, field.TypeString, value)
		_node.AiFeedback = value
	}
	if value, ok := _c.mutation.SimilarityScore(); ok {
		_spec.SetField(questionattempt.FieldSimilarityScore, field.TypeFloat64, value)
		_node.SimilarityScore = value
	}
	if value, ok := _c.mutation.QualityRating(); ok {
		_spec.SetField(questionattempt.FieldQualityRating, field.TypeInt, value)
		_node.QualityRating = value
	}
	if value, ok := _c.mutation.ResponseTimeMs(); ok {
		_spec.SetField(questionattempt.FieldResponseTimeMs, field.TypeInt, value)
		_node.ResponseTimeMs = value
	}
	if value, ok := _c.mutation.WasCorrect(); ok {
		_spec.SetField(questionattempt.FieldWasCorrect, field.TypeBool, value)
		_node.WasCorrect = value
	}
	if value, ok := _c.mutation.NeedsRepeat(); ok {
		_spec.SetField(questionattempt.FieldNeedsRepeat, field.TypeBool, value)
		_node.NeedsRepeat = value
	}
	if value, ok := _c.mutation.AttemptDate(); ok {
		_spec.SetField(questionattempt.FieldAttemptDate, field.TypeTime, value)
		_node.AttemptDate = value
	}
	if nodes := _c.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionattempt.UserTable,
			Columns: []string{questionattempt.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_question_attempts = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionattempt.QuestionTable,
			Columns: []string{questionattempt.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.question_question_attempts = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.QuestionReviewIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionattempt.QuestionReviewTable,
			Columns: []string{questionattempt.QuestionReviewColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionreview.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.question_review_question_attempts = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// QuestionAttemptCreateBulk is the builder for creating many QuestionAttempt entities in bulk.
type QuestionAttemptCreateBulk struct {
	config
	err      error
	builders []*QuestionAttemptCreate
}

// Save creates the QuestionAttempt entities in the database.
func (_c *QuestionAttemptCreateBulk) Save(ctx context.Context) ([]*QuestionAttempt, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*QuestionAttempt, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*QuestionAttemptMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *QuestionAttemptCreateBulk) SaveX(ctx context.Context) []*QuestionAttempt {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *QuestionAttemptCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *QuestionAttemptCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
