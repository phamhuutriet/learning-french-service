// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"learning-french-service/internal/ent/predicate"
	"learning-french-service/internal/ent/pronunciationattempt"
	"learning-french-service/internal/ent/question"
	"learning-french-service/internal/ent/questionattempt"
	"learning-french-service/internal/ent/questionreview"
	"learning-french-service/internal/ent/word"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// QuestionUpdate is the builder for updating Question entities.
type QuestionUpdate struct {
	config
	hooks    []Hook
	mutation *QuestionMutation
}

// Where appends a list predicates to the QuestionUpdate builder.
func (_u *QuestionUpdate) Where(ps ...predicate.Question) *QuestionUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetQuestionType sets the "question_type" field.
func (_u *QuestionUpdate) SetQuestionType(v string) *QuestionUpdate {
	_u.mutation.SetQuestionType(v)
	return _u
}

// SetNillableQuestionType sets the "question_type" field if the given value is not nil.
func (_u *QuestionUpdate) SetNillableQuestionType(v *string) *QuestionUpdate {
	if v != nil {
		_u.SetQuestionType(*v)
	}
	return _u
}

// SetQuestionText sets the "question_text" field.
func (_u *QuestionUpdate) SetQuestionText(v string) *QuestionUpdate {
	_u.mutation.SetQuestionText(v)
	return _u
}

// SetNillableQuestionText sets the "question_text" field if the given value is not nil.
func (_u *QuestionUpdate) SetNillableQuestionText(v *string) *QuestionUpdate {
	if v != nil {
		_u.SetQuestionText(*v)
	}
	return _u
}

// SetCorrectAnswer sets the "correct_answer" field.
func (_u *QuestionUpdate) SetCorrectAnswer(v string) *QuestionUpdate {
	_u.mutation.SetCorrectAnswer(v)
	return _u
}

// SetNillableCorrectAnswer sets the "correct_answer" field if the given value is not nil.
func (_u *QuestionUpdate) SetNillableCorrectAnswer(v *string) *QuestionUpdate {
	if v != nil {
		_u.SetCorrectAnswer(*v)
	}
	return _u
}

// SetDifficultyLevel sets the "difficulty_level" field.
func (_u *QuestionUpdate) SetDifficultyLevel(v string) *QuestionUpdate {
	_u.mutation.SetDifficultyLevel(v)
	return _u
}

// SetNillableDifficultyLevel sets the "difficulty_level" field if the given value is not nil.
func (_u *QuestionUpdate) SetNillableDifficultyLevel(v *string) *QuestionUpdate {
	if v != nil {
		_u.SetDifficultyLevel(*v)
	}
	return _u
}

// ClearDifficultyLevel clears the value of the "difficulty_level" field.
func (_u *QuestionUpdate) ClearDifficultyLevel() *QuestionUpdate {
	_u.mutation.ClearDifficultyLevel()
	return _u
}

// SetGeneratedAt sets the "generated_at" field.
func (_u *QuestionUpdate) SetGeneratedAt(v time.Time) *QuestionUpdate {
	_u.mutation.SetGeneratedAt(v)
	return _u
}

// SetNillableGeneratedAt sets the "generated_at" field if the given value is not nil.
func (_u *QuestionUpdate) SetNillableGeneratedAt(v *time.Time) *QuestionUpdate {
	if v != nil {
		_u.SetGeneratedAt(*v)
	}
	return _u
}

// SetIsActive sets the "is_active" field.
func (_u *QuestionUpdate) SetIsActive(v bool) *QuestionUpdate {
	_u.mutation.SetIsActive(v)
	return _u
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_u *QuestionUpdate) SetNillableIsActive(v *bool) *QuestionUpdate {
	if v != nil {
		_u.SetIsActive(*v)
	}
	return _u
}

// SetOptions sets the "options" field.
func (_u *QuestionUpdate) SetOptions(v []string) *QuestionUpdate {
	_u.mutation.SetOptions(v)
	return _u
}

// AppendOptions appends value to the "options" field.
func (_u *QuestionUpdate) AppendOptions(v []string) *QuestionUpdate {
	_u.mutation.AppendOptions(v)
	return _u
}

// ClearOptions clears the value of the "options" field.
func (_u *QuestionUpdate) ClearOptions() *QuestionUpdate {
	_u.mutation.ClearOptions()
	return _u
}

// SetHints sets the "hints" field.
func (_u *QuestionUpdate) SetHints(v string) *QuestionUpdate {
	_u.mutation.SetHints(v)
	return _u
}

// SetNillableHints sets the "hints" field if the given value is not nil.
func (_u *QuestionUpdate) SetNillableHints(v *string) *QuestionUpdate {
	if v != nil {
		_u.SetHints(*v)
	}
	return _u
}

// ClearHints clears the value of the "hints" field.
func (_u *QuestionUpdate) ClearHints() *QuestionUpdate {
	_u.mutation.ClearHints()
	return _u
}

// SetWordID sets the "word" edge to the Word entity by ID.
func (_u *QuestionUpdate) SetWordID(id int) *QuestionUpdate {
	_u.mutation.SetWordID(id)
	return _u
}

// SetWord sets the "word" edge to the Word entity.
func (_u *QuestionUpdate) SetWord(v *Word) *QuestionUpdate {
	return _u.SetWordID(v.ID)
}

// AddQuestionReviewIDs adds the "question_reviews" edge to the QuestionReview entity by IDs.
func (_u *QuestionUpdate) AddQuestionReviewIDs(ids ...int) *QuestionUpdate {
	_u.mutation.AddQuestionReviewIDs(ids...)
	return _u
}

// AddQuestionReviews adds the "question_reviews" edges to the QuestionReview entity.
func (_u *QuestionUpdate) AddQuestionReviews(v ...*QuestionReview) *QuestionUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddQuestionReviewIDs(ids...)
}

// AddQuestionAttemptIDs adds the "question_attempts" edge to the QuestionAttempt entity by IDs.
func (_u *QuestionUpdate) AddQuestionAttemptIDs(ids ...int) *QuestionUpdate {
	_u.mutation.AddQuestionAttemptIDs(ids...)
	return _u
}

// AddQuestionAttempts adds the "question_attempts" edges to the QuestionAttempt entity.
func (_u *QuestionUpdate) AddQuestionAttempts(v ...*QuestionAttempt) *QuestionUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddQuestionAttemptIDs(ids...)
}

// AddPronunciationAttemptIDs adds the "pronunciation_attempts" edge to the PronunciationAttempt entity by IDs.
func (_u *QuestionUpdate) AddPronunciationAttemptIDs(ids ...int) *QuestionUpdate {
	_u.mutation.AddPronunciationAttemptIDs(ids...)
	return _u
}

// AddPronunciationAttempts adds the "pronunciation_attempts" edges to the PronunciationAttempt entity.
func (_u *QuestionUpdate) AddPronunciationAttempts(v ...*PronunciationAttempt) *QuestionUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPronunciationAttemptIDs(ids...)
}

// Mutation returns the QuestionMutation object of the builder.
func (_u *QuestionUpdate) Mutation() *QuestionMutation {
	return _u.mutation
}

// ClearWord clears the "word" edge to the Word entity.
func (_u *QuestionUpdate) ClearWord() *QuestionUpdate {
	_u.mutation.ClearWord()
	return _u
}

// ClearQuestionReviews clears all "question_reviews" edges to the QuestionReview entity.
func (_u *QuestionUpdate) ClearQuestionReviews() *QuestionUpdate {
	_u.mutation.ClearQuestionReviews()
	return _u
}

// RemoveQuestionReviewIDs removes the "question_reviews" edge to QuestionReview entities by IDs.
func (_u *QuestionUpdate) RemoveQuestionReviewIDs(ids ...int) *QuestionUpdate {
	_u.mutation.RemoveQuestionReviewIDs(ids...)
	return _u
}

// RemoveQuestionReviews removes "question_reviews" edges to QuestionReview entities.
func (_u *QuestionUpdate) RemoveQuestionReviews(v ...*QuestionReview) *QuestionUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveQuestionReviewIDs(ids...)
}

// ClearQuestionAttempts clears all "question_attempts" edges to the QuestionAttempt entity.
func (_u *QuestionUpdate) ClearQuestionAttempts() *QuestionUpdate {
	_u.mutation.ClearQuestionAttempts()
	return _u
}

// RemoveQuestionAttemptIDs removes the "question_attempts" edge to QuestionAttempt entities by IDs.
func (_u *QuestionUpdate) RemoveQuestionAttemptIDs(ids ...int) *QuestionUpdate {
	_u.mutation.RemoveQuestionAttemptIDs(ids...)
	return _u
}

// RemoveQuestionAttempts removes "question_attempts" edges to QuestionAttempt entities.
func (_u *QuestionUpdate) RemoveQuestionAttempts(v ...*QuestionAttempt) *QuestionUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveQuestionAttemptIDs(ids...)
}

// ClearPronunciationAttempts clears all "pronunciation_attempts" edges to the PronunciationAttempt entity.
func (_u *QuestionUpdate) ClearPronunciationAttempts() *QuestionUpdate {
	_u.mutation.ClearPronunciationAttempts()
	return _u
}

// RemovePronunciationAttemptIDs removes the "pronunciation_attempts" edge to PronunciationAttempt entities by IDs.
func (_u *QuestionUpdate) RemovePronunciationAttemptIDs(ids ...int) *QuestionUpdate {
	_u.mutation.RemovePronunciationAttemptIDs(ids...)
	return _u
}

// RemovePronunciationAttempts removes "pronunciation_attempts" edges to PronunciationAttempt entities.
func (_u *QuestionUpdate) RemovePronunciationAttempts(v ...*PronunciationAttempt) *QuestionUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePronunciationAttemptIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *QuestionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *QuestionUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *QuestionUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *QuestionUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *QuestionUpdate) check() error {
	if v, ok := _u.mutation.QuestionType(); ok {
		if err := question.QuestionTypeValidator(v); err != nil {
			return &ValidationError{Name: "question_type", err: fmt.Errorf(`ent: validator failed for field "Question.question_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.QuestionText(); ok {
		if err := question.QuestionTextValidator(v); err != nil {
			return &ValidationError{Name: "question_text", err: fmt.Errorf(`ent: validator failed for field "Question.question_text": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CorrectAnswer(); ok {
		if err := question.CorrectAnswerValidator(v); err != nil {
			return &ValidationError{Name: "correct_answer", err: fmt.Errorf(`ent: validator failed for field "Question.correct_answer": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DifficultyLevel(); ok {
		if err := question.DifficultyLevelValidator(v); err != nil {
			return &ValidationError{Name: "difficulty_level", err: fmt.Errorf(`ent: validator failed for field "Question.difficulty_level": %w`, err)}
		}
	}
	if _u.mutation.WordCleared() && len(_u.mutation.WordIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Question.word"`)
	}
	return nil
}

func (_u *QuestionUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(question.Table, question.Columns, sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.QuestionType(); ok {
		_spec.SetField(question.FieldQuestionType, field.TypeString, value)
	}
	if value, ok := _u.mutation.QuestionText(); ok {
		_spec.SetField(question.FieldQuestionText, field.TypeString, value)
	}
	if value, ok := _u.mutation.CorrectAnswer(); ok {
		_spec.SetField(question.FieldCorrectAnswer, field.TypeString, value)
	}
	if value, ok := _u.mutation.DifficultyLevel(); ok {
		_spec.SetField(question.FieldDifficultyLevel, field.TypeString, value)
	}
	if _u.mutation.DifficultyLevelCleared() {
		_spec.ClearField(question.FieldDifficultyLevel, field.TypeString)
	}
	if value, ok := _u.mutation.GeneratedAt(); ok {
		_spec.SetField(question.FieldGeneratedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.IsActive(); ok {
		_spec.SetField(question.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Options(); ok {
		_spec.SetField(question.FieldOptions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedOptions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, question.FieldOptions, value)
		})
	}
	if _u.mutation.OptionsCleared() {
		_spec.ClearField(question.FieldOptions, field.TypeJSON)
	}
	if value, ok := _u.mutation.Hints(); ok {
		_spec.SetField(question.FieldHints, field.TypeString, value)
	}
	if _u.mutation.HintsCleared() {
		_spec.ClearField(question.FieldHints, field.TypeString)
	}
	if _u.mutation.WordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.WordTable,
			Columns: []string{question.WordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(word.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.WordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.WordTable,
			Columns: []string{question.WordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(word.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.QuestionReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.QuestionReviewsTable,
			Columns: []string{question.QuestionReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionreview.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedQuestionReviewsIDs(); len(nodes) > 0 && !_u.mutation.QuestionReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.QuestionReviewsTable,
			Columns: []string{question.QuestionReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionreview.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.QuestionReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.QuestionReviewsTable,
			Columns: []string{question.QuestionReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionreview.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.QuestionAttemptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.QuestionAttemptsTable,
			Columns: []string{question.QuestionAttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionattempt.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedQuestionAttemptsIDs(); len(nodes) > 0 && !_u.mutation.QuestionAttemptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.QuestionAttemptsTable,
			Columns: []string{question.QuestionAttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionattempt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.QuestionAttemptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.QuestionAttemptsTable,
			Columns: []string{question.QuestionAttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionattempt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PronunciationAttemptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.PronunciationAttemptsTable,
			Columns: []string{question.PronunciationAttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pronunciationattempt.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPronunciationAttemptsIDs(); len(nodes) > 0 && !_u.mutation.PronunciationAttemptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.PronunciationAttemptsTable,
			Columns: []string{question.PronunciationAttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pronunciationattempt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PronunciationAttemptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.PronunciationAttemptsTable,
			Columns: []string{question.PronunciationAttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pronunciationattempt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{question.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// QuestionUpdateOne is the builder for updating a single Question entity.
type QuestionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *QuestionMutation
}

// SetQuestionType sets the "question_type" field.
func (_u *QuestionUpdateOne) SetQuestionType(v string) *QuestionUpdateOne {
	_u.mutation.SetQuestionType(v)
	return _u
}

// SetNillableQuestionType sets the "question_type" field if the given value is not nil.
func (_u *QuestionUpdateOne) SetNillableQuestionType(v *string) *QuestionUpdateOne {
	if v != nil {
		_u.SetQuestionType(*v)
	}
	return _u
}

// SetQuestionText sets the "question_text" field.
func (_u *QuestionUpdateOne) SetQuestionText(v string) *QuestionUpdateOne {
	_u.mutation.SetQuestionText(v)
	return _u
}

// SetNillableQuestionText sets the "question_text" field if the given value is not nil.
func (_u *QuestionUpdateOne) SetNillableQuestionText(v *string) *QuestionUpdateOne {
	if v != nil {
		_u.SetQuestionText(*v)
	}
	return _u
}

// SetCorrectAnswer sets the "correct_answer" field.
func (_u *QuestionUpdateOne) SetCorrectAnswer(v string) *QuestionUpdateOne {
	_u.mutation.SetCorrectAnswer(v)
	return _u
}

// SetNillableCorrectAnswer sets the "correct_answer" field if the given value is not nil.
func (_u *QuestionUpdateOne) SetNillableCorrectAnswer(v *string) *QuestionUpdateOne {
	if v != nil {
		_u.SetCorrectAnswer(*v)
	}
	return _u
}

// SetDifficultyLevel sets the "difficulty_level" field.
func (_u *QuestionUpdateOne) SetDifficultyLevel(v string) *QuestionUpdateOne {
	_u.mutation.SetDifficultyLevel(v)
	return _u
}

// SetNillableDifficultyLevel sets the "difficulty_level" field if the given value is not nil.
func (_u *QuestionUpdateOne) SetNillableDifficultyLevel(v *string) *QuestionUpdateOne {
	if v != nil {
		_u.SetDifficultyLevel(*v)
	}
	return _u
}

// ClearDifficultyLevel clears the value of the "difficulty_level" field.
func (_u *QuestionUpdateOne) ClearDifficultyLevel() *QuestionUpdateOne {
	_u.mutation.ClearDifficultyLevel()
	return _u
}

// SetGeneratedAt sets the "generated_at" field.
func (_u *QuestionUpdateOne) SetGeneratedAt(v time.Time) *QuestionUpdateOne {
	_u.mutation.SetGeneratedAt(v)
	return _u
}

// SetNillableGeneratedAt sets the "generated_at" field if the given value is not nil.
func (_u *QuestionUpdateOne) SetNillableGeneratedAt(v *time.Time) *QuestionUpdateOne {
	if v != nil {
		_u.SetGeneratedAt(*v)
	}
	return _u
}

// SetIsActive sets the "is_active" field.
func (_u *QuestionUpdateOne) SetIsActive(v bool) *QuestionUpdateOne {
	_u.mutation.SetIsActive(v)
	return _u
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_u *QuestionUpdateOne) SetNillableIsActive(v *bool) *QuestionUpdateOne {
	if v != nil {
		_u.SetIsActive(*v)
	}
	return _u
}

// SetOptions sets the "options" field.
func (_u *QuestionUpdateOne) SetOptions(v []string) *QuestionUpdateOne {
	_u.mutation.SetOptions(v)
	return _u
}

// AppendOptions appends value to the "options" field.
func (_u *QuestionUpdateOne) AppendOptions(v []string) *QuestionUpdateOne {
	_u.mutation.AppendOptions(v)
	return _u
}

// ClearOptions clears the value of the "options" field.
func (_u *QuestionUpdateOne) ClearOptions() *QuestionUpdateOne {
	_u.mutation.ClearOptions()
	return _u
}

// SetHints sets the "hints" field.
func (_u *QuestionUpdateOne) SetHints(v string) *QuestionUpdateOne {
	_u.mutation.SetHints(v)
	return _u
}

// SetNillableHints sets the "hints" field if the given value is not nil.
func (_u *QuestionUpdateOne) SetNillableHints(v *string) *QuestionUpdateOne {
	if v != nil {
		_u.SetHints(*v)
	}
	return _u
}

// ClearHints clears the value of the "hints" field.
func (_u *QuestionUpdateOne) ClearHints() *QuestionUpdateOne {
	_u.mutation.ClearHints()
	return _u
}

// SetWordID sets the "word" edge to the Word entity by ID.
func (_u *QuestionUpdateOne) SetWordID(id int) *QuestionUpdateOne {
	_u.mutation.SetWordID(id)
	return _u
}

// SetWord sets the "word" edge to the Word entity.
func (_u *QuestionUpdateOne) SetWord(v *Word) *QuestionUpdateOne {
	return _u.SetWordID(v.ID)
}

// AddQuestionReviewIDs adds the "question_reviews" edge to the QuestionReview entity by IDs.
func (_u *QuestionUpdateOne) AddQuestionReviewIDs(ids ...int) *QuestionUpdateOne {
	_u.mutation.AddQuestionReviewIDs(ids...)
	return _u
}

// AddQuestionReviews adds the "question_reviews" edges to the QuestionReview entity.
func (_u *QuestionUpdateOne) AddQuestionReviews(v ...*QuestionReview) *QuestionUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddQuestionReviewIDs(ids...)
}

// AddQuestionAttemptIDs adds the "question_attempts" edge to the QuestionAttempt entity by IDs.
func (_u *QuestionUpdateOne) AddQuestionAttemptIDs(ids ...int) *QuestionUpdateOne {
	_u.mutation.AddQuestionAttemptIDs(ids...)
	return _u
}

// AddQuestionAttempts adds the "question_attempts" edges to the QuestionAttempt entity.
func (_u *QuestionUpdateOne) AddQuestionAttempts(v ...*QuestionAttempt) *QuestionUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddQuestionAttemptIDs(ids...)
}

// AddPronunciationAttemptIDs adds the "pronunciation_attempts" edge to the PronunciationAttempt entity by IDs.
func (_u *QuestionUpdateOne) AddPronunciationAttemptIDs(ids ...int) *QuestionUpdateOne {
	_u.mutation.AddPronunciationAttemptIDs(ids...)
	return _u
}

// AddPronunciationAttempts adds the "pronunciation_attempts" edges to the PronunciationAttempt entity.
func (_u *QuestionUpdateOne) AddPronunciationAttempts(v ...*PronunciationAttempt) *QuestionUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPronunciationAttemptIDs(ids...)
}

// Mutation returns the QuestionMutation object of the builder.
func (_u *QuestionUpdateOne) Mutation() *QuestionMutation {
	return _u.mutation
}

// ClearWord clears the "word" edge to the Word entity.
func (_u *QuestionUpdateOne) ClearWord() *QuestionUpdateOne {
	_u.mutation.ClearWord()
	return _u
}

// ClearQuestionReviews clears all "question_reviews" edges to the QuestionReview entity.
func (_u *QuestionUpdateOne) ClearQuestionReviews() *QuestionUpdateOne {
	_u.mutation.ClearQuestionReviews()
	return _u
}

// RemoveQuestionReviewIDs removes the "question_reviews" edge to QuestionReview entities by IDs.
func (_u *QuestionUpdateOne) RemoveQuestionReviewIDs(ids ...int) *QuestionUpdateOne {
	_u.mutation.RemoveQuestionReviewIDs(ids...)
	return _u
}

// RemoveQuestionReviews removes "question_reviews" edges to QuestionReview entities.
func (_u *QuestionUpdateOne) RemoveQuestionReviews(v ...*QuestionReview) *QuestionUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveQuestionReviewIDs(ids...)
}

// ClearQuestionAttempts clears all "question_attempts" edges to the QuestionAttempt entity.
func (_u *QuestionUpdateOne) ClearQuestionAttempts() *QuestionUpdateOne {
	_u.mutation.ClearQuestionAttempts()
	return _u
}

// RemoveQuestionAttemptIDs removes the "question_attempts" edge to QuestionAttempt entities by IDs.
func (_u *QuestionUpdateOne) RemoveQuestionAttemptIDs(ids ...int) *QuestionUpdateOne {
	_u.mutation.RemoveQuestionAttemptIDs(ids...)
	return _u
}

// RemoveQuestionAttempts removes "question_attempts" edges to QuestionAttempt entities.
func (_u *QuestionUpdateOne) RemoveQuestionAttempts(v ...*QuestionAttempt) *QuestionUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveQuestionAttemptIDs(ids...)
}

// ClearPronunciationAttempts clears all "pronunciation_attempts" edges to the PronunciationAttempt entity.
func (_u *QuestionUpdateOne) ClearPronunciationAttempts() *QuestionUpdateOne {
	_u.mutation.ClearPronunciationAttempts()
	return _u
}

// RemovePronunciationAttemptIDs removes the "pronunciation_attempts" edge to PronunciationAttempt entities by IDs.
func (_u *QuestionUpdateOne) RemovePronunciationAttemptIDs(ids ...int) *QuestionUpdateOne {
	_u.mutation.RemovePronunciationAttemptIDs(ids...)
	return _u
}

// RemovePronunciationAttempts removes "pronunciation_attempts" edges to PronunciationAttempt entities.
func (_u *QuestionUpdateOne) RemovePronunciationAttempts(v ...*PronunciationAttempt) *QuestionUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePronunciationAttemptIDs(ids...)
}

// Where appends a list predicates to the QuestionUpdate builder.
func (_u *QuestionUpdateOne) Where(ps ...predicate.Question) *QuestionUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *QuestionUpdateOne) Select(field string, fields ...string) *QuestionUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Question entity.
func (_u *QuestionUpdateOne) Save(ctx context.Context) (*Question, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *QuestionUpdateOne) SaveX(ctx context.Context) *Question {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *QuestionUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *QuestionUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *QuestionUpdateOne) check() error {
	if v, ok := _u.mutation.QuestionType(); ok {
		if err := question.QuestionTypeValidator(v); err != nil {
			return &ValidationError{Name: "question_type", err: fmt.Errorf(`ent: validator failed for field "Question.question_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.QuestionText(); ok {
		if err := question.QuestionTextValidator(v); err != nil {
			return &ValidationError{Name: "question_text", err: fmt.Errorf(`ent: validator failed for field "Question.question_text": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CorrectAnswer(); ok {
		if err := question.CorrectAnswerValidator(v); err != nil {
			return &ValidationError{Name: "correct_answer", err: fmt.Errorf(`ent: validator failed for field "Question.correct_answer": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DifficultyLevel(); ok {
		if err := question.DifficultyLevelValidator(v); err != nil {
			return &ValidationError{Name: "difficulty_level", err: fmt.Errorf(`ent: validator failed for field "Question.difficulty_level": %w`, err)}
		}
	}
	if _u.mutation.WordCleared() && len(_u.mutation.WordIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Question.word"`)
	}
	return nil
}

func (_u *QuestionUpdateOne) sqlSave(ctx context.Context) (_node *Question, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(question.Table, question.Columns, sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Question.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, question.FieldID)
		for _, f := range fields {
			if !question.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != question.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.QuestionType(); ok {
		_spec.SetField(question.FieldQuestionType, field.TypeString, value)
	}
	if value, ok := _u.mutation.QuestionText(); ok {
		_spec.SetField(question.FieldQuestionText, field.TypeString, value)
	}
	if value, ok := _u.mutation.CorrectAnswer(); ok {
		_spec.SetField(question.FieldCorrectAnswer, field.TypeString, value)
	}
	if value, ok := _u.mutation.DifficultyLevel(); ok {
		_spec.SetField(question.FieldDifficultyLevel, field.TypeString, value)
	}
	if _u.mutation.DifficultyLevelCleared() {
		_spec.ClearField(question.FieldDifficultyLevel, field.TypeString)
	}
	if value, ok := _u.mutation.GeneratedAt(); ok {
		_spec.SetField(question.FieldGeneratedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.IsActive(); ok {
		_spec.SetField(question.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Options(); ok {
		_spec.SetField(question.FieldOptions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedOptions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, question.FieldOptions, value)
		})
	}
	if _u.mutation.OptionsCleared() {
		_spec.ClearField(question.FieldOptions, field.TypeJSON)
	}
	if value, ok := _u.mutation.Hints(); ok {
		_spec.SetField(question.FieldHints, field.TypeString, value)
	}
	if _u.mutation.HintsCleared() {
		_spec.ClearField(question.FieldHints, field.TypeString)
	}
	if _u.mutation.WordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.WordTable,
			Columns: []string{question.WordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(word.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.WordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.WordTable,
			Columns: []string{question.WordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(word.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.QuestionReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.QuestionReviewsTable,
			Columns: []string{question.QuestionReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionreview.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedQuestionReviewsIDs(); len(nodes) > 0 && !_u.mutation.QuestionReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.QuestionReviewsTable,
			Columns: []string{question.QuestionReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionreview.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.QuestionReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.QuestionReviewsTable,
			Columns: []string{question.QuestionReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionreview.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.QuestionAttemptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.QuestionAttemptsTable,
			Columns: []string{question.QuestionAttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionattempt.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedQuestionAttemptsIDs(); len(nodes) > 0 && !_u.mutation.QuestionAttemptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.QuestionAttemptsTable,
			Columns: []string{question.QuestionAttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionattempt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.QuestionAttemptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.QuestionAttemptsTable,
			Columns: []string{question.QuestionAttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionattempt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PronunciationAttemptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.PronunciationAttemptsTable,
			Columns: []string{question.PronunciationAttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pronunciationattempt.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPronunciationAttemptsIDs(); len(nodes) > 0 && !_u.mutation.PronunciationAttemptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.PronunciationAttemptsTable,
			Columns: []string{question.PronunciationAttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pronunciationattempt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PronunciationAttemptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.PronunciationAttemptsTable,
			Columns: []string{question.PronunciationAttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pronunciationattempt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Question{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{question.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
