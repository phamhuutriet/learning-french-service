// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"learning-french-service/internal/ent/deck"
	"learning-french-service/internal/ent/user"
	"learning-french-service/internal/ent/word"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeckCreate is the builder for creating a Deck entity.
type DeckCreate struct {
	config
	mutation *DeckMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (_c *DeckCreate) SetName(v string) *DeckCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *DeckCreate) SetDescription(v string) *DeckCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *DeckCreate) SetNillableDescription(v *string) *DeckCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetCategory sets the "category" field.
func (_c *DeckCreate) SetCategory(v string) *DeckCreate {
	_c.mutation.SetCategory(v)
	return _c
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_c *DeckCreate) SetNillableCategory(v *string) *DeckCreate {
	if v != nil {
		_c.SetCategory(*v)
	}
	return _c
}

// SetTargetLevel sets the "target_level" field.
func (_c *DeckCreate) SetTargetLevel(v string) *DeckCreate {
	_c.mutation.SetTargetLevel(v)
	return _c
}

// SetNillableTargetLevel sets the "target_level" field if the given value is not nil.
func (_c *DeckCreate) SetNillableTargetLevel(v *string) *DeckCreate {
	if v != nil {
		_c.SetTargetLevel(*v)
	}
	return _c
}

// SetIsActive sets the "is_active" field.
func (_c *DeckCreate) SetIsActive(v bool) *DeckCreate {
	_c.mutation.SetIsActive(v)
	return _c
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_c *DeckCreate) SetNillableIsActive(v *bool) *DeckCreate {
	if v != nil {
		_c.SetIsActive(*v)
	}
	return _c
}

// SetWordCount sets the "word_count" field.
func (_c *DeckCreate) SetWordCount(v int) *DeckCreate {
	_c.mutation.SetWordCount(v)
	return _c
}

// SetNillableWordCount sets the "word_count" field if the given value is not nil.
func (_c *DeckCreate) SetNillableWordCount(v *int) *DeckCreate {
	if v != nil {
		_c.SetWordCount(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *DeckCreate) SetCreatedAt(v time.Time) *DeckCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *DeckCreate) SetNillableCreatedAt(v *time.Time) *DeckCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *DeckCreate) SetUpdatedAt(v time.Time) *DeckCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *DeckCreate) SetNillableUpdatedAt(v *time.Time) *DeckCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_c *DeckCreate) SetUserID(id int) *DeckCreate {
	_c.mutation.SetUserID(id)
	return _c
}

// SetUser sets the "user" edge to the User entity.
func (_c *DeckCreate) SetUser(v *User) *DeckCreate {
	return _c.SetUserID(v.ID)
}

// AddWordIDs adds the "words" edge to the Word entity by IDs.
func (_c *DeckCreate) AddWordIDs(ids ...int) *DeckCreate {
	_c.mutation.AddWordIDs(ids...)
	return _c
}

// AddWords adds the "words" edges to the Word entity.
func (_c *DeckCreate) AddWords(v ...*Word) *DeckCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddWordIDs(ids...)
}

// Mutation returns the DeckMutation object of the builder.
func (_c *DeckCreate) Mutation() *DeckMutation {
	return _c.mutation
}

// Save creates the Deck in the database.
func (_c *DeckCreate) Save(ctx context.Context) (*Deck, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *DeckCreate) SaveX(ctx context.Context) *Deck {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *DeckCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *DeckCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *DeckCreate) defaults() {
	if _, ok := _c.mutation.IsActive(); !ok {
		v := deck.DefaultIsActive
		_c.mutation.SetIsActive(v)
	}
	if _, ok := _c.mutation.WordCount(); !ok {
		v := deck.DefaultWordCount
		_c.mutation.SetWordCount(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := deck.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := deck.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *DeckCreate) check() error {
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Deck.name"`)}
	}
	if v, ok := _c.mutation.Name(); ok {
		if err := deck.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Deck.name": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Category(); ok {
		if err := deck.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Deck.category": %w`, err)}
		}
	}
	if v, ok := _c.mutation.TargetLevel(); ok {
		if err := deck.TargetLevelValidator(v); err != nil {
			return &ValidationError{Name: "target_level", err: fmt.Errorf(`ent: validator failed for field "Deck.target_level": %w`, err)}
		}
	}
	if _, ok := _c.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "Deck.is_active"`)}
	}
	if _, ok := _c.mutation.WordCount(); !ok {
		return &ValidationError{Name: "word_count", err: errors.New(`ent: missing required field "Deck.word_count"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Deck.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Deck.updated_at"`)}
	}
	if len(_c.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Deck.user"`)}
	}
	return nil
}

func (_c *DeckCreate) sqlSave(ctx context.Context) (*Deck, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *DeckCreate) createSpec() (*Deck, *sqlgraph.CreateSpec) {
	var (
		_node = &Deck{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(deck.Table, sqlgraph.NewFieldSpec(deck.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(deck.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(deck.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.Category(); ok {
		_spec.SetField(deck.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := _c.mutation.TargetLevel(); ok {
		_spec.SetField(deck.FieldTargetLevel, field.TypeString, value)
		_node.TargetLevel = value
	}
	if value, ok := _c.mutation.IsActive(); ok {
		_spec.SetField(deck.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := _c.mutation.WordCount(); ok {
		_spec.SetField(deck.FieldWordCount, field.TypeInt, value)
		_node.WordCount = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(deck.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(deck.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deck.UserTable,
			Columns: []string{deck.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_decks = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.WordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deck.WordsTable,
			Columns: []string{deck.WordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(word.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DeckCreateBulk is the builder for creating many Deck entities in bulk.
type DeckCreateBulk struct {
	config
	err      error
	builders []*DeckCreate
}

// Save creates the Deck entities in the database.
func (_c *DeckCreateBulk) Save(ctx context.Context) ([]*Deck, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Deck, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeckMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *DeckCreateBulk) SaveX(ctx context.Context) []*Deck {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *DeckCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *DeckCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
