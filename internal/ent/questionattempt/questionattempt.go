// Code generated by ent, DO NOT EDIT.

package questionattempt

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the questionattempt type in the database.
	Label = "question_attempt"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserAnswer holds the string denoting the user_answer field in the database.
	FieldUserAnswer = "user_answer"
	// FieldAiGrade holds the string denoting the ai_grade field in the database.
	FieldAiGrade = "ai_grade"
	// FieldAiFeedback holds the string denoting the ai_feedback field in the database.
	FieldAiFeedback = "ai_feedback"
	// FieldSimilarityScore holds the string denoting the similarity_score field in the database.
	FieldSimilarityScore = "similarity_score"
	// FieldQualityRating holds the string denoting the quality_rating field in the database.
	FieldQualityRating = "quality_rating"
	// FieldResponseTimeMs holds the string denoting the response_time_ms field in the database.
	FieldResponseTimeMs = "response_time_ms"
	// FieldWasCorrect holds the string denoting the was_correct field in the database.
	FieldWasCorrect = "was_correct"
	// FieldNeedsRepeat holds the string denoting the needs_repeat field in the database.
	FieldNeedsRepeat = "needs_repeat"
	// FieldAttemptDate holds the string denoting the attempt_date field in the database.
	FieldAttemptDate = "attempt_date"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeQuestion holds the string denoting the question edge name in mutations.
	EdgeQuestion = "question"
	// EdgeQuestionReview holds the string denoting the question_review edge name in mutations.
	EdgeQuestionReview = "question_review"
	// Table holds the table name of the questionattempt in the database.
	Table = "question_attempts"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "question_attempts"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_question_attempts"
	// QuestionTable is the table that holds the question relation/edge.
	QuestionTable = "question_attempts"
	// QuestionInverseTable is the table name for the Question entity.
	// It exists in this package in order to avoid circular dependency with the "question" package.
	QuestionInverseTable = "questions"
	// QuestionColumn is the table column denoting the question relation/edge.
	QuestionColumn = "question_question_attempts"
	// QuestionReviewTable is the table that holds the question_review relation/edge.
	QuestionReviewTable = "question_attempts"
	// QuestionReviewInverseTable is the table name for the QuestionReview entity.
	// It exists in this package in order to avoid circular dependency with the "questionreview" package.
	QuestionReviewInverseTable = "question_reviews"
	// QuestionReviewColumn is the table column denoting the question_review relation/edge.
	QuestionReviewColumn = "question_review_question_attempts"
)

// Columns holds all SQL columns for questionattempt fields.
var Columns = []string{
	FieldID,
	FieldUserAnswer,
	FieldAiGrade,
	FieldAiFeedback,
	FieldSimilarityScore,
	FieldQualityRating,
	FieldResponseTimeMs,
	FieldWasCorrect,
	FieldNeedsRepeat,
	FieldAttemptDate,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "question_attempts"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"question_question_attempts",
	"question_review_question_attempts",
	"user_question_attempts",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// AiGradeValidator is a validator for the "ai_grade" field. It is called by the builders before save.
	AiGradeValidator func(string) error
	// DefaultWasCorrect holds the default value on creation for the "was_correct" field.
	DefaultWasCorrect bool
	// DefaultNeedsRepeat holds the default value on creation for the "needs_repeat" field.
	DefaultNeedsRepeat bool
	// DefaultAttemptDate holds the default value on creation for the "attempt_date" field.
	DefaultAttemptDate func() time.Time
)

// OrderOption defines the ordering options for the QuestionAttempt queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserAnswer orders the results by the user_answer field.
func ByUserAnswer(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserAnswer, opts...).ToFunc()
}

// ByAiGrade orders the results by the ai_grade field.
func ByAiGrade(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAiGrade, opts...).ToFunc()
}

// ByAiFeedback orders the results by the ai_feedback field.
func ByAiFeedback(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAiFeedback, opts...).ToFunc()
}

// BySimilarityScore orders the results by the similarity_score field.
func BySimilarityScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSimilarityScore, opts...).ToFunc()
}

// ByQualityRating orders the results by the quality_rating field.
func ByQualityRating(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQualityRating, opts...).ToFunc()
}

// ByResponseTimeMs orders the results by the response_time_ms field.
func ByResponseTimeMs(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResponseTimeMs, opts...).ToFunc()
}

// ByWasCorrect orders the results by the was_correct field.
func ByWasCorrect(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWasCorrect, opts...).ToFunc()
}

// ByNeedsRepeat orders the results by the needs_repeat field.
func ByNeedsRepeat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNeedsRepeat, opts...).ToFunc()
}

// ByAttemptDate orders the results by the attempt_date field.
func ByAttemptDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAttemptDate, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByQuestionField orders the results by question field.
func ByQuestionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newQuestionStep(), sql.OrderByField(field, opts...))
	}
}

// ByQuestionReviewField orders the results by question_review field.
func ByQuestionReviewField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newQuestionReviewStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newQuestionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(QuestionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, QuestionTable, QuestionColumn),
	)
}
func newQuestionReviewStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(QuestionReviewInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, QuestionReviewTable, QuestionReviewColumn),
	)
}
