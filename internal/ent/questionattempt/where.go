// Code generated by ent, DO NOT EDIT.

package questionattempt

import (
	"learning-french-service/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldLTE(FieldID, id))
}

// UserAnswer applies equality check predicate on the "user_answer" field. It's identical to UserAnswerEQ.
func UserAnswer(v string) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldEQ(FieldUserAnswer, v))
}

// AiGrade applies equality check predicate on the "ai_grade" field. It's identical to AiGradeEQ.
func AiGrade(v string) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldEQ(FieldAiGrade, v))
}

// AiFeedback applies equality check predicate on the "ai_feedback" field. It's identical to AiFeedbackEQ.
func AiFeedback(v string) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldEQ(FieldAiFeedback, v))
}

// SimilarityScore applies equality check predicate on the "similarity_score" field. It's identical to SimilarityScoreEQ.
func SimilarityScore(v float64) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldEQ(FieldSimilarityScore, v))
}

// QualityRating applies equality check predicate on the "quality_rating" field. It's identical to QualityRatingEQ.
func QualityRating(v int) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldEQ(FieldQualityRating, v))
}

// ResponseTimeMs applies equality check predicate on the "response_time_ms" field. It's identical to ResponseTimeMsEQ.
func ResponseTimeMs(v int) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldEQ(FieldResponseTimeMs, v))
}

// WasCorrect applies equality check predicate on the "was_correct" field. It's identical to WasCorrectEQ.
func WasCorrect(v bool) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldEQ(FieldWasCorrect, v))
}

// NeedsRepeat applies equality check predicate on the "needs_repeat" field. It's identical to NeedsRepeatEQ.
func NeedsRepeat(v bool) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldEQ(FieldNeedsRepeat, v))
}

// AttemptDate applies equality check predicate on the "attempt_date" field. It's identical to AttemptDateEQ.
func AttemptDate(v time.Time) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldEQ(FieldAttemptDate, v))
}

// UserAnswerEQ applies the EQ predicate on the "user_answer" field.
func UserAnswerEQ(v string) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldEQ(FieldUserAnswer, v))
}

// UserAnswerNEQ applies the NEQ predicate on the "user_answer" field.
func UserAnswerNEQ(v string) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldNEQ(FieldUserAnswer, v))
}

// UserAnswerIn applies the In predicate on the "user_answer" field.
func UserAnswerIn(vs ...string) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldIn(FieldUserAnswer, vs...))
}

// UserAnswerNotIn applies the NotIn predicate on the "user_answer" field.
func UserAnswerNotIn(vs ...string) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldNotIn(FieldUserAnswer, vs...))
}

// UserAnswerGT applies the GT predicate on the "user_answer" field.
func UserAnswerGT(v string) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldGT(FieldUserAnswer, v))
}

// UserAnswerGTE applies the GTE predicate on the "user_answer" field.
func UserAnswerGTE(v string) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldGTE(FieldUserAnswer, v))
}

// UserAnswerLT applies the LT predicate on the "user_answer" field.
func UserAnswerLT(v string) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldLT(FieldUserAnswer, v))
}

// UserAnswerLTE applies the LTE predicate on the "user_answer" field.
func UserAnswerLTE(v string) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldLTE(FieldUserAnswer, v))
}

// UserAnswerContains applies the Contains predicate on the "user_answer" field.
func UserAnswerContains(v string) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldContains(FieldUserAnswer, v))
}

// UserAnswerHasPrefix applies the HasPrefix predicate on the "user_answer" field.
func UserAnswerHasPrefix(v string) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldHasPrefix(FieldUserAnswer, v))
}

// UserAnswerHasSuffix applies the HasSuffix predicate on the "user_answer" field.
func UserAnswerHasSuffix(v string) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldHasSuffix(FieldUserAnswer, v))
}

// UserAnswerIsNil applies the IsNil predicate on the "user_answer" field.
func UserAnswerIsNil() predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldIsNull(FieldUserAnswer))
}

// UserAnswerNotNil applies the NotNil predicate on the "user_answer" field.
func UserAnswerNotNil() predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldNotNull(FieldUserAnswer))
}

// UserAnswerEqualFold applies the EqualFold predicate on the "user_answer" field.
func UserAnswerEqualFold(v string) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldEqualFold(FieldUserAnswer, v))
}

// UserAnswerContainsFold applies the ContainsFold predicate on the "user_answer" field.
func UserAnswerContainsFold(v string) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldContainsFold(FieldUserAnswer, v))
}

// AiGradeEQ applies the EQ predicate on the "ai_grade" field.
func AiGradeEQ(v string) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldEQ(FieldAiGrade, v))
}

// AiGradeNEQ applies the NEQ predicate on the "ai_grade" field.
func AiGradeNEQ(v string) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldNEQ(FieldAiGrade, v))
}

// AiGradeIn applies the In predicate on the "ai_grade" field.
func AiGradeIn(vs ...string) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldIn(FieldAiGrade, vs...))
}

// AiGradeNotIn applies the NotIn predicate on the "ai_grade" field.
func AiGradeNotIn(vs ...string) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldNotIn(FieldAiGrade, vs...))
}

// AiGradeGT applies the GT predicate on the "ai_grade" field.
func AiGradeGT(v string) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldGT(FieldAiGrade, v))
}

// AiGradeGTE applies the GTE predicate on the "ai_grade" field.
func AiGradeGTE(v string) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldGTE(FieldAiGrade, v))
}

// AiGradeLT applies the LT predicate on the "ai_grade" field.
func AiGradeLT(v string) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldLT(FieldAiGrade, v))
}

// AiGradeLTE applies the LTE predicate on the "ai_grade" field.
func AiGradeLTE(v string) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldLTE(FieldAiGrade, v))
}

// AiGradeContains applies the Contains predicate on the "ai_grade" field.
func AiGradeContains(v string) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldContains(FieldAiGrade, v))
}

// AiGradeHasPrefix applies the HasPrefix predicate on the "ai_grade" field.
func AiGradeHasPrefix(v string) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldHasPrefix(FieldAiGrade, v))
}

// AiGradeHasSuffix applies the HasSuffix predicate on the "ai_grade" field.
func AiGradeHasSuffix(v string) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldHasSuffix(FieldAiGrade, v))
}

// AiGradeIsNil applies the IsNil predicate on the "ai_grade" field.
func AiGradeIsNil() predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldIsNull(FieldAiGrade))
}

// AiGradeNotNil applies the NotNil predicate on the "ai_grade" field.
func AiGradeNotNil() predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldNotNull(FieldAiGrade))
}

// AiGradeEqualFold applies the EqualFold predicate on the "ai_grade" field.
func AiGradeEqualFold(v string) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldEqualFold(FieldAiGrade, v))
}

// AiGradeContainsFold applies the ContainsFold predicate on the "ai_grade" field.
func AiGradeContainsFold(v string) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldContainsFold(FieldAiGrade, v))
}

// AiFeedbackEQ applies the EQ predicate on the "ai_feedback" field.
func AiFeedbackEQ(v string) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldEQ(FieldAiFeedback, v))
}

// AiFeedbackNEQ applies the NEQ predicate on the "ai_feedback" field.
func AiFeedbackNEQ(v string) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldNEQ(FieldAiFeedback, v))
}

// AiFeedbackIn applies the In predicate on the "ai_feedback" field.
func AiFeedbackIn(vs ...string) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldIn(FieldAiFeedback, vs...))
}

// AiFeedbackNotIn applies the NotIn predicate on the "ai_feedback" field.
func AiFeedbackNotIn(vs ...string) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldNotIn(FieldAiFeedback, vs...))
}

// AiFeedbackGT applies the GT predicate on the "ai_feedback" field.
func AiFeedbackGT(v string) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldGT(FieldAiFeedback, v))
}

// AiFeedbackGTE applies the GTE predicate on the "ai_feedback" field.
func AiFeedbackGTE(v string) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldGTE(FieldAiFeedback, v))
}

// AiFeedbackLT applies the LT predicate on the "ai_feedback" field.
func AiFeedbackLT(v string) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldLT(FieldAiFeedback, v))
}

// AiFeedbackLTE applies the LTE predicate on the "ai_feedback" field.
func AiFeedbackLTE(v string) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldLTE(FieldAiFeedback, v))
}

// AiFeedbackContains applies the Contains predicate on the "ai_feedback" field.
func AiFeedbackContains(v string) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldContains(FieldAiFeedback, v))
}

// AiFeedbackHasPrefix applies the HasPrefix predicate on the "ai_feedback" field.
func AiFeedbackHasPrefix(v string) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldHasPrefix(FieldAiFeedback, v))
}

// AiFeedbackHasSuffix applies the HasSuffix predicate on the "ai_feedback" field.
func AiFeedbackHasSuffix(v string) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldHasSuffix(FieldAiFeedback, v))
}

// AiFeedbackIsNil applies the IsNil predicate on the "ai_feedback" field.
func AiFeedbackIsNil() predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldIsNull(FieldAiFeedback))
}

// AiFeedbackNotNil applies the NotNil predicate on the "ai_feedback" field.
func AiFeedbackNotNil() predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldNotNull(FieldAiFeedback))
}

// AiFeedbackEqualFold applies the EqualFold predicate on the "ai_feedback" field.
func AiFeedbackEqualFold(v string) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldEqualFold(FieldAiFeedback, v))
}

// AiFeedbackContainsFold applies the ContainsFold predicate on the "ai_feedback" field.
func AiFeedbackContainsFold(v string) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldContainsFold(FieldAiFeedback, v))
}

// SimilarityScoreEQ applies the EQ predicate on the "similarity_score" field.
func SimilarityScoreEQ(v float64) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldEQ(FieldSimilarityScore, v))
}

// SimilarityScoreNEQ applies the NEQ predicate on the "similarity_score" field.
func SimilarityScoreNEQ(v float64) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldNEQ(FieldSimilarityScore, v))
}

// SimilarityScoreIn applies the In predicate on the "similarity_score" field.
func SimilarityScoreIn(vs ...float64) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldIn(FieldSimilarityScore, vs...))
}

// SimilarityScoreNotIn applies the NotIn predicate on the "similarity_score" field.
func SimilarityScoreNotIn(vs ...float64) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldNotIn(FieldSimilarityScore, vs...))
}

// SimilarityScoreGT applies the GT predicate on the "similarity_score" field.
func SimilarityScoreGT(v float64) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldGT(FieldSimilarityScore, v))
}

// SimilarityScoreGTE applies the GTE predicate on the "similarity_score" field.
func SimilarityScoreGTE(v float64) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldGTE(FieldSimilarityScore, v))
}

// SimilarityScoreLT applies the LT predicate on the "similarity_score" field.
func SimilarityScoreLT(v float64) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldLT(FieldSimilarityScore, v))
}

// SimilarityScoreLTE applies the LTE predicate on the "similarity_score" field.
func SimilarityScoreLTE(v float64) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldLTE(FieldSimilarityScore, v))
}

// SimilarityScoreIsNil applies the IsNil predicate on the "similarity_score" field.
func SimilarityScoreIsNil() predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldIsNull(FieldSimilarityScore))
}

// SimilarityScoreNotNil applies the NotNil predicate on the "similarity_score" field.
func SimilarityScoreNotNil() predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldNotNull(FieldSimilarityScore))
}

// QualityRatingEQ applies the EQ predicate on the "quality_rating" field.
func QualityRatingEQ(v int) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldEQ(FieldQualityRating, v))
}

// QualityRatingNEQ applies the NEQ predicate on the "quality_rating" field.
func QualityRatingNEQ(v int) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldNEQ(FieldQualityRating, v))
}

// QualityRatingIn applies the In predicate on the "quality_rating" field.
func QualityRatingIn(vs ...int) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldIn(FieldQualityRating, vs...))
}

// QualityRatingNotIn applies the NotIn predicate on the "quality_rating" field.
func QualityRatingNotIn(vs ...int) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldNotIn(FieldQualityRating, vs...))
}

// QualityRatingGT applies the GT predicate on the "quality_rating" field.
func QualityRatingGT(v int) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldGT(FieldQualityRating, v))
}

// QualityRatingGTE applies the GTE predicate on the "quality_rating" field.
func QualityRatingGTE(v int) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldGTE(FieldQualityRating, v))
}

// QualityRatingLT applies the LT predicate on the "quality_rating" field.
func QualityRatingLT(v int) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldLT(FieldQualityRating, v))
}

// QualityRatingLTE applies the LTE predicate on the "quality_rating" field.
func QualityRatingLTE(v int) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldLTE(FieldQualityRating, v))
}

// QualityRatingIsNil applies the IsNil predicate on the "quality_rating" field.
func QualityRatingIsNil() predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldIsNull(FieldQualityRating))
}

// QualityRatingNotNil applies the NotNil predicate on the "quality_rating" field.
func QualityRatingNotNil() predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldNotNull(FieldQualityRating))
}

// ResponseTimeMsEQ applies the EQ predicate on the "response_time_ms" field.
func ResponseTimeMsEQ(v int) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldEQ(FieldResponseTimeMs, v))
}

// ResponseTimeMsNEQ applies the NEQ predicate on the "response_time_ms" field.
func ResponseTimeMsNEQ(v int) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldNEQ(FieldResponseTimeMs, v))
}

// ResponseTimeMsIn applies the In predicate on the "response_time_ms" field.
func ResponseTimeMsIn(vs ...int) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldIn(FieldResponseTimeMs, vs...))
}

// ResponseTimeMsNotIn applies the NotIn predicate on the "response_time_ms" field.
func ResponseTimeMsNotIn(vs ...int) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldNotIn(FieldResponseTimeMs, vs...))
}

// ResponseTimeMsGT applies the GT predicate on the "response_time_ms" field.
func ResponseTimeMsGT(v int) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldGT(FieldResponseTimeMs, v))
}

// ResponseTimeMsGTE applies the GTE predicate on the "response_time_ms" field.
func ResponseTimeMsGTE(v int) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldGTE(FieldResponseTimeMs, v))
}

// ResponseTimeMsLT applies the LT predicate on the "response_time_ms" field.
func ResponseTimeMsLT(v int) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldLT(FieldResponseTimeMs, v))
}

// ResponseTimeMsLTE applies the LTE predicate on the "response_time_ms" field.
func ResponseTimeMsLTE(v int) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldLTE(FieldResponseTimeMs, v))
}

// ResponseTimeMsIsNil applies the IsNil predicate on the "response_time_ms" field.
func ResponseTimeMsIsNil() predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldIsNull(FieldResponseTimeMs))
}

// ResponseTimeMsNotNil applies the NotNil predicate on the "response_time_ms" field.
func ResponseTimeMsNotNil() predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldNotNull(FieldResponseTimeMs))
}

// WasCorrectEQ applies the EQ predicate on the "was_correct" field.
func WasCorrectEQ(v bool) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldEQ(FieldWasCorrect, v))
}

// WasCorrectNEQ applies the NEQ predicate on the "was_correct" field.
func WasCorrectNEQ(v bool) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldNEQ(FieldWasCorrect, v))
}

// NeedsRepeatEQ applies the EQ predicate on the "needs_repeat" field.
func NeedsRepeatEQ(v bool) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldEQ(FieldNeedsRepeat, v))
}

// NeedsRepeatNEQ applies the NEQ predicate on the "needs_repeat" field.
func NeedsRepeatNEQ(v bool) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldNEQ(FieldNeedsRepeat, v))
}

// AttemptDateEQ applies the EQ predicate on the "attempt_date" field.
func AttemptDateEQ(v time.Time) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldEQ(FieldAttemptDate, v))
}

// AttemptDateNEQ applies the NEQ predicate on the "attempt_date" field.
func AttemptDateNEQ(v time.Time) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldNEQ(FieldAttemptDate, v))
}

// AttemptDateIn applies the In predicate on the "attempt_date" field.
func AttemptDateIn(vs ...time.Time) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldIn(FieldAttemptDate, vs...))
}

// AttemptDateNotIn applies the NotIn predicate on the "attempt_date" field.
func AttemptDateNotIn(vs ...time.Time) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldNotIn(FieldAttemptDate, vs...))
}

// AttemptDateGT applies the GT predicate on the "attempt_date" field.
func AttemptDateGT(v time.Time) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldGT(FieldAttemptDate, v))
}

// AttemptDateGTE applies the GTE predicate on the "attempt_date" field.
func AttemptDateGTE(v time.Time) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldGTE(FieldAttemptDate, v))
}

// AttemptDateLT applies the LT predicate on the "attempt_date" field.
func AttemptDateLT(v time.Time) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldLT(FieldAttemptDate, v))
}

// AttemptDateLTE applies the LTE predicate on the "attempt_date" field.
func AttemptDateLTE(v time.Time) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.FieldLTE(FieldAttemptDate, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.QuestionAttempt {
	return predicate.QuestionAttempt(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasQuestion applies the HasEdge predicate on the "question" edge.
func HasQuestion() predicate.QuestionAttempt {
	return predicate.QuestionAttempt(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, QuestionTable, QuestionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQuestionWith applies the HasEdge predicate on the "question" edge with a given conditions (other predicates).
func HasQuestionWith(preds ...predicate.Question) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(func(s *sql.Selector) {
		step := newQuestionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasQuestionReview applies the HasEdge predicate on the "question_review" edge.
func HasQuestionReview() predicate.QuestionAttempt {
	return predicate.QuestionAttempt(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, QuestionReviewTable, QuestionReviewColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQuestionReviewWith applies the HasEdge predicate on the "question_review" edge with a given conditions (other predicates).
func HasQuestionReviewWith(preds ...predicate.QuestionReview) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(func(s *sql.Selector) {
		step := newQuestionReviewStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.QuestionAttempt) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.QuestionAttempt) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.QuestionAttempt) predicate.QuestionAttempt {
	return predicate.QuestionAttempt(sql.NotPredicates(p))
}
