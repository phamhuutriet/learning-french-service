// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"learning-french-service/internal/ent/question"
	"learning-french-service/internal/ent/questionattempt"
	"learning-french-service/internal/ent/questionreview"
	"learning-french-service/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// QuestionReviewCreate is the builder for creating a QuestionReview entity.
type QuestionReviewCreate struct {
	config
	mutation *QuestionReviewMutation
	hooks    []Hook
}

// SetEaseFactor sets the "ease_factor" field.
func (_c *QuestionReviewCreate) SetEaseFactor(v float64) *QuestionReviewCreate {
	_c.mutation.SetEaseFactor(v)
	return _c
}

// SetNillableEaseFactor sets the "ease_factor" field if the given value is not nil.
func (_c *QuestionReviewCreate) SetNillableEaseFactor(v *float64) *QuestionReviewCreate {
	if v != nil {
		_c.SetEaseFactor(*v)
	}
	return _c
}

// SetIntervalDays sets the "interval_days" field.
func (_c *QuestionReviewCreate) SetIntervalDays(v int) *QuestionReviewCreate {
	_c.mutation.SetIntervalDays(v)
	return _c
}

// SetNillableIntervalDays sets the "interval_days" field if the given value is not nil.
func (_c *QuestionReviewCreate) SetNillableIntervalDays(v *int) *QuestionReviewCreate {
	if v != nil {
		_c.SetIntervalDays(*v)
	}
	return _c
}

// SetRepetitionCount sets the "repetition_count" field.
func (_c *QuestionReviewCreate) SetRepetitionCount(v int) *QuestionReviewCreate {
	_c.mutation.SetRepetitionCount(v)
	return _c
}

// SetNillableRepetitionCount sets the "repetition_count" field if the given value is not nil.
func (_c *QuestionReviewCreate) SetNillableRepetitionCount(v *int) *QuestionReviewCreate {
	if v != nil {
		_c.SetRepetitionCount(*v)
	}
	return _c
}

// SetNextReviewDate sets the "next_review_date" field.
func (_c *QuestionReviewCreate) SetNextReviewDate(v time.Time) *QuestionReviewCreate {
	_c.mutation.SetNextReviewDate(v)
	return _c
}

// SetNillableNextReviewDate sets the "next_review_date" field if the given value is not nil.
func (_c *QuestionReviewCreate) SetNillableNextReviewDate(v *time.Time) *QuestionReviewCreate {
	if v != nil {
		_c.SetNextReviewDate(*v)
	}
	return _c
}

// SetLastReviewedAt sets the "last_reviewed_at" field.
func (_c *QuestionReviewCreate) SetLastReviewedAt(v time.Time) *QuestionReviewCreate {
	_c.mutation.SetLastReviewedAt(v)
	return _c
}

// SetNillableLastReviewedAt sets the "last_reviewed_at" field if the given value is not nil.
func (_c *QuestionReviewCreate) SetNillableLastReviewedAt(v *time.Time) *QuestionReviewCreate {
	if v != nil {
		_c.SetLastReviewedAt(*v)
	}
	return _c
}

// SetIsDue sets the "is_due" field.
func (_c *QuestionReviewCreate) SetIsDue(v bool) *QuestionReviewCreate {
	_c.mutation.SetIsDue(v)
	return _c
}

// SetNillableIsDue sets the "is_due" field if the given value is not nil.
func (_c *QuestionReviewCreate) SetNillableIsDue(v *bool) *QuestionReviewCreate {
	if v != nil {
		_c.SetIsDue(*v)
	}
	return _c
}

// SetTotalAttempts sets the "total_attempts" field.
func (_c *QuestionReviewCreate) SetTotalAttempts(v int) *QuestionReviewCreate {
	_c.mutation.SetTotalAttempts(v)
	return _c
}

// SetNillableTotalAttempts sets the "total_attempts" field if the given value is not nil.
func (_c *QuestionReviewCreate) SetNillableTotalAttempts(v *int) *QuestionReviewCreate {
	if v != nil {
		_c.SetTotalAttempts(*v)
	}
	return _c
}

// SetCorrectAttempts sets the "correct_attempts" field.
func (_c *QuestionReviewCreate) SetCorrectAttempts(v int) *QuestionReviewCreate {
	_c.mutation.SetCorrectAttempts(v)
	return _c
}

// SetNillableCorrectAttempts sets the "correct_attempts" field if the given value is not nil.
func (_c *QuestionReviewCreate) SetNillableCorrectAttempts(v *int) *QuestionReviewCreate {
	if v != nil {
		_c.SetCorrectAttempts(*v)
	}
	return _c
}

// SetAccuracyRate sets the "accuracy_rate" field.
func (_c *QuestionReviewCreate) SetAccuracyRate(v float64) *QuestionReviewCreate {
	_c.mutation.SetAccuracyRate(v)
	return _c
}

// SetNillableAccuracyRate sets the "accuracy_rate" field if the given value is not nil.
func (_c *QuestionReviewCreate) SetNillableAccuracyRate(v *float64) *QuestionReviewCreate {
	if v != nil {
		_c.SetAccuracyRate(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *QuestionReviewCreate) SetCreatedAt(v time.Time) *QuestionReviewCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *QuestionReviewCreate) SetNillableCreatedAt(v *time.Time) *QuestionReviewCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *QuestionReviewCreate) SetUpdatedAt(v time.Time) *QuestionReviewCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *QuestionReviewCreate) SetNillableUpdatedAt(v *time.Time) *QuestionReviewCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_c *QuestionReviewCreate) SetUserID(id int) *QuestionReviewCreate {
	_c.mutation.SetUserID(id)
	return _c
}

// SetUser sets the "user" edge to the User entity.
func (_c *QuestionReviewCreate) SetUser(v *User) *QuestionReviewCreate {
	return _c.SetUserID(v.ID)
}

// SetQuestionID sets the "question" edge to the Question entity by ID.
func (_c *QuestionReviewCreate) SetQuestionID(id int) *QuestionReviewCreate {
	_c.mutation.SetQuestionID(id)
	return _c
}

// SetQuestion sets the "question" edge to the Question entity.
func (_c *QuestionReviewCreate) SetQuestion(v *Question) *QuestionReviewCreate {
	return _c.SetQuestionID(v.ID)
}

// AddQuestionAttemptIDs adds the "question_attempts" edge to the QuestionAttempt entity by IDs.
func (_c *QuestionReviewCreate) AddQuestionAttemptIDs(ids ...int) *QuestionReviewCreate {
	_c.mutation.AddQuestionAttemptIDs(ids...)
	return _c
}

// AddQuestionAttempts adds the "question_attempts" edges to the QuestionAttempt entity.
func (_c *QuestionReviewCreate) AddQuestionAttempts(v ...*QuestionAttempt) *QuestionReviewCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddQuestionAttemptIDs(ids...)
}

// Mutation returns the QuestionReviewMutation object of the builder.
func (_c *QuestionReviewCreate) Mutation() *QuestionReviewMutation {
	return _c.mutation
}

// Save creates the QuestionReview in the database.
func (_c *QuestionReviewCreate) Save(ctx context.Context) (*QuestionReview, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *QuestionReviewCreate) SaveX(ctx context.Context) *QuestionReview {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *QuestionReviewCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *QuestionReviewCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *QuestionReviewCreate) defaults() {
	if _, ok := _c.mutation.EaseFactor(); !ok {
		v := questionreview.DefaultEaseFactor
		_c.mutation.SetEaseFactor(v)
	}
	if _, ok := _c.mutation.IntervalDays(); !ok {
		v := questionreview.DefaultIntervalDays
		_c.mutation.SetIntervalDays(v)
	}
	if _, ok := _c.mutation.RepetitionCount(); !ok {
		v := questionreview.DefaultRepetitionCount
		_c.mutation.SetRepetitionCount(v)
	}
	if _, ok := _c.mutation.NextReviewDate(); !ok {
		v := questionreview.DefaultNextReviewDate()
		_c.mutation.SetNextReviewDate(v)
	}
	if _, ok := _c.mutation.IsDue(); !ok {
		v := questionreview.DefaultIsDue
		_c.mutation.SetIsDue(v)
	}
	if _, ok := _c.mutation.TotalAttempts(); !ok {
		v := questionreview.DefaultTotalAttempts
		_c.mutation.SetTotalAttempts(v)
	}
	if _, ok := _c.mutation.CorrectAttempts(); !ok {
		v := questionreview.DefaultCorrectAttempts
		_c.mutation.SetCorrectAttempts(v)
	}
	if _, ok := _c.mutation.AccuracyRate(); !ok {
		v := questionreview.DefaultAccuracyRate
		_c.mutation.SetAccuracyRate(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := questionreview.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := questionreview.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *QuestionReviewCreate) check() error {
	if _, ok := _c.mutation.EaseFactor(); !ok {
		return &ValidationError{Name: "ease_factor", err: errors.New(`ent: missing required field "QuestionReview.ease_factor"`)}
	}
	if _, ok := _c.mutation.IntervalDays(); !ok {
		return &ValidationError{Name: "interval_days", err: errors.New(`ent: missing required field "QuestionReview.interval_days"`)}
	}
	if _, ok := _c.mutation.RepetitionCount(); !ok {
		return &ValidationError{Name: "repetition_count", err: errors.New(`ent: missing required field "QuestionReview.repetition_count"`)}
	}
	if _, ok := _c.mutation.NextReviewDate(); !ok {
		return &ValidationError{Name: "next_review_date", err: errors.New(`ent: missing required field "QuestionReview.next_review_date"`)}
	}
	if _, ok := _c.mutation.IsDue(); !ok {
		return &ValidationError{Name: "is_due", err: errors.New(`ent: missing required field "QuestionReview.is_due"`)}
	}
	if _, ok := _c.mutation.TotalAttempts(); !ok {
		return &ValidationError{Name: "total_attempts", err: errors.New(`ent: missing required field "QuestionReview.total_attempts"`)}
	}
	if _, ok := _c.mutation.CorrectAttempts(); !ok {
		return &ValidationError{Name: "correct_attempts", err: errors.New(`ent: missing required field "QuestionReview.correct_attempts"`)}
	}
	if _, ok := _c.mutation.AccuracyRate(); !ok {
		return &ValidationError{Name: "accuracy_rate", err: errors.New(`ent: missing required field "QuestionReview.accuracy_rate"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "QuestionReview.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "QuestionReview.updated_at"`)}
	}
	if len(_c.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "QuestionReview.user"`)}
	}
	if len(_c.mutation.QuestionIDs()) == 0 {
		return &ValidationError{Name: "question", err: errors.New(`ent: missing required edge "QuestionReview.question"`)}
	}
	return nil
}

func (_c *QuestionReviewCreate) sqlSave(ctx context.Context) (*QuestionReview, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *QuestionReviewCreate) createSpec() (*QuestionReview, *sqlgraph.CreateSpec) {
	var (
		_node = &QuestionReview{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(questionreview.Table, sqlgraph.NewFieldSpec(questionreview.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.EaseFactor(); ok {
		_spec.SetField(questionreview.FieldEaseFactor, field.TypeFloat64, value)
		_node.EaseFactor = value
	}
	if value, ok := _c.mutation.IntervalDays(); ok {
		_spec.SetField(questionreview.FieldIntervalDays, field.TypeInt, value)
		_node.IntervalDays = value
	}
	if value, ok := _c.mutation.RepetitionCount(); ok {
		_spec.SetField(questionreview.FieldRepetitionCount, field.TypeInt, value)
		_node.RepetitionCount = value
	}
	if value, ok := _c.mutation.NextReviewDate(); ok {
		_spec.SetField(questionreview.FieldNextReviewDate, field.TypeTime, value)
		_node.NextReviewDate = value
	}
	if value, ok := _c.mutation.LastReviewedAt(); ok {
		_spec.SetField(questionreview.FieldLastReviewedAt, field.TypeTime, value)
		_node.LastReviewedAt = value
	}
	if value, ok := _c.mutation.IsDue(); ok {
		_spec.SetField(questionreview.FieldIsDue, field.TypeBool, value)
		_node.IsDue = value
	}
	if value, ok := _c.mutation.TotalAttempts(); ok {
		_spec.SetField(questionreview.FieldTotalAttempts, field.TypeInt, value)
		_node.TotalAttempts = value
	}
	if value, ok := _c.mutation.CorrectAttempts(); ok {
		_spec.SetField(questionreview.FieldCorrectAttempts, field.TypeInt, value)
		_node.CorrectAttempts = value
	}
	if value, ok := _c.mutation.AccuracyRate(); ok {
		_spec.SetField(questionreview.FieldAccuracyRate, field.TypeFloat64, value)
		_node.AccuracyRate = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(questionreview.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(questionreview.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionreview.UserTable,
			Columns: []string{questionreview.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_question_reviews = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionreview.QuestionTable,
			Columns: []string{questionreview.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.question_question_reviews = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.QuestionAttemptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   questionreview.QuestionAttemptsTable,
			Columns: []string{questionreview.QuestionAttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionattempt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// QuestionReviewCreateBulk is the builder for creating many QuestionReview entities in bulk.
type QuestionReviewCreateBulk struct {
	config
	err      error
	builders []*QuestionReviewCreate
}

// Save creates the QuestionReview entities in the database.
func (_c *QuestionReviewCreateBulk) Save(ctx context.Context) ([]*QuestionReview, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*QuestionReview, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*QuestionReviewMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *QuestionReviewCreateBulk) SaveX(ctx context.Context) []*QuestionReview {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *QuestionReviewCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *QuestionReviewCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
