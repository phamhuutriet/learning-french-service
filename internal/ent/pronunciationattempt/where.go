// Code generated by ent, DO NOT EDIT.

package pronunciationattempt

import (
	"learning-french-service/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldLTE(FieldID, id))
}

// UserAudioURL applies equality check predicate on the "user_audio_url" field. It's identical to UserAudioURLEQ.
func UserAudioURL(v string) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldEQ(FieldUserAudioURL, v))
}

// ReferenceAudioURL applies equality check predicate on the "reference_audio_url" field. It's identical to ReferenceAudioURLEQ.
func ReferenceAudioURL(v string) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldEQ(FieldReferenceAudioURL, v))
}

// SimilarityScore applies equality check predicate on the "similarity_score" field. It's identical to SimilarityScoreEQ.
func SimilarityScore(v float64) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldEQ(FieldSimilarityScore, v))
}

// PronunciationFeedback applies equality check predicate on the "pronunciation_feedback" field. It's identical to PronunciationFeedbackEQ.
func PronunciationFeedback(v string) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldEQ(FieldPronunciationFeedback, v))
}

// AttemptDate applies equality check predicate on the "attempt_date" field. It's identical to AttemptDateEQ.
func AttemptDate(v time.Time) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldEQ(FieldAttemptDate, v))
}

// WasSuccessful applies equality check predicate on the "was_successful" field. It's identical to WasSuccessfulEQ.
func WasSuccessful(v bool) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldEQ(FieldWasSuccessful, v))
}

// UserAudioURLEQ applies the EQ predicate on the "user_audio_url" field.
func UserAudioURLEQ(v string) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldEQ(FieldUserAudioURL, v))
}

// UserAudioURLNEQ applies the NEQ predicate on the "user_audio_url" field.
func UserAudioURLNEQ(v string) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldNEQ(FieldUserAudioURL, v))
}

// UserAudioURLIn applies the In predicate on the "user_audio_url" field.
func UserAudioURLIn(vs ...string) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldIn(FieldUserAudioURL, vs...))
}

// UserAudioURLNotIn applies the NotIn predicate on the "user_audio_url" field.
func UserAudioURLNotIn(vs ...string) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldNotIn(FieldUserAudioURL, vs...))
}

// UserAudioURLGT applies the GT predicate on the "user_audio_url" field.
func UserAudioURLGT(v string) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldGT(FieldUserAudioURL, v))
}

// UserAudioURLGTE applies the GTE predicate on the "user_audio_url" field.
func UserAudioURLGTE(v string) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldGTE(FieldUserAudioURL, v))
}

// UserAudioURLLT applies the LT predicate on the "user_audio_url" field.
func UserAudioURLLT(v string) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldLT(FieldUserAudioURL, v))
}

// UserAudioURLLTE applies the LTE predicate on the "user_audio_url" field.
func UserAudioURLLTE(v string) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldLTE(FieldUserAudioURL, v))
}

// UserAudioURLContains applies the Contains predicate on the "user_audio_url" field.
func UserAudioURLContains(v string) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldContains(FieldUserAudioURL, v))
}

// UserAudioURLHasPrefix applies the HasPrefix predicate on the "user_audio_url" field.
func UserAudioURLHasPrefix(v string) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldHasPrefix(FieldUserAudioURL, v))
}

// UserAudioURLHasSuffix applies the HasSuffix predicate on the "user_audio_url" field.
func UserAudioURLHasSuffix(v string) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldHasSuffix(FieldUserAudioURL, v))
}

// UserAudioURLEqualFold applies the EqualFold predicate on the "user_audio_url" field.
func UserAudioURLEqualFold(v string) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldEqualFold(FieldUserAudioURL, v))
}

// UserAudioURLContainsFold applies the ContainsFold predicate on the "user_audio_url" field.
func UserAudioURLContainsFold(v string) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldContainsFold(FieldUserAudioURL, v))
}

// ReferenceAudioURLEQ applies the EQ predicate on the "reference_audio_url" field.
func ReferenceAudioURLEQ(v string) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldEQ(FieldReferenceAudioURL, v))
}

// ReferenceAudioURLNEQ applies the NEQ predicate on the "reference_audio_url" field.
func ReferenceAudioURLNEQ(v string) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldNEQ(FieldReferenceAudioURL, v))
}

// ReferenceAudioURLIn applies the In predicate on the "reference_audio_url" field.
func ReferenceAudioURLIn(vs ...string) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldIn(FieldReferenceAudioURL, vs...))
}

// ReferenceAudioURLNotIn applies the NotIn predicate on the "reference_audio_url" field.
func ReferenceAudioURLNotIn(vs ...string) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldNotIn(FieldReferenceAudioURL, vs...))
}

// ReferenceAudioURLGT applies the GT predicate on the "reference_audio_url" field.
func ReferenceAudioURLGT(v string) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldGT(FieldReferenceAudioURL, v))
}

// ReferenceAudioURLGTE applies the GTE predicate on the "reference_audio_url" field.
func ReferenceAudioURLGTE(v string) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldGTE(FieldReferenceAudioURL, v))
}

// ReferenceAudioURLLT applies the LT predicate on the "reference_audio_url" field.
func ReferenceAudioURLLT(v string) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldLT(FieldReferenceAudioURL, v))
}

// ReferenceAudioURLLTE applies the LTE predicate on the "reference_audio_url" field.
func ReferenceAudioURLLTE(v string) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldLTE(FieldReferenceAudioURL, v))
}

// ReferenceAudioURLContains applies the Contains predicate on the "reference_audio_url" field.
func ReferenceAudioURLContains(v string) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldContains(FieldReferenceAudioURL, v))
}

// ReferenceAudioURLHasPrefix applies the HasPrefix predicate on the "reference_audio_url" field.
func ReferenceAudioURLHasPrefix(v string) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldHasPrefix(FieldReferenceAudioURL, v))
}

// ReferenceAudioURLHasSuffix applies the HasSuffix predicate on the "reference_audio_url" field.
func ReferenceAudioURLHasSuffix(v string) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldHasSuffix(FieldReferenceAudioURL, v))
}

// ReferenceAudioURLIsNil applies the IsNil predicate on the "reference_audio_url" field.
func ReferenceAudioURLIsNil() predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldIsNull(FieldReferenceAudioURL))
}

// ReferenceAudioURLNotNil applies the NotNil predicate on the "reference_audio_url" field.
func ReferenceAudioURLNotNil() predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldNotNull(FieldReferenceAudioURL))
}

// ReferenceAudioURLEqualFold applies the EqualFold predicate on the "reference_audio_url" field.
func ReferenceAudioURLEqualFold(v string) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldEqualFold(FieldReferenceAudioURL, v))
}

// ReferenceAudioURLContainsFold applies the ContainsFold predicate on the "reference_audio_url" field.
func ReferenceAudioURLContainsFold(v string) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldContainsFold(FieldReferenceAudioURL, v))
}

// SimilarityScoreEQ applies the EQ predicate on the "similarity_score" field.
func SimilarityScoreEQ(v float64) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldEQ(FieldSimilarityScore, v))
}

// SimilarityScoreNEQ applies the NEQ predicate on the "similarity_score" field.
func SimilarityScoreNEQ(v float64) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldNEQ(FieldSimilarityScore, v))
}

// SimilarityScoreIn applies the In predicate on the "similarity_score" field.
func SimilarityScoreIn(vs ...float64) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldIn(FieldSimilarityScore, vs...))
}

// SimilarityScoreNotIn applies the NotIn predicate on the "similarity_score" field.
func SimilarityScoreNotIn(vs ...float64) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldNotIn(FieldSimilarityScore, vs...))
}

// SimilarityScoreGT applies the GT predicate on the "similarity_score" field.
func SimilarityScoreGT(v float64) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldGT(FieldSimilarityScore, v))
}

// SimilarityScoreGTE applies the GTE predicate on the "similarity_score" field.
func SimilarityScoreGTE(v float64) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldGTE(FieldSimilarityScore, v))
}

// SimilarityScoreLT applies the LT predicate on the "similarity_score" field.
func SimilarityScoreLT(v float64) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldLT(FieldSimilarityScore, v))
}

// SimilarityScoreLTE applies the LTE predicate on the "similarity_score" field.
func SimilarityScoreLTE(v float64) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldLTE(FieldSimilarityScore, v))
}

// SimilarityScoreIsNil applies the IsNil predicate on the "similarity_score" field.
func SimilarityScoreIsNil() predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldIsNull(FieldSimilarityScore))
}

// SimilarityScoreNotNil applies the NotNil predicate on the "similarity_score" field.
func SimilarityScoreNotNil() predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldNotNull(FieldSimilarityScore))
}

// PronunciationFeedbackEQ applies the EQ predicate on the "pronunciation_feedback" field.
func PronunciationFeedbackEQ(v string) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldEQ(FieldPronunciationFeedback, v))
}

// PronunciationFeedbackNEQ applies the NEQ predicate on the "pronunciation_feedback" field.
func PronunciationFeedbackNEQ(v string) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldNEQ(FieldPronunciationFeedback, v))
}

// PronunciationFeedbackIn applies the In predicate on the "pronunciation_feedback" field.
func PronunciationFeedbackIn(vs ...string) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldIn(FieldPronunciationFeedback, vs...))
}

// PronunciationFeedbackNotIn applies the NotIn predicate on the "pronunciation_feedback" field.
func PronunciationFeedbackNotIn(vs ...string) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldNotIn(FieldPronunciationFeedback, vs...))
}

// PronunciationFeedbackGT applies the GT predicate on the "pronunciation_feedback" field.
func PronunciationFeedbackGT(v string) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldGT(FieldPronunciationFeedback, v))
}

// PronunciationFeedbackGTE applies the GTE predicate on the "pronunciation_feedback" field.
func PronunciationFeedbackGTE(v string) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldGTE(FieldPronunciationFeedback, v))
}

// PronunciationFeedbackLT applies the LT predicate on the "pronunciation_feedback" field.
func PronunciationFeedbackLT(v string) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldLT(FieldPronunciationFeedback, v))
}

// PronunciationFeedbackLTE applies the LTE predicate on the "pronunciation_feedback" field.
func PronunciationFeedbackLTE(v string) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldLTE(FieldPronunciationFeedback, v))
}

// PronunciationFeedbackContains applies the Contains predicate on the "pronunciation_feedback" field.
func PronunciationFeedbackContains(v string) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldContains(FieldPronunciationFeedback, v))
}

// PronunciationFeedbackHasPrefix applies the HasPrefix predicate on the "pronunciation_feedback" field.
func PronunciationFeedbackHasPrefix(v string) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldHasPrefix(FieldPronunciationFeedback, v))
}

// PronunciationFeedbackHasSuffix applies the HasSuffix predicate on the "pronunciation_feedback" field.
func PronunciationFeedbackHasSuffix(v string) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldHasSuffix(FieldPronunciationFeedback, v))
}

// PronunciationFeedbackIsNil applies the IsNil predicate on the "pronunciation_feedback" field.
func PronunciationFeedbackIsNil() predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldIsNull(FieldPronunciationFeedback))
}

// PronunciationFeedbackNotNil applies the NotNil predicate on the "pronunciation_feedback" field.
func PronunciationFeedbackNotNil() predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldNotNull(FieldPronunciationFeedback))
}

// PronunciationFeedbackEqualFold applies the EqualFold predicate on the "pronunciation_feedback" field.
func PronunciationFeedbackEqualFold(v string) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldEqualFold(FieldPronunciationFeedback, v))
}

// PronunciationFeedbackContainsFold applies the ContainsFold predicate on the "pronunciation_feedback" field.
func PronunciationFeedbackContainsFold(v string) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldContainsFold(FieldPronunciationFeedback, v))
}

// PhoneticAccuracyIsNil applies the IsNil predicate on the "phonetic_accuracy" field.
func PhoneticAccuracyIsNil() predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldIsNull(FieldPhoneticAccuracy))
}

// PhoneticAccuracyNotNil applies the NotNil predicate on the "phonetic_accuracy" field.
func PhoneticAccuracyNotNil() predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldNotNull(FieldPhoneticAccuracy))
}

// AttemptDateEQ applies the EQ predicate on the "attempt_date" field.
func AttemptDateEQ(v time.Time) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldEQ(FieldAttemptDate, v))
}

// AttemptDateNEQ applies the NEQ predicate on the "attempt_date" field.
func AttemptDateNEQ(v time.Time) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldNEQ(FieldAttemptDate, v))
}

// AttemptDateIn applies the In predicate on the "attempt_date" field.
func AttemptDateIn(vs ...time.Time) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldIn(FieldAttemptDate, vs...))
}

// AttemptDateNotIn applies the NotIn predicate on the "attempt_date" field.
func AttemptDateNotIn(vs ...time.Time) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldNotIn(FieldAttemptDate, vs...))
}

// AttemptDateGT applies the GT predicate on the "attempt_date" field.
func AttemptDateGT(v time.Time) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldGT(FieldAttemptDate, v))
}

// AttemptDateGTE applies the GTE predicate on the "attempt_date" field.
func AttemptDateGTE(v time.Time) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldGTE(FieldAttemptDate, v))
}

// AttemptDateLT applies the LT predicate on the "attempt_date" field.
func AttemptDateLT(v time.Time) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldLT(FieldAttemptDate, v))
}

// AttemptDateLTE applies the LTE predicate on the "attempt_date" field.
func AttemptDateLTE(v time.Time) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldLTE(FieldAttemptDate, v))
}

// WasSuccessfulEQ applies the EQ predicate on the "was_successful" field.
func WasSuccessfulEQ(v bool) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldEQ(FieldWasSuccessful, v))
}

// WasSuccessfulNEQ applies the NEQ predicate on the "was_successful" field.
func WasSuccessfulNEQ(v bool) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldNEQ(FieldWasSuccessful, v))
}

// WasSuccessfulIsNil applies the IsNil predicate on the "was_successful" field.
func WasSuccessfulIsNil() predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldIsNull(FieldWasSuccessful))
}

// WasSuccessfulNotNil applies the NotNil predicate on the "was_successful" field.
func WasSuccessfulNotNil() predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.FieldNotNull(FieldWasSuccessful))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasQuestion applies the HasEdge predicate on the "question" edge.
func HasQuestion() predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, QuestionTable, QuestionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQuestionWith applies the HasEdge predicate on the "question" edge with a given conditions (other predicates).
func HasQuestionWith(preds ...predicate.Question) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(func(s *sql.Selector) {
		step := newQuestionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWord applies the HasEdge predicate on the "word" edge.
func HasWord() predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WordTable, WordColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWordWith applies the HasEdge predicate on the "word" edge with a given conditions (other predicates).
func HasWordWith(preds ...predicate.Word) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(func(s *sql.Selector) {
		step := newWordStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PronunciationAttempt) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PronunciationAttempt) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PronunciationAttempt) predicate.PronunciationAttempt {
	return predicate.PronunciationAttempt(sql.NotPredicates(p))
}
