// Code generated by ent, DO NOT EDIT.

package pronunciationattempt

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the pronunciationattempt type in the database.
	Label = "pronunciation_attempt"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserAudioURL holds the string denoting the user_audio_url field in the database.
	FieldUserAudioURL = "user_audio_url"
	// FieldReferenceAudioURL holds the string denoting the reference_audio_url field in the database.
	FieldReferenceAudioURL = "reference_audio_url"
	// FieldSimilarityScore holds the string denoting the similarity_score field in the database.
	FieldSimilarityScore = "similarity_score"
	// FieldPronunciationFeedback holds the string denoting the pronunciation_feedback field in the database.
	FieldPronunciationFeedback = "pronunciation_feedback"
	// FieldPhoneticAccuracy holds the string denoting the phonetic_accuracy field in the database.
	FieldPhoneticAccuracy = "phonetic_accuracy"
	// FieldAttemptDate holds the string denoting the attempt_date field in the database.
	FieldAttemptDate = "attempt_date"
	// FieldWasSuccessful holds the string denoting the was_successful field in the database.
	FieldWasSuccessful = "was_successful"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeQuestion holds the string denoting the question edge name in mutations.
	EdgeQuestion = "question"
	// EdgeWord holds the string denoting the word edge name in mutations.
	EdgeWord = "word"
	// Table holds the table name of the pronunciationattempt in the database.
	Table = "pronunciation_attempts"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "pronunciation_attempts"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_pronunciation_attempts"
	// QuestionTable is the table that holds the question relation/edge.
	QuestionTable = "pronunciation_attempts"
	// QuestionInverseTable is the table name for the Question entity.
	// It exists in this package in order to avoid circular dependency with the "question" package.
	QuestionInverseTable = "questions"
	// QuestionColumn is the table column denoting the question relation/edge.
	QuestionColumn = "question_pronunciation_attempts"
	// WordTable is the table that holds the word relation/edge.
	WordTable = "pronunciation_attempts"
	// WordInverseTable is the table name for the Word entity.
	// It exists in this package in order to avoid circular dependency with the "word" package.
	WordInverseTable = "words"
	// WordColumn is the table column denoting the word relation/edge.
	WordColumn = "word_pronunciation_attempts"
)

// Columns holds all SQL columns for pronunciationattempt fields.
var Columns = []string{
	FieldID,
	FieldUserAudioURL,
	FieldReferenceAudioURL,
	FieldSimilarityScore,
	FieldPronunciationFeedback,
	FieldPhoneticAccuracy,
	FieldAttemptDate,
	FieldWasSuccessful,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "pronunciation_attempts"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"question_pronunciation_attempts",
	"user_pronunciation_attempts",
	"word_pronunciation_attempts",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// UserAudioURLValidator is a validator for the "user_audio_url" field. It is called by the builders before save.
	UserAudioURLValidator func(string) error
	// ReferenceAudioURLValidator is a validator for the "reference_audio_url" field. It is called by the builders before save.
	ReferenceAudioURLValidator func(string) error
	// DefaultAttemptDate holds the default value on creation for the "attempt_date" field.
	DefaultAttemptDate func() time.Time
)

// OrderOption defines the ordering options for the PronunciationAttempt queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserAudioURL orders the results by the user_audio_url field.
func ByUserAudioURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserAudioURL, opts...).ToFunc()
}

// ByReferenceAudioURL orders the results by the reference_audio_url field.
func ByReferenceAudioURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReferenceAudioURL, opts...).ToFunc()
}

// BySimilarityScore orders the results by the similarity_score field.
func BySimilarityScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSimilarityScore, opts...).ToFunc()
}

// ByPronunciationFeedback orders the results by the pronunciation_feedback field.
func ByPronunciationFeedback(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPronunciationFeedback, opts...).ToFunc()
}

// ByAttemptDate orders the results by the attempt_date field.
func ByAttemptDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAttemptDate, opts...).ToFunc()
}

// ByWasSuccessful orders the results by the was_successful field.
func ByWasSuccessful(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWasSuccessful, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByQuestionField orders the results by question field.
func ByQuestionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newQuestionStep(), sql.OrderByField(field, opts...))
	}
}

// ByWordField orders the results by word field.
func ByWordField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWordStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newQuestionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(QuestionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, QuestionTable, QuestionColumn),
	)
}
func newWordStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WordInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, WordTable, WordColumn),
	)
}
