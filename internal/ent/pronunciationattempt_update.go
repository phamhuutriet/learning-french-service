// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"learning-french-service/internal/ent/predicate"
	"learning-french-service/internal/ent/pronunciationattempt"
	"learning-french-service/internal/ent/question"
	"learning-french-service/internal/ent/user"
	"learning-french-service/internal/ent/word"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PronunciationAttemptUpdate is the builder for updating PronunciationAttempt entities.
type PronunciationAttemptUpdate struct {
	config
	hooks    []Hook
	mutation *PronunciationAttemptMutation
}

// Where appends a list predicates to the PronunciationAttemptUpdate builder.
func (_u *PronunciationAttemptUpdate) Where(ps ...predicate.PronunciationAttempt) *PronunciationAttemptUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUserAudioURL sets the "user_audio_url" field.
func (_u *PronunciationAttemptUpdate) SetUserAudioURL(v string) *PronunciationAttemptUpdate {
	_u.mutation.SetUserAudioURL(v)
	return _u
}

// SetNillableUserAudioURL sets the "user_audio_url" field if the given value is not nil.
func (_u *PronunciationAttemptUpdate) SetNillableUserAudioURL(v *string) *PronunciationAttemptUpdate {
	if v != nil {
		_u.SetUserAudioURL(*v)
	}
	return _u
}

// SetReferenceAudioURL sets the "reference_audio_url" field.
func (_u *PronunciationAttemptUpdate) SetReferenceAudioURL(v string) *PronunciationAttemptUpdate {
	_u.mutation.SetReferenceAudioURL(v)
	return _u
}

// SetNillableReferenceAudioURL sets the "reference_audio_url" field if the given value is not nil.
func (_u *PronunciationAttemptUpdate) SetNillableReferenceAudioURL(v *string) *PronunciationAttemptUpdate {
	if v != nil {
		_u.SetReferenceAudioURL(*v)
	}
	return _u
}

// ClearReferenceAudioURL clears the value of the "reference_audio_url" field.
func (_u *PronunciationAttemptUpdate) ClearReferenceAudioURL() *PronunciationAttemptUpdate {
	_u.mutation.ClearReferenceAudioURL()
	return _u
}

// SetSimilarityScore sets the "similarity_score" field.
func (_u *PronunciationAttemptUpdate) SetSimilarityScore(v float64) *PronunciationAttemptUpdate {
	_u.mutation.ResetSimilarityScore()
	_u.mutation.SetSimilarityScore(v)
	return _u
}

// SetNillableSimilarityScore sets the "similarity_score" field if the given value is not nil.
func (_u *PronunciationAttemptUpdate) SetNillableSimilarityScore(v *float64) *PronunciationAttemptUpdate {
	if v != nil {
		_u.SetSimilarityScore(*v)
	}
	return _u
}

// AddSimilarityScore adds value to the "similarity_score" field.
func (_u *PronunciationAttemptUpdate) AddSimilarityScore(v float64) *PronunciationAttemptUpdate {
	_u.mutation.AddSimilarityScore(v)
	return _u
}

// ClearSimilarityScore clears the value of the "similarity_score" field.
func (_u *PronunciationAttemptUpdate) ClearSimilarityScore() *PronunciationAttemptUpdate {
	_u.mutation.ClearSimilarityScore()
	return _u
}

// SetPronunciationFeedback sets the "pronunciation_feedback" field.
func (_u *PronunciationAttemptUpdate) SetPronunciationFeedback(v string) *PronunciationAttemptUpdate {
	_u.mutation.SetPronunciationFeedback(v)
	return _u
}

// SetNillablePronunciationFeedback sets the "pronunciation_feedback" field if the given value is not nil.
func (_u *PronunciationAttemptUpdate) SetNillablePronunciationFeedback(v *string) *PronunciationAttemptUpdate {
	if v != nil {
		_u.SetPronunciationFeedback(*v)
	}
	return _u
}

// ClearPronunciationFeedback clears the value of the "pronunciation_feedback" field.
func (_u *PronunciationAttemptUpdate) ClearPronunciationFeedback() *PronunciationAttemptUpdate {
	_u.mutation.ClearPronunciationFeedback()
	return _u
}

// SetPhoneticAccuracy sets the "phonetic_accuracy" field.
func (_u *PronunciationAttemptUpdate) SetPhoneticAccuracy(v map[string]interface{}) *PronunciationAttemptUpdate {
	_u.mutation.SetPhoneticAccuracy(v)
	return _u
}

// ClearPhoneticAccuracy clears the value of the "phonetic_accuracy" field.
func (_u *PronunciationAttemptUpdate) ClearPhoneticAccuracy() *PronunciationAttemptUpdate {
	_u.mutation.ClearPhoneticAccuracy()
	return _u
}

// SetAttemptDate sets the "attempt_date" field.
func (_u *PronunciationAttemptUpdate) SetAttemptDate(v time.Time) *PronunciationAttemptUpdate {
	_u.mutation.SetAttemptDate(v)
	return _u
}

// SetNillableAttemptDate sets the "attempt_date" field if the given value is not nil.
func (_u *PronunciationAttemptUpdate) SetNillableAttemptDate(v *time.Time) *PronunciationAttemptUpdate {
	if v != nil {
		_u.SetAttemptDate(*v)
	}
	return _u
}

// SetWasSuccessful sets the "was_successful" field.
func (_u *PronunciationAttemptUpdate) SetWasSuccessful(v bool) *PronunciationAttemptUpdate {
	_u.mutation.SetWasSuccessful(v)
	return _u
}

// SetNillableWasSuccessful sets the "was_successful" field if the given value is not nil.
func (_u *PronunciationAttemptUpdate) SetNillableWasSuccessful(v *bool) *PronunciationAttemptUpdate {
	if v != nil {
		_u.SetWasSuccessful(*v)
	}
	return _u
}

// ClearWasSuccessful clears the value of the "was_successful" field.
func (_u *PronunciationAttemptUpdate) ClearWasSuccessful() *PronunciationAttemptUpdate {
	_u.mutation.ClearWasSuccessful()
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *PronunciationAttemptUpdate) SetUserID(id int) *PronunciationAttemptUpdate {
	_u.mutation.SetUserID(id)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *PronunciationAttemptUpdate) SetUser(v *User) *PronunciationAttemptUpdate {
	return _u.SetUserID(v.ID)
}

// SetQuestionID sets the "question" edge to the Question entity by ID.
func (_u *PronunciationAttemptUpdate) SetQuestionID(id int) *PronunciationAttemptUpdate {
	_u.mutation.SetQuestionID(id)
	return _u
}

// SetQuestion sets the "question" edge to the Question entity.
func (_u *PronunciationAttemptUpdate) SetQuestion(v *Question) *PronunciationAttemptUpdate {
	return _u.SetQuestionID(v.ID)
}

// SetWordID sets the "word" edge to the Word entity by ID.
func (_u *PronunciationAttemptUpdate) SetWordID(id int) *PronunciationAttemptUpdate {
	_u.mutation.SetWordID(id)
	return _u
}

// SetWord sets the "word" edge to the Word entity.
func (_u *PronunciationAttemptUpdate) SetWord(v *Word) *PronunciationAttemptUpdate {
	return _u.SetWordID(v.ID)
}

// Mutation returns the PronunciationAttemptMutation object of the builder.
func (_u *PronunciationAttemptUpdate) Mutation() *PronunciationAttemptMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *PronunciationAttemptUpdate) ClearUser() *PronunciationAttemptUpdate {
	_u.mutation.ClearUser()
	return _u
}

// ClearQuestion clears the "question" edge to the Question entity.
func (_u *PronunciationAttemptUpdate) ClearQuestion() *PronunciationAttemptUpdate {
	_u.mutation.ClearQuestion()
	return _u
}

// ClearWord clears the "word" edge to the Word entity.
func (_u *PronunciationAttemptUpdate) ClearWord() *PronunciationAttemptUpdate {
	_u.mutation.ClearWord()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *PronunciationAttemptUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PronunciationAttemptUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *PronunciationAttemptUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PronunciationAttemptUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PronunciationAttemptUpdate) check() error {
	if v, ok := _u.mutation.UserAudioURL(); ok {
		if err := pronunciationattempt.UserAudioURLValidator(v); err != nil {
			return &ValidationError{Name: "user_audio_url", err: fmt.Errorf(`ent: validator failed for field "PronunciationAttempt.user_audio_url": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ReferenceAudioURL(); ok {
		if err := pronunciationattempt.ReferenceAudioURLValidator(v); err != nil {
			return &ValidationError{Name: "reference_audio_url", err: fmt.Errorf(`ent: validator failed for field "PronunciationAttempt.reference_audio_url": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PronunciationAttempt.user"`)
	}
	if _u.mutation.QuestionCleared() && len(_u.mutation.QuestionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PronunciationAttempt.question"`)
	}
	if _u.mutation.WordCleared() && len(_u.mutation.WordIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PronunciationAttempt.word"`)
	}
	return nil
}

func (_u *PronunciationAttemptUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(pronunciationattempt.Table, pronunciationattempt.Columns, sqlgraph.NewFieldSpec(pronunciationattempt.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UserAudioURL(); ok {
		_spec.SetField(pronunciationattempt.FieldUserAudioURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.ReferenceAudioURL(); ok {
		_spec.SetField(pronunciationattempt.FieldReferenceAudioURL, field.TypeString, value)
	}
	if _u.mutation.ReferenceAudioURLCleared() {
		_spec.ClearField(pronunciationattempt.FieldReferenceAudioURL, field.TypeString)
	}
	if value, ok := _u.mutation.SimilarityScore(); ok {
		_spec.SetField(pronunciationattempt.FieldSimilarityScore, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedSimilarityScore(); ok {
		_spec.AddField(pronunciationattempt.FieldSimilarityScore, field.TypeFloat64, value)
	}
	if _u.mutation.SimilarityScoreCleared() {
		_spec.ClearField(pronunciationattempt.FieldSimilarityScore, field.TypeFloat64)
	}
	if value, ok := _u.mutation.PronunciationFeedback(); ok {
		_spec.SetField(pronunciationattempt.FieldPronunciationFeedback, field.TypeString, value)
	}
	if _u.mutation.PronunciationFeedbackCleared() {
		_spec.ClearField(pronunciationattempt.FieldPronunciationFeedback, field.TypeString)
	}
	if value, ok := _u.mutation.PhoneticAccuracy(); ok {
		_spec.SetField(pronunciationattempt.FieldPhoneticAccuracy, field.TypeJSON, value)
	}
	if _u.mutation.PhoneticAccuracyCleared() {
		_spec.ClearField(pronunciationattempt.FieldPhoneticAccuracy, field.TypeJSON)
	}
	if value, ok := _u.mutation.AttemptDate(); ok {
		_spec.SetField(pronunciationattempt.FieldAttemptDate, field.TypeTime, value)
	}
	if value, ok := _u.mutation.WasSuccessful(); ok {
		_spec.SetField(pronunciationattempt.FieldWasSuccessful, field.TypeBool, value)
	}
	if _u.mutation.WasSuccessfulCleared() {
		_spec.ClearField(pronunciationattempt.FieldWasSuccessful, field.TypeBool)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pronunciationattempt.UserTable,
			Columns: []string{pronunciationattempt.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pronunciationattempt.UserTable,
			Columns: []string{pronunciationattempt.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pronunciationattempt.QuestionTable,
			Columns: []string{pronunciationattempt.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pronunciationattempt.QuestionTable,
			Columns: []string{pronunciationattempt.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.WordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pronunciationattempt.WordTable,
			Columns: []string{pronunciationattempt.WordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(word.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.WordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pronunciationattempt.WordTable,
			Columns: []string{pronunciationattempt.WordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(word.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pronunciationattempt.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// PronunciationAttemptUpdateOne is the builder for updating a single PronunciationAttempt entity.
type PronunciationAttemptUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PronunciationAttemptMutation
}

// SetUserAudioURL sets the "user_audio_url" field.
func (_u *PronunciationAttemptUpdateOne) SetUserAudioURL(v string) *PronunciationAttemptUpdateOne {
	_u.mutation.SetUserAudioURL(v)
	return _u
}

// SetNillableUserAudioURL sets the "user_audio_url" field if the given value is not nil.
func (_u *PronunciationAttemptUpdateOne) SetNillableUserAudioURL(v *string) *PronunciationAttemptUpdateOne {
	if v != nil {
		_u.SetUserAudioURL(*v)
	}
	return _u
}

// SetReferenceAudioURL sets the "reference_audio_url" field.
func (_u *PronunciationAttemptUpdateOne) SetReferenceAudioURL(v string) *PronunciationAttemptUpdateOne {
	_u.mutation.SetReferenceAudioURL(v)
	return _u
}

// SetNillableReferenceAudioURL sets the "reference_audio_url" field if the given value is not nil.
func (_u *PronunciationAttemptUpdateOne) SetNillableReferenceAudioURL(v *string) *PronunciationAttemptUpdateOne {
	if v != nil {
		_u.SetReferenceAudioURL(*v)
	}
	return _u
}

// ClearReferenceAudioURL clears the value of the "reference_audio_url" field.
func (_u *PronunciationAttemptUpdateOne) ClearReferenceAudioURL() *PronunciationAttemptUpdateOne {
	_u.mutation.ClearReferenceAudioURL()
	return _u
}

// SetSimilarityScore sets the "similarity_score" field.
func (_u *PronunciationAttemptUpdateOne) SetSimilarityScore(v float64) *PronunciationAttemptUpdateOne {
	_u.mutation.ResetSimilarityScore()
	_u.mutation.SetSimilarityScore(v)
	return _u
}

// SetNillableSimilarityScore sets the "similarity_score" field if the given value is not nil.
func (_u *PronunciationAttemptUpdateOne) SetNillableSimilarityScore(v *float64) *PronunciationAttemptUpdateOne {
	if v != nil {
		_u.SetSimilarityScore(*v)
	}
	return _u
}

// AddSimilarityScore adds value to the "similarity_score" field.
func (_u *PronunciationAttemptUpdateOne) AddSimilarityScore(v float64) *PronunciationAttemptUpdateOne {
	_u.mutation.AddSimilarityScore(v)
	return _u
}

// ClearSimilarityScore clears the value of the "similarity_score" field.
func (_u *PronunciationAttemptUpdateOne) ClearSimilarityScore() *PronunciationAttemptUpdateOne {
	_u.mutation.ClearSimilarityScore()
	return _u
}

// SetPronunciationFeedback sets the "pronunciation_feedback" field.
func (_u *PronunciationAttemptUpdateOne) SetPronunciationFeedback(v string) *PronunciationAttemptUpdateOne {
	_u.mutation.SetPronunciationFeedback(v)
	return _u
}

// SetNillablePronunciationFeedback sets the "pronunciation_feedback" field if the given value is not nil.
func (_u *PronunciationAttemptUpdateOne) SetNillablePronunciationFeedback(v *string) *PronunciationAttemptUpdateOne {
	if v != nil {
		_u.SetPronunciationFeedback(*v)
	}
	return _u
}

// ClearPronunciationFeedback clears the value of the "pronunciation_feedback" field.
func (_u *PronunciationAttemptUpdateOne) ClearPronunciationFeedback() *PronunciationAttemptUpdateOne {
	_u.mutation.ClearPronunciationFeedback()
	return _u
}

// SetPhoneticAccuracy sets the "phonetic_accuracy" field.
func (_u *PronunciationAttemptUpdateOne) SetPhoneticAccuracy(v map[string]interface{}) *PronunciationAttemptUpdateOne {
	_u.mutation.SetPhoneticAccuracy(v)
	return _u
}

// ClearPhoneticAccuracy clears the value of the "phonetic_accuracy" field.
func (_u *PronunciationAttemptUpdateOne) ClearPhoneticAccuracy() *PronunciationAttemptUpdateOne {
	_u.mutation.ClearPhoneticAccuracy()
	return _u
}

// SetAttemptDate sets the "attempt_date" field.
func (_u *PronunciationAttemptUpdateOne) SetAttemptDate(v time.Time) *PronunciationAttemptUpdateOne {
	_u.mutation.SetAttemptDate(v)
	return _u
}

// SetNillableAttemptDate sets the "attempt_date" field if the given value is not nil.
func (_u *PronunciationAttemptUpdateOne) SetNillableAttemptDate(v *time.Time) *PronunciationAttemptUpdateOne {
	if v != nil {
		_u.SetAttemptDate(*v)
	}
	return _u
}

// SetWasSuccessful sets the "was_successful" field.
func (_u *PronunciationAttemptUpdateOne) SetWasSuccessful(v bool) *PronunciationAttemptUpdateOne {
	_u.mutation.SetWasSuccessful(v)
	return _u
}

// SetNillableWasSuccessful sets the "was_successful" field if the given value is not nil.
func (_u *PronunciationAttemptUpdateOne) SetNillableWasSuccessful(v *bool) *PronunciationAttemptUpdateOne {
	if v != nil {
		_u.SetWasSuccessful(*v)
	}
	return _u
}

// ClearWasSuccessful clears the value of the "was_successful" field.
func (_u *PronunciationAttemptUpdateOne) ClearWasSuccessful() *PronunciationAttemptUpdateOne {
	_u.mutation.ClearWasSuccessful()
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *PronunciationAttemptUpdateOne) SetUserID(id int) *PronunciationAttemptUpdateOne {
	_u.mutation.SetUserID(id)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *PronunciationAttemptUpdateOne) SetUser(v *User) *PronunciationAttemptUpdateOne {
	return _u.SetUserID(v.ID)
}

// SetQuestionID sets the "question" edge to the Question entity by ID.
func (_u *PronunciationAttemptUpdateOne) SetQuestionID(id int) *PronunciationAttemptUpdateOne {
	_u.mutation.SetQuestionID(id)
	return _u
}

// SetQuestion sets the "question" edge to the Question entity.
func (_u *PronunciationAttemptUpdateOne) SetQuestion(v *Question) *PronunciationAttemptUpdateOne {
	return _u.SetQuestionID(v.ID)
}

// SetWordID sets the "word" edge to the Word entity by ID.
func (_u *PronunciationAttemptUpdateOne) SetWordID(id int) *PronunciationAttemptUpdateOne {
	_u.mutation.SetWordID(id)
	return _u
}

// SetWord sets the "word" edge to the Word entity.
func (_u *PronunciationAttemptUpdateOne) SetWord(v *Word) *PronunciationAttemptUpdateOne {
	return _u.SetWordID(v.ID)
}

// Mutation returns the PronunciationAttemptMutation object of the builder.
func (_u *PronunciationAttemptUpdateOne) Mutation() *PronunciationAttemptMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *PronunciationAttemptUpdateOne) ClearUser() *PronunciationAttemptUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// ClearQuestion clears the "question" edge to the Question entity.
func (_u *PronunciationAttemptUpdateOne) ClearQuestion() *PronunciationAttemptUpdateOne {
	_u.mutation.ClearQuestion()
	return _u
}

// ClearWord clears the "word" edge to the Word entity.
func (_u *PronunciationAttemptUpdateOne) ClearWord() *PronunciationAttemptUpdateOne {
	_u.mutation.ClearWord()
	return _u
}

// Where appends a list predicates to the PronunciationAttemptUpdate builder.
func (_u *PronunciationAttemptUpdateOne) Where(ps ...predicate.PronunciationAttempt) *PronunciationAttemptUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *PronunciationAttemptUpdateOne) Select(field string, fields ...string) *PronunciationAttemptUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated PronunciationAttempt entity.
func (_u *PronunciationAttemptUpdateOne) Save(ctx context.Context) (*PronunciationAttempt, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PronunciationAttemptUpdateOne) SaveX(ctx context.Context) *PronunciationAttempt {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *PronunciationAttemptUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PronunciationAttemptUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PronunciationAttemptUpdateOne) check() error {
	if v, ok := _u.mutation.UserAudioURL(); ok {
		if err := pronunciationattempt.UserAudioURLValidator(v); err != nil {
			return &ValidationError{Name: "user_audio_url", err: fmt.Errorf(`ent: validator failed for field "PronunciationAttempt.user_audio_url": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ReferenceAudioURL(); ok {
		if err := pronunciationattempt.ReferenceAudioURLValidator(v); err != nil {
			return &ValidationError{Name: "reference_audio_url", err: fmt.Errorf(`ent: validator failed for field "PronunciationAttempt.reference_audio_url": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PronunciationAttempt.user"`)
	}
	if _u.mutation.QuestionCleared() && len(_u.mutation.QuestionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PronunciationAttempt.question"`)
	}
	if _u.mutation.WordCleared() && len(_u.mutation.WordIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PronunciationAttempt.word"`)
	}
	return nil
}

func (_u *PronunciationAttemptUpdateOne) sqlSave(ctx context.Context) (_node *PronunciationAttempt, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(pronunciationattempt.Table, pronunciationattempt.Columns, sqlgraph.NewFieldSpec(pronunciationattempt.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PronunciationAttempt.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pronunciationattempt.FieldID)
		for _, f := range fields {
			if !pronunciationattempt.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pronunciationattempt.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UserAudioURL(); ok {
		_spec.SetField(pronunciationattempt.FieldUserAudioURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.ReferenceAudioURL(); ok {
		_spec.SetField(pronunciationattempt.FieldReferenceAudioURL, field.TypeString, value)
	}
	if _u.mutation.ReferenceAudioURLCleared() {
		_spec.ClearField(pronunciationattempt.FieldReferenceAudioURL, field.TypeString)
	}
	if value, ok := _u.mutation.SimilarityScore(); ok {
		_spec.SetField(pronunciationattempt.FieldSimilarityScore, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedSimilarityScore(); ok {
		_spec.AddField(pronunciationattempt.FieldSimilarityScore, field.TypeFloat64, value)
	}
	if _u.mutation.SimilarityScoreCleared() {
		_spec.ClearField(pronunciationattempt.FieldSimilarityScore, field.TypeFloat64)
	}
	if value, ok := _u.mutation.PronunciationFeedback(); ok {
		_spec.SetField(pronunciationattempt.FieldPronunciationFeedback, field.TypeString, value)
	}
	if _u.mutation.PronunciationFeedbackCleared() {
		_spec.ClearField(pronunciationattempt.FieldPronunciationFeedback, field.TypeString)
	}
	if value, ok := _u.mutation.PhoneticAccuracy(); ok {
		_spec.SetField(pronunciationattempt.FieldPhoneticAccuracy, field.TypeJSON, value)
	}
	if _u.mutation.PhoneticAccuracyCleared() {
		_spec.ClearField(pronunciationattempt.FieldPhoneticAccuracy, field.TypeJSON)
	}
	if value, ok := _u.mutation.AttemptDate(); ok {
		_spec.SetField(pronunciationattempt.FieldAttemptDate, field.TypeTime, value)
	}
	if value, ok := _u.mutation.WasSuccessful(); ok {
		_spec.SetField(pronunciationattempt.FieldWasSuccessful, field.TypeBool, value)
	}
	if _u.mutation.WasSuccessfulCleared() {
		_spec.ClearField(pronunciationattempt.FieldWasSuccessful, field.TypeBool)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pronunciationattempt.UserTable,
			Columns: []string{pronunciationattempt.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pronunciationattempt.UserTable,
			Columns: []string{pronunciationattempt.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pronunciationattempt.QuestionTable,
			Columns: []string{pronunciationattempt.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pronunciationattempt.QuestionTable,
			Columns: []string{pronunciationattempt.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.WordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pronunciationattempt.WordTable,
			Columns: []string{pronunciationattempt.WordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(word.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.WordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pronunciationattempt.WordTable,
			Columns: []string{pronunciationattempt.WordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(word.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PronunciationAttempt{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pronunciationattempt.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
