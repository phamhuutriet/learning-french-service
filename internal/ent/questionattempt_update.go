// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"learning-french-service/internal/ent/predicate"
	"learning-french-service/internal/ent/question"
	"learning-french-service/internal/ent/questionattempt"
	"learning-french-service/internal/ent/questionreview"
	"learning-french-service/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// QuestionAttemptUpdate is the builder for updating QuestionAttempt entities.
type QuestionAttemptUpdate struct {
	config
	hooks    []Hook
	mutation *QuestionAttemptMutation
}

// Where appends a list predicates to the QuestionAttemptUpdate builder.
func (_u *QuestionAttemptUpdate) Where(ps ...predicate.QuestionAttempt) *QuestionAttemptUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUserAnswer sets the "user_answer" field.
func (_u *QuestionAttemptUpdate) SetUserAnswer(v string) *QuestionAttemptUpdate {
	_u.mutation.SetUserAnswer(v)
	return _u
}

// SetNillableUserAnswer sets the "user_answer" field if the given value is not nil.
func (_u *QuestionAttemptUpdate) SetNillableUserAnswer(v *string) *QuestionAttemptUpdate {
	if v != nil {
		_u.SetUserAnswer(*v)
	}
	return _u
}

// ClearUserAnswer clears the value of the "user_answer" field.
func (_u *QuestionAttemptUpdate) ClearUserAnswer() *QuestionAttemptUpdate {
	_u.mutation.ClearUserAnswer()
	return _u
}

// SetAiGrade sets the "ai_grade" field.
func (_u *QuestionAttemptUpdate) SetAiGrade(v string) *QuestionAttemptUpdate {
	_u.mutation.SetAiGrade(v)
	return _u
}

// SetNillableAiGrade sets the "ai_grade" field if the given value is not nil.
func (_u *QuestionAttemptUpdate) SetNillableAiGrade(v *string) *QuestionAttemptUpdate {
	if v != nil {
		_u.SetAiGrade(*v)
	}
	return _u
}

// ClearAiGrade clears the value of the "ai_grade" field.
func (_u *QuestionAttemptUpdate) ClearAiGrade() *QuestionAttemptUpdate {
	_u.mutation.ClearAiGrade()
	return _u
}

// SetAiFeedback sets the "ai_feedback" field.
func (_u *QuestionAttemptUpdate) SetAiFeedback(v string) *QuestionAttemptUpdate {
	_u.mutation.SetAiFeedback(v)
	return _u
}

// SetNillableAiFeedback sets the "ai_feedback" field if the given value is not nil.
func (_u *QuestionAttemptUpdate) SetNillableAiFeedback(v *string) *QuestionAttemptUpdate {
	if v != nil {
		_u.SetAiFeedback(*v)
	}
	return _u
}

// ClearAiFeedback clears the value of the "ai_feedback" field.
func (_u *QuestionAttemptUpdate) ClearAiFeedback() *QuestionAttemptUpdate {
	_u.mutation.ClearAiFeedback()
	return _u
}

// SetSimilarityScore sets the "similarity_score" field.
func (_u *QuestionAttemptUpdate) SetSimilarityScore(v float64) *QuestionAttemptUpdate {
	_u.mutation.ResetSimilarityScore()
	_u.mutation.SetSimilarityScore(v)
	return _u
}

// SetNillableSimilarityScore sets the "similarity_score" field if the given value is not nil.
func (_u *QuestionAttemptUpdate) SetNillableSimilarityScore(v *float64) *QuestionAttemptUpdate {
	if v != nil {
		_u.SetSimilarityScore(*v)
	}
	return _u
}

// AddSimilarityScore adds value to the "similarity_score" field.
func (_u *QuestionAttemptUpdate) AddSimilarityScore(v float64) *QuestionAttemptUpdate {
	_u.mutation.AddSimilarityScore(v)
	return _u
}

// ClearSimilarityScore clears the value of the "similarity_score" field.
func (_u *QuestionAttemptUpdate) ClearSimilarityScore() *QuestionAttemptUpdate {
	_u.mutation.ClearSimilarityScore()
	return _u
}

// SetQualityRating sets the "quality_rating" field.
func (_u *QuestionAttemptUpdate) SetQualityRating(v int) *QuestionAttemptUpdate {
	_u.mutation.ResetQualityRating()
	_u.mutation.SetQualityRating(v)
	return _u
}

// SetNillableQualityRating sets the "quality_rating" field if the given value is not nil.
func (_u *QuestionAttemptUpdate) SetNillableQualityRating(v *int) *QuestionAttemptUpdate {
	if v != nil {
		_u.SetQualityRating(*v)
	}
	return _u
}

// AddQualityRating adds value to the "quality_rating" field.
func (_u *QuestionAttemptUpdate) AddQualityRating(v int) *QuestionAttemptUpdate {
	_u.mutation.AddQualityRating(v)
	return _u
}

// ClearQualityRating clears the value of the "quality_rating" field.
func (_u *QuestionAttemptUpdate) ClearQualityRating() *QuestionAttemptUpdate {
	_u.mutation.ClearQualityRating()
	return _u
}

// SetResponseTimeMs sets the "response_time_ms" field.
func (_u *QuestionAttemptUpdate) SetResponseTimeMs(v int) *QuestionAttemptUpdate {
	_u.mutation.ResetResponseTimeMs()
	_u.mutation.SetResponseTimeMs(v)
	return _u
}

// SetNillableResponseTimeMs sets the "response_time_ms" field if the given value is not nil.
func (_u *QuestionAttemptUpdate) SetNillableResponseTimeMs(v *int) *QuestionAttemptUpdate {
	if v != nil {
		_u.SetResponseTimeMs(*v)
	}
	return _u
}

// AddResponseTimeMs adds value to the "response_time_ms" field.
func (_u *QuestionAttemptUpdate) AddResponseTimeMs(v int) *QuestionAttemptUpdate {
	_u.mutation.AddResponseTimeMs(v)
	return _u
}

// ClearResponseTimeMs clears the value of the "response_time_ms" field.
func (_u *QuestionAttemptUpdate) ClearResponseTimeMs() *QuestionAttemptUpdate {
	_u.mutation.ClearResponseTimeMs()
	return _u
}

// SetWasCorrect sets the "was_correct" field.
func (_u *QuestionAttemptUpdate) SetWasCorrect(v bool) *QuestionAttemptUpdate {
	_u.mutation.SetWasCorrect(v)
	return _u
}

// SetNillableWasCorrect sets the "was_correct" field if the given value is not nil.
func (_u *QuestionAttemptUpdate) SetNillableWasCorrect(v *bool) *QuestionAttemptUpdate {
	if v != nil {
		_u.SetWasCorrect(*v)
	}
	return _u
}

// SetNeedsRepeat sets the "needs_repeat" field.
func (_u *QuestionAttemptUpdate) SetNeedsRepeat(v bool) *QuestionAttemptUpdate {
	_u.mutation.SetNeedsRepeat(v)
	return _u
}

// SetNillableNeedsRepeat sets the "needs_repeat" field if the given value is not nil.
func (_u *QuestionAttemptUpdate) SetNillableNeedsRepeat(v *bool) *QuestionAttemptUpdate {
	if v != nil {
		_u.SetNeedsRepeat(*v)
	}
	return _u
}

// SetAttemptDate sets the "attempt_date" field.
func (_u *QuestionAttemptUpdate) SetAttemptDate(v time.Time) *QuestionAttemptUpdate {
	_u.mutation.SetAttemptDate(v)
	return _u
}

// SetNillableAttemptDate sets the "attempt_date" field if the given value is not nil.
func (_u *QuestionAttemptUpdate) SetNillableAttemptDate(v *time.Time) *QuestionAttemptUpdate {
	if v != nil {
		_u.SetAttemptDate(*v)
	}
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *QuestionAttemptUpdate) SetUserID(id int) *QuestionAttemptUpdate {
	_u.mutation.SetUserID(id)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *QuestionAttemptUpdate) SetUser(v *User) *QuestionAttemptUpdate {
	return _u.SetUserID(v.ID)
}

// SetQuestionID sets the "question" edge to the Question entity by ID.
func (_u *QuestionAttemptUpdate) SetQuestionID(id int) *QuestionAttemptUpdate {
	_u.mutation.SetQuestionID(id)
	return _u
}

// SetQuestion sets the "question" edge to the Question entity.
func (_u *QuestionAttemptUpdate) SetQuestion(v *Question) *QuestionAttemptUpdate {
	return _u.SetQuestionID(v.ID)
}

// SetQuestionReviewID sets the "question_review" edge to the QuestionReview entity by ID.
func (_u *QuestionAttemptUpdate) SetQuestionReviewID(id int) *QuestionAttemptUpdate {
	_u.mutation.SetQuestionReviewID(id)
	return _u
}

// SetQuestionReview sets the "question_review" edge to the QuestionReview entity.
func (_u *QuestionAttemptUpdate) SetQuestionReview(v *QuestionReview) *QuestionAttemptUpdate {
	return _u.SetQuestionReviewID(v.ID)
}

// Mutation returns the QuestionAttemptMutation object of the builder.
func (_u *QuestionAttemptUpdate) Mutation() *QuestionAttemptMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *QuestionAttemptUpdate) ClearUser() *QuestionAttemptUpdate {
	_u.mutation.ClearUser()
	return _u
}

// ClearQuestion clears the "question" edge to the Question entity.
func (_u *QuestionAttemptUpdate) ClearQuestion() *QuestionAttemptUpdate {
	_u.mutation.ClearQuestion()
	return _u
}

// ClearQuestionReview clears the "question_review" edge to the QuestionReview entity.
func (_u *QuestionAttemptUpdate) ClearQuestionReview() *QuestionAttemptUpdate {
	_u.mutation.ClearQuestionReview()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *QuestionAttemptUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *QuestionAttemptUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *QuestionAttemptUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *QuestionAttemptUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *QuestionAttemptUpdate) check() error {
	if v, ok := _u.mutation.AiGrade(); ok {
		if err := questionattempt.AiGradeValidator(v); err != nil {
			return &ValidationError{Name: "ai_grade", err: fmt.Errorf(`ent: validator failed for field "QuestionAttempt.ai_grade": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "QuestionAttempt.user"`)
	}
	if _u.mutation.QuestionCleared() && len(_u.mutation.QuestionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "QuestionAttempt.question"`)
	}
	if _u.mutation.QuestionReviewCleared() && len(_u.mutation.QuestionReviewIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "QuestionAttempt.question_review"`)
	}
	return nil
}

func (_u *QuestionAttemptUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(questionattempt.Table, questionattempt.Columns, sqlgraph.NewFieldSpec(questionattempt.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UserAnswer(); ok {
		_spec.SetField(questionattempt.FieldUserAnswer, field.TypeString, value)
	}
	if _u.mutation.UserAnswerCleared() {
		_spec.ClearField(questionattempt.FieldUserAnswer, field.TypeString)
	}
	if value, ok := _u.mutation.AiGrade(); ok {
		_spec.SetField(questionattempt.FieldAiGrade, field.TypeString, value)
	}
	if _u.mutation.AiGradeCleared() {
		_spec.ClearField(questionattempt.FieldAiGrade, field.TypeString)
	}
	if value, ok := _u.mutation.AiFeedback(); ok {
		_spec.SetField(questionattempt.FieldAiFeedback, field.TypeString, value)
	}
	if _u.mutation.AiFeedbackCleared() {
		_spec.ClearField(questionattempt.FieldAiFeedback, field.TypeString)
	}
	if value, ok := _u.mutation.SimilarityScore(); ok {
		_spec.SetField(questionattempt.FieldSimilarityScore, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedSimilarityScore(); ok {
		_spec.AddField(questionattempt.FieldSimilarityScore, field.TypeFloat64, value)
	}
	if _u.mutation.SimilarityScoreCleared() {
		_spec.ClearField(questionattempt.FieldSimilarityScore, field.TypeFloat64)
	}
	if value, ok := _u.mutation.QualityRating(); ok {
		_spec.SetField(questionattempt.FieldQualityRating, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedQualityRating(); ok {
		_spec.AddField(questionattempt.FieldQualityRating, field.TypeInt, value)
	}
	if _u.mutation.QualityRatingCleared() {
		_spec.ClearField(questionattempt.FieldQualityRating, field.TypeInt)
	}
	if value, ok := _u.mutation.ResponseTimeMs(); ok {
		_spec.SetField(questionattempt.FieldResponseTimeMs, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedResponseTimeMs(); ok {
		_spec.AddField(questionattempt.FieldResponseTimeMs, field.TypeInt, value)
	}
	if _u.mutation.ResponseTimeMsCleared() {
		_spec.ClearField(questionattempt.FieldResponseTimeMs, field.TypeInt)
	}
	if value, ok := _u.mutation.WasCorrect(); ok {
		_spec.SetField(questionattempt.FieldWasCorrect, field.TypeBool, value)
	}
	if value, ok := _u.mutation.NeedsRepeat(); ok {
		_spec.SetField(questionattempt.FieldNeedsRepeat, field.TypeBool, value)
	}
	if value, ok := _u.mutation.AttemptDate(); ok {
		_spec.SetField(questionattempt.FieldAttemptDate, field.TypeTime, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionattempt.UserTable,
			Columns: []string{questionattempt.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionattempt.UserTable,
			Columns: []string{questionattempt.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionattempt.QuestionTable,
			Columns: []string{questionattempt.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionattempt.QuestionTable,
			Columns: []string{questionattempt.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.QuestionReviewCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionattempt.QuestionReviewTable,
			Columns: []string{questionattempt.QuestionReviewColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionreview.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.QuestionReviewIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionattempt.QuestionReviewTable,
			Columns: []string{questionattempt.QuestionReviewColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionreview.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{questionattempt.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// QuestionAttemptUpdateOne is the builder for updating a single QuestionAttempt entity.
type QuestionAttemptUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *QuestionAttemptMutation
}

// SetUserAnswer sets the "user_answer" field.
func (_u *QuestionAttemptUpdateOne) SetUserAnswer(v string) *QuestionAttemptUpdateOne {
	_u.mutation.SetUserAnswer(v)
	return _u
}

// SetNillableUserAnswer sets the "user_answer" field if the given value is not nil.
func (_u *QuestionAttemptUpdateOne) SetNillableUserAnswer(v *string) *QuestionAttemptUpdateOne {
	if v != nil {
		_u.SetUserAnswer(*v)
	}
	return _u
}

// ClearUserAnswer clears the value of the "user_answer" field.
func (_u *QuestionAttemptUpdateOne) ClearUserAnswer() *QuestionAttemptUpdateOne {
	_u.mutation.ClearUserAnswer()
	return _u
}

// SetAiGrade sets the "ai_grade" field.
func (_u *QuestionAttemptUpdateOne) SetAiGrade(v string) *QuestionAttemptUpdateOne {
	_u.mutation.SetAiGrade(v)
	return _u
}

// SetNillableAiGrade sets the "ai_grade" field if the given value is not nil.
func (_u *QuestionAttemptUpdateOne) SetNillableAiGrade(v *string) *QuestionAttemptUpdateOne {
	if v != nil {
		_u.SetAiGrade(*v)
	}
	return _u
}

// ClearAiGrade clears the value of the "ai_grade" field.
func (_u *QuestionAttemptUpdateOne) ClearAiGrade() *QuestionAttemptUpdateOne {
	_u.mutation.ClearAiGrade()
	return _u
}

// SetAiFeedback sets the "ai_feedback" field.
func (_u *QuestionAttemptUpdateOne) SetAiFeedback(v string) *QuestionAttemptUpdateOne {
	_u.mutation.SetAiFeedback(v)
	return _u
}

// SetNillableAiFeedback sets the "ai_feedback" field if the given value is not nil.
func (_u *QuestionAttemptUpdateOne) SetNillableAiFeedback(v *string) *QuestionAttemptUpdateOne {
	if v != nil {
		_u.SetAiFeedback(*v)
	}
	return _u
}

// ClearAiFeedback clears the value of the "ai_feedback" field.
func (_u *QuestionAttemptUpdateOne) ClearAiFeedback() *QuestionAttemptUpdateOne {
	_u.mutation.ClearAiFeedback()
	return _u
}

// SetSimilarityScore sets the "similarity_score" field.
func (_u *QuestionAttemptUpdateOne) SetSimilarityScore(v float64) *QuestionAttemptUpdateOne {
	_u.mutation.ResetSimilarityScore()
	_u.mutation.SetSimilarityScore(v)
	return _u
}

// SetNillableSimilarityScore sets the "similarity_score" field if the given value is not nil.
func (_u *QuestionAttemptUpdateOne) SetNillableSimilarityScore(v *float64) *QuestionAttemptUpdateOne {
	if v != nil {
		_u.SetSimilarityScore(*v)
	}
	return _u
}

// AddSimilarityScore adds value to the "similarity_score" field.
func (_u *QuestionAttemptUpdateOne) AddSimilarityScore(v float64) *QuestionAttemptUpdateOne {
	_u.mutation.AddSimilarityScore(v)
	return _u
}

// ClearSimilarityScore clears the value of the "similarity_score" field.
func (_u *QuestionAttemptUpdateOne) ClearSimilarityScore() *QuestionAttemptUpdateOne {
	_u.mutation.ClearSimilarityScore()
	return _u
}

// SetQualityRating sets the "quality_rating" field.
func (_u *QuestionAttemptUpdateOne) SetQualityRating(v int) *QuestionAttemptUpdateOne {
	_u.mutation.ResetQualityRating()
	_u.mutation.SetQualityRating(v)
	return _u
}

// SetNillableQualityRating sets the "quality_rating" field if the given value is not nil.
func (_u *QuestionAttemptUpdateOne) SetNillableQualityRating(v *int) *QuestionAttemptUpdateOne {
	if v != nil {
		_u.SetQualityRating(*v)
	}
	return _u
}

// AddQualityRating adds value to the "quality_rating" field.
func (_u *QuestionAttemptUpdateOne) AddQualityRating(v int) *QuestionAttemptUpdateOne {
	_u.mutation.AddQualityRating(v)
	return _u
}

// ClearQualityRating clears the value of the "quality_rating" field.
func (_u *QuestionAttemptUpdateOne) ClearQualityRating() *QuestionAttemptUpdateOne {
	_u.mutation.ClearQualityRating()
	return _u
}

// SetResponseTimeMs sets the "response_time_ms" field.
func (_u *QuestionAttemptUpdateOne) SetResponseTimeMs(v int) *QuestionAttemptUpdateOne {
	_u.mutation.ResetResponseTimeMs()
	_u.mutation.SetResponseTimeMs(v)
	return _u
}

// SetNillableResponseTimeMs sets the "response_time_ms" field if the given value is not nil.
func (_u *QuestionAttemptUpdateOne) SetNillableResponseTimeMs(v *int) *QuestionAttemptUpdateOne {
	if v != nil {
		_u.SetResponseTimeMs(*v)
	}
	return _u
}

// AddResponseTimeMs adds value to the "response_time_ms" field.
func (_u *QuestionAttemptUpdateOne) AddResponseTimeMs(v int) *QuestionAttemptUpdateOne {
	_u.mutation.AddResponseTimeMs(v)
	return _u
}

// ClearResponseTimeMs clears the value of the "response_time_ms" field.
func (_u *QuestionAttemptUpdateOne) ClearResponseTimeMs() *QuestionAttemptUpdateOne {
	_u.mutation.ClearResponseTimeMs()
	return _u
}

// SetWasCorrect sets the "was_correct" field.
func (_u *QuestionAttemptUpdateOne) SetWasCorrect(v bool) *QuestionAttemptUpdateOne {
	_u.mutation.SetWasCorrect(v)
	return _u
}

// SetNillableWasCorrect sets the "was_correct" field if the given value is not nil.
func (_u *QuestionAttemptUpdateOne) SetNillableWasCorrect(v *bool) *QuestionAttemptUpdateOne {
	if v != nil {
		_u.SetWasCorrect(*v)
	}
	return _u
}

// SetNeedsRepeat sets the "needs_repeat" field.
func (_u *QuestionAttemptUpdateOne) SetNeedsRepeat(v bool) *QuestionAttemptUpdateOne {
	_u.mutation.SetNeedsRepeat(v)
	return _u
}

// SetNillableNeedsRepeat sets the "needs_repeat" field if the given value is not nil.
func (_u *QuestionAttemptUpdateOne) SetNillableNeedsRepeat(v *bool) *QuestionAttemptUpdateOne {
	if v != nil {
		_u.SetNeedsRepeat(*v)
	}
	return _u
}

// SetAttemptDate sets the "attempt_date" field.
func (_u *QuestionAttemptUpdateOne) SetAttemptDate(v time.Time) *QuestionAttemptUpdateOne {
	_u.mutation.SetAttemptDate(v)
	return _u
}

// SetNillableAttemptDate sets the "attempt_date" field if the given value is not nil.
func (_u *QuestionAttemptUpdateOne) SetNillableAttemptDate(v *time.Time) *QuestionAttemptUpdateOne {
	if v != nil {
		_u.SetAttemptDate(*v)
	}
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *QuestionAttemptUpdateOne) SetUserID(id int) *QuestionAttemptUpdateOne {
	_u.mutation.SetUserID(id)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *QuestionAttemptUpdateOne) SetUser(v *User) *QuestionAttemptUpdateOne {
	return _u.SetUserID(v.ID)
}

// SetQuestionID sets the "question" edge to the Question entity by ID.
func (_u *QuestionAttemptUpdateOne) SetQuestionID(id int) *QuestionAttemptUpdateOne {
	_u.mutation.SetQuestionID(id)
	return _u
}

// SetQuestion sets the "question" edge to the Question entity.
func (_u *QuestionAttemptUpdateOne) SetQuestion(v *Question) *QuestionAttemptUpdateOne {
	return _u.SetQuestionID(v.ID)
}

// SetQuestionReviewID sets the "question_review" edge to the QuestionReview entity by ID.
func (_u *QuestionAttemptUpdateOne) SetQuestionReviewID(id int) *QuestionAttemptUpdateOne {
	_u.mutation.SetQuestionReviewID(id)
	return _u
}

// SetQuestionReview sets the "question_review" edge to the QuestionReview entity.
func (_u *QuestionAttemptUpdateOne) SetQuestionReview(v *QuestionReview) *QuestionAttemptUpdateOne {
	return _u.SetQuestionReviewID(v.ID)
}

// Mutation returns the QuestionAttemptMutation object of the builder.
func (_u *QuestionAttemptUpdateOne) Mutation() *QuestionAttemptMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *QuestionAttemptUpdateOne) ClearUser() *QuestionAttemptUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// ClearQuestion clears the "question" edge to the Question entity.
func (_u *QuestionAttemptUpdateOne) ClearQuestion() *QuestionAttemptUpdateOne {
	_u.mutation.ClearQuestion()
	return _u
}

// ClearQuestionReview clears the "question_review" edge to the QuestionReview entity.
func (_u *QuestionAttemptUpdateOne) ClearQuestionReview() *QuestionAttemptUpdateOne {
	_u.mutation.ClearQuestionReview()
	return _u
}

// Where appends a list predicates to the QuestionAttemptUpdate builder.
func (_u *QuestionAttemptUpdateOne) Where(ps ...predicate.QuestionAttempt) *QuestionAttemptUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *QuestionAttemptUpdateOne) Select(field string, fields ...string) *QuestionAttemptUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated QuestionAttempt entity.
func (_u *QuestionAttemptUpdateOne) Save(ctx context.Context) (*QuestionAttempt, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *QuestionAttemptUpdateOne) SaveX(ctx context.Context) *QuestionAttempt {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *QuestionAttemptUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *QuestionAttemptUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *QuestionAttemptUpdateOne) check() error {
	if v, ok := _u.mutation.AiGrade(); ok {
		if err := questionattempt.AiGradeValidator(v); err != nil {
			return &ValidationError{Name: "ai_grade", err: fmt.Errorf(`ent: validator failed for field "QuestionAttempt.ai_grade": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "QuestionAttempt.user"`)
	}
	if _u.mutation.QuestionCleared() && len(_u.mutation.QuestionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "QuestionAttempt.question"`)
	}
	if _u.mutation.QuestionReviewCleared() && len(_u.mutation.QuestionReviewIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "QuestionAttempt.question_review"`)
	}
	return nil
}

func (_u *QuestionAttemptUpdateOne) sqlSave(ctx context.Context) (_node *QuestionAttempt, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(questionattempt.Table, questionattempt.Columns, sqlgraph.NewFieldSpec(questionattempt.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "QuestionAttempt.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, questionattempt.FieldID)
		for _, f := range fields {
			if !questionattempt.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != questionattempt.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UserAnswer(); ok {
		_spec.SetField(questionattempt.FieldUserAnswer, field.TypeString, value)
	}
	if _u.mutation.UserAnswerCleared() {
		_spec.ClearField(questionattempt.FieldUserAnswer, field.TypeString)
	}
	if value, ok := _u.mutation.AiGrade(); ok {
		_spec.SetField(questionattempt.FieldAiGrade, field.TypeString, value)
	}
	if _u.mutation.AiGradeCleared() {
		_spec.ClearField(questionattempt.FieldAiGrade, field.TypeString)
	}
	if value, ok := _u.mutation.AiFeedback(); ok {
		_spec.SetField(questionattempt.FieldAiFeedback, field.TypeString, value)
	}
	if _u.mutation.AiFeedbackCleared() {
		_spec.ClearField(questionattempt.FieldAiFeedback, field.TypeString)
	}
	if value, ok := _u.mutation.SimilarityScore(); ok {
		_spec.SetField(questionattempt.FieldSimilarityScore, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedSimilarityScore(); ok {
		_spec.AddField(questionattempt.FieldSimilarityScore, field.TypeFloat64, value)
	}
	if _u.mutation.SimilarityScoreCleared() {
		_spec.ClearField(questionattempt.FieldSimilarityScore, field.TypeFloat64)
	}
	if value, ok := _u.mutation.QualityRating(); ok {
		_spec.SetField(questionattempt.FieldQualityRating, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedQualityRating(); ok {
		_spec.AddField(questionattempt.FieldQualityRating, field.TypeInt, value)
	}
	if _u.mutation.QualityRatingCleared() {
		_spec.ClearField(questionattempt.FieldQualityRating, field.TypeInt)
	}
	if value, ok := _u.mutation.ResponseTimeMs(); ok {
		_spec.SetField(questionattempt.FieldResponseTimeMs, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedResponseTimeMs(); ok {
		_spec.AddField(questionattempt.FieldResponseTimeMs, field.TypeInt, value)
	}
	if _u.mutation.ResponseTimeMsCleared() {
		_spec.ClearField(questionattempt.FieldResponseTimeMs, field.TypeInt)
	}
	if value, ok := _u.mutation.WasCorrect(); ok {
		_spec.SetField(questionattempt.FieldWasCorrect, field.TypeBool, value)
	}
	if value, ok := _u.mutation.NeedsRepeat(); ok {
		_spec.SetField(questionattempt.FieldNeedsRepeat, field.TypeBool, value)
	}
	if value, ok := _u.mutation.AttemptDate(); ok {
		_spec.SetField(questionattempt.FieldAttemptDate, field.TypeTime, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionattempt.UserTable,
			Columns: []string{questionattempt.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionattempt.UserTable,
			Columns: []string{questionattempt.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionattempt.QuestionTable,
			Columns: []string{questionattempt.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionattempt.QuestionTable,
			Columns: []string{questionattempt.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.QuestionReviewCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionattempt.QuestionReviewTable,
			Columns: []string{questionattempt.QuestionReviewColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionreview.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.QuestionReviewIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionattempt.QuestionReviewTable,
			Columns: []string{questionattempt.QuestionReviewColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionreview.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &QuestionAttempt{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{questionattempt.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
