// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPasswordHash holds the string denoting the password_hash field in the database.
	FieldPasswordHash = "password_hash"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldFirstName holds the string denoting the first_name field in the database.
	FieldFirstName = "first_name"
	// FieldLastName holds the string denoting the last_name field in the database.
	FieldLastName = "last_name"
	// FieldCurrentLevel holds the string denoting the current_level field in the database.
	FieldCurrentLevel = "current_level"
	// FieldTargetLevel holds the string denoting the target_level field in the database.
	FieldTargetLevel = "target_level"
	// FieldDailyGoal holds the string denoting the daily_goal field in the database.
	FieldDailyGoal = "daily_goal"
	// FieldTimezone holds the string denoting the timezone field in the database.
	FieldTimezone = "timezone"
	// FieldLastActiveAt holds the string denoting the last_active_at field in the database.
	FieldLastActiveAt = "last_active_at"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeDecks holds the string denoting the decks edge name in mutations.
	EdgeDecks = "decks"
	// EdgeQuestionReviews holds the string denoting the question_reviews edge name in mutations.
	EdgeQuestionReviews = "question_reviews"
	// EdgeQuestionAttempts holds the string denoting the question_attempts edge name in mutations.
	EdgeQuestionAttempts = "question_attempts"
	// EdgePronunciationAttempts holds the string denoting the pronunciation_attempts edge name in mutations.
	EdgePronunciationAttempts = "pronunciation_attempts"
	// EdgeUserStats holds the string denoting the user_stats edge name in mutations.
	EdgeUserStats = "user_stats"
	// EdgeLearningStreaks holds the string denoting the learning_streaks edge name in mutations.
	EdgeLearningStreaks = "learning_streaks"
	// Table holds the table name of the user in the database.
	Table = "users"
	// DecksTable is the table that holds the decks relation/edge.
	DecksTable = "decks"
	// DecksInverseTable is the table name for the Deck entity.
	// It exists in this package in order to avoid circular dependency with the "deck" package.
	DecksInverseTable = "decks"
	// DecksColumn is the table column denoting the decks relation/edge.
	DecksColumn = "user_decks"
	// QuestionReviewsTable is the table that holds the question_reviews relation/edge.
	QuestionReviewsTable = "question_reviews"
	// QuestionReviewsInverseTable is the table name for the QuestionReview entity.
	// It exists in this package in order to avoid circular dependency with the "questionreview" package.
	QuestionReviewsInverseTable = "question_reviews"
	// QuestionReviewsColumn is the table column denoting the question_reviews relation/edge.
	QuestionReviewsColumn = "user_question_reviews"
	// QuestionAttemptsTable is the table that holds the question_attempts relation/edge.
	QuestionAttemptsTable = "question_attempts"
	// QuestionAttemptsInverseTable is the table name for the QuestionAttempt entity.
	// It exists in this package in order to avoid circular dependency with the "questionattempt" package.
	QuestionAttemptsInverseTable = "question_attempts"
	// QuestionAttemptsColumn is the table column denoting the question_attempts relation/edge.
	QuestionAttemptsColumn = "user_question_attempts"
	// PronunciationAttemptsTable is the table that holds the pronunciation_attempts relation/edge.
	PronunciationAttemptsTable = "pronunciation_attempts"
	// PronunciationAttemptsInverseTable is the table name for the PronunciationAttempt entity.
	// It exists in this package in order to avoid circular dependency with the "pronunciationattempt" package.
	PronunciationAttemptsInverseTable = "pronunciation_attempts"
	// PronunciationAttemptsColumn is the table column denoting the pronunciation_attempts relation/edge.
	PronunciationAttemptsColumn = "user_pronunciation_attempts"
	// UserStatsTable is the table that holds the user_stats relation/edge.
	UserStatsTable = "user_stats"
	// UserStatsInverseTable is the table name for the UserStats entity.
	// It exists in this package in order to avoid circular dependency with the "userstats" package.
	UserStatsInverseTable = "user_stats"
	// UserStatsColumn is the table column denoting the user_stats relation/edge.
	UserStatsColumn = "user_user_stats"
	// LearningStreaksTable is the table that holds the learning_streaks relation/edge.
	LearningStreaksTable = "learning_streaks"
	// LearningStreaksInverseTable is the table name for the LearningStreak entity.
	// It exists in this package in order to avoid circular dependency with the "learningstreak" package.
	LearningStreaksInverseTable = "learning_streaks"
	// LearningStreaksColumn is the table column denoting the learning_streaks relation/edge.
	LearningStreaksColumn = "user_learning_streaks"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldEmail,
	FieldPasswordHash,
	FieldUsername,
	FieldFirstName,
	FieldLastName,
	FieldCurrentLevel,
	FieldTargetLevel,
	FieldDailyGoal,
	FieldTimezone,
	FieldLastActiveAt,
	FieldIsActive,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// PasswordHashValidator is a validator for the "password_hash" field. It is called by the builders before save.
	PasswordHashValidator func(string) error
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator func(string) error
	// FirstNameValidator is a validator for the "first_name" field. It is called by the builders before save.
	FirstNameValidator func(string) error
	// LastNameValidator is a validator for the "last_name" field. It is called by the builders before save.
	LastNameValidator func(string) error
	// CurrentLevelValidator is a validator for the "current_level" field. It is called by the builders before save.
	CurrentLevelValidator func(string) error
	// TargetLevelValidator is a validator for the "target_level" field. It is called by the builders before save.
	TargetLevelValidator func(string) error
	// DefaultDailyGoal holds the default value on creation for the "daily_goal" field.
	DefaultDailyGoal int
	// DefaultTimezone holds the default value on creation for the "timezone" field.
	DefaultTimezone string
	// TimezoneValidator is a validator for the "timezone" field. It is called by the builders before save.
	TimezoneValidator func(string) error
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPasswordHash orders the results by the password_hash field.
func ByPasswordHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPasswordHash, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByFirstName orders the results by the first_name field.
func ByFirstName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstName, opts...).ToFunc()
}

// ByLastName orders the results by the last_name field.
func ByLastName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastName, opts...).ToFunc()
}

// ByCurrentLevel orders the results by the current_level field.
func ByCurrentLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentLevel, opts...).ToFunc()
}

// ByTargetLevel orders the results by the target_level field.
func ByTargetLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTargetLevel, opts...).ToFunc()
}

// ByDailyGoal orders the results by the daily_goal field.
func ByDailyGoal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDailyGoal, opts...).ToFunc()
}

// ByTimezone orders the results by the timezone field.
func ByTimezone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimezone, opts...).ToFunc()
}

// ByLastActiveAt orders the results by the last_active_at field.
func ByLastActiveAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastActiveAt, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDecksCount orders the results by decks count.
func ByDecksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDecksStep(), opts...)
	}
}

// ByDecks orders the results by decks terms.
func ByDecks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDecksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByQuestionReviewsCount orders the results by question_reviews count.
func ByQuestionReviewsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newQuestionReviewsStep(), opts...)
	}
}

// ByQuestionReviews orders the results by question_reviews terms.
func ByQuestionReviews(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newQuestionReviewsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByQuestionAttemptsCount orders the results by question_attempts count.
func ByQuestionAttemptsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newQuestionAttemptsStep(), opts...)
	}
}

// ByQuestionAttempts orders the results by question_attempts terms.
func ByQuestionAttempts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newQuestionAttemptsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPronunciationAttemptsCount orders the results by pronunciation_attempts count.
func ByPronunciationAttemptsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPronunciationAttemptsStep(), opts...)
	}
}

// ByPronunciationAttempts orders the results by pronunciation_attempts terms.
func ByPronunciationAttempts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPronunciationAttemptsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserStatsCount orders the results by user_stats count.
func ByUserStatsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserStatsStep(), opts...)
	}
}

// ByUserStats orders the results by user_stats terms.
func ByUserStats(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStatsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLearningStreaksCount orders the results by learning_streaks count.
func ByLearningStreaksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLearningStreaksStep(), opts...)
	}
}

// ByLearningStreaks orders the results by learning_streaks terms.
func ByLearningStreaks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLearningStreaksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newDecksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DecksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DecksTable, DecksColumn),
	)
}
func newQuestionReviewsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(QuestionReviewsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, QuestionReviewsTable, QuestionReviewsColumn),
	)
}
func newQuestionAttemptsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(QuestionAttemptsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, QuestionAttemptsTable, QuestionAttemptsColumn),
	)
}
func newPronunciationAttemptsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PronunciationAttemptsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PronunciationAttemptsTable, PronunciationAttemptsColumn),
	)
}
func newUserStatsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserStatsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserStatsTable, UserStatsColumn),
	)
}
func newLearningStreaksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LearningStreaksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LearningStreaksTable, LearningStreaksColumn),
	)
}
