// Code generated by ent, DO NOT EDIT.

package user

import (
	"learning-french-service/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// PasswordHash applies equality check predicate on the "password_hash" field. It's identical to PasswordHashEQ.
func PasswordHash(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPasswordHash, v))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// FirstName applies equality check predicate on the "first_name" field. It's identical to FirstNameEQ.
func FirstName(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFirstName, v))
}

// LastName applies equality check predicate on the "last_name" field. It's identical to LastNameEQ.
func LastName(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastName, v))
}

// CurrentLevel applies equality check predicate on the "current_level" field. It's identical to CurrentLevelEQ.
func CurrentLevel(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCurrentLevel, v))
}

// TargetLevel applies equality check predicate on the "target_level" field. It's identical to TargetLevelEQ.
func TargetLevel(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTargetLevel, v))
}

// DailyGoal applies equality check predicate on the "daily_goal" field. It's identical to DailyGoalEQ.
func DailyGoal(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDailyGoal, v))
}

// Timezone applies equality check predicate on the "timezone" field. It's identical to TimezoneEQ.
func Timezone(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTimezone, v))
}

// LastActiveAt applies equality check predicate on the "last_active_at" field. It's identical to LastActiveAtEQ.
func LastActiveAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastActiveAt, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsActive, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail, v))
}

// PasswordHashEQ applies the EQ predicate on the "password_hash" field.
func PasswordHashEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPasswordHash, v))
}

// PasswordHashNEQ applies the NEQ predicate on the "password_hash" field.
func PasswordHashNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPasswordHash, v))
}

// PasswordHashIn applies the In predicate on the "password_hash" field.
func PasswordHashIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPasswordHash, vs...))
}

// PasswordHashNotIn applies the NotIn predicate on the "password_hash" field.
func PasswordHashNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPasswordHash, vs...))
}

// PasswordHashGT applies the GT predicate on the "password_hash" field.
func PasswordHashGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPasswordHash, v))
}

// PasswordHashGTE applies the GTE predicate on the "password_hash" field.
func PasswordHashGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPasswordHash, v))
}

// PasswordHashLT applies the LT predicate on the "password_hash" field.
func PasswordHashLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPasswordHash, v))
}

// PasswordHashLTE applies the LTE predicate on the "password_hash" field.
func PasswordHashLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPasswordHash, v))
}

// PasswordHashContains applies the Contains predicate on the "password_hash" field.
func PasswordHashContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPasswordHash, v))
}

// PasswordHashHasPrefix applies the HasPrefix predicate on the "password_hash" field.
func PasswordHashHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPasswordHash, v))
}

// PasswordHashHasSuffix applies the HasSuffix predicate on the "password_hash" field.
func PasswordHashHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPasswordHash, v))
}

// PasswordHashEqualFold applies the EqualFold predicate on the "password_hash" field.
func PasswordHashEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPasswordHash, v))
}

// PasswordHashContainsFold applies the ContainsFold predicate on the "password_hash" field.
func PasswordHashContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPasswordHash, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameIsNil applies the IsNil predicate on the "username" field.
func UsernameIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldUsername))
}

// UsernameNotNil applies the NotNil predicate on the "username" field.
func UsernameNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldUsername))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldUsername, v))
}

// FirstNameEQ applies the EQ predicate on the "first_name" field.
func FirstNameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFirstName, v))
}

// FirstNameNEQ applies the NEQ predicate on the "first_name" field.
func FirstNameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldFirstName, v))
}

// FirstNameIn applies the In predicate on the "first_name" field.
func FirstNameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldFirstName, vs...))
}

// FirstNameNotIn applies the NotIn predicate on the "first_name" field.
func FirstNameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldFirstName, vs...))
}

// FirstNameGT applies the GT predicate on the "first_name" field.
func FirstNameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldFirstName, v))
}

// FirstNameGTE applies the GTE predicate on the "first_name" field.
func FirstNameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldFirstName, v))
}

// FirstNameLT applies the LT predicate on the "first_name" field.
func FirstNameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldFirstName, v))
}

// FirstNameLTE applies the LTE predicate on the "first_name" field.
func FirstNameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldFirstName, v))
}

// FirstNameContains applies the Contains predicate on the "first_name" field.
func FirstNameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldFirstName, v))
}

// FirstNameHasPrefix applies the HasPrefix predicate on the "first_name" field.
func FirstNameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldFirstName, v))
}

// FirstNameHasSuffix applies the HasSuffix predicate on the "first_name" field.
func FirstNameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldFirstName, v))
}

// FirstNameIsNil applies the IsNil predicate on the "first_name" field.
func FirstNameIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldFirstName))
}

// FirstNameNotNil applies the NotNil predicate on the "first_name" field.
func FirstNameNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldFirstName))
}

// FirstNameEqualFold applies the EqualFold predicate on the "first_name" field.
func FirstNameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldFirstName, v))
}

// FirstNameContainsFold applies the ContainsFold predicate on the "first_name" field.
func FirstNameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldFirstName, v))
}

// LastNameEQ applies the EQ predicate on the "last_name" field.
func LastNameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastName, v))
}

// LastNameNEQ applies the NEQ predicate on the "last_name" field.
func LastNameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLastName, v))
}

// LastNameIn applies the In predicate on the "last_name" field.
func LastNameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldLastName, vs...))
}

// LastNameNotIn applies the NotIn predicate on the "last_name" field.
func LastNameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLastName, vs...))
}

// LastNameGT applies the GT predicate on the "last_name" field.
func LastNameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldLastName, v))
}

// LastNameGTE applies the GTE predicate on the "last_name" field.
func LastNameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLastName, v))
}

// LastNameLT applies the LT predicate on the "last_name" field.
func LastNameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldLastName, v))
}

// LastNameLTE applies the LTE predicate on the "last_name" field.
func LastNameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLastName, v))
}

// LastNameContains applies the Contains predicate on the "last_name" field.
func LastNameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldLastName, v))
}

// LastNameHasPrefix applies the HasPrefix predicate on the "last_name" field.
func LastNameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldLastName, v))
}

// LastNameHasSuffix applies the HasSuffix predicate on the "last_name" field.
func LastNameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldLastName, v))
}

// LastNameIsNil applies the IsNil predicate on the "last_name" field.
func LastNameIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldLastName))
}

// LastNameNotNil applies the NotNil predicate on the "last_name" field.
func LastNameNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldLastName))
}

// LastNameEqualFold applies the EqualFold predicate on the "last_name" field.
func LastNameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldLastName, v))
}

// LastNameContainsFold applies the ContainsFold predicate on the "last_name" field.
func LastNameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldLastName, v))
}

// CurrentLevelEQ applies the EQ predicate on the "current_level" field.
func CurrentLevelEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCurrentLevel, v))
}

// CurrentLevelNEQ applies the NEQ predicate on the "current_level" field.
func CurrentLevelNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCurrentLevel, v))
}

// CurrentLevelIn applies the In predicate on the "current_level" field.
func CurrentLevelIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldCurrentLevel, vs...))
}

// CurrentLevelNotIn applies the NotIn predicate on the "current_level" field.
func CurrentLevelNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCurrentLevel, vs...))
}

// CurrentLevelGT applies the GT predicate on the "current_level" field.
func CurrentLevelGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldCurrentLevel, v))
}

// CurrentLevelGTE applies the GTE predicate on the "current_level" field.
func CurrentLevelGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCurrentLevel, v))
}

// CurrentLevelLT applies the LT predicate on the "current_level" field.
func CurrentLevelLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldCurrentLevel, v))
}

// CurrentLevelLTE applies the LTE predicate on the "current_level" field.
func CurrentLevelLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCurrentLevel, v))
}

// CurrentLevelContains applies the Contains predicate on the "current_level" field.
func CurrentLevelContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldCurrentLevel, v))
}

// CurrentLevelHasPrefix applies the HasPrefix predicate on the "current_level" field.
func CurrentLevelHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldCurrentLevel, v))
}

// CurrentLevelHasSuffix applies the HasSuffix predicate on the "current_level" field.
func CurrentLevelHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldCurrentLevel, v))
}

// CurrentLevelIsNil applies the IsNil predicate on the "current_level" field.
func CurrentLevelIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldCurrentLevel))
}

// CurrentLevelNotNil applies the NotNil predicate on the "current_level" field.
func CurrentLevelNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldCurrentLevel))
}

// CurrentLevelEqualFold applies the EqualFold predicate on the "current_level" field.
func CurrentLevelEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldCurrentLevel, v))
}

// CurrentLevelContainsFold applies the ContainsFold predicate on the "current_level" field.
func CurrentLevelContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldCurrentLevel, v))
}

// TargetLevelEQ applies the EQ predicate on the "target_level" field.
func TargetLevelEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTargetLevel, v))
}

// TargetLevelNEQ applies the NEQ predicate on the "target_level" field.
func TargetLevelNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldTargetLevel, v))
}

// TargetLevelIn applies the In predicate on the "target_level" field.
func TargetLevelIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldTargetLevel, vs...))
}

// TargetLevelNotIn applies the NotIn predicate on the "target_level" field.
func TargetLevelNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldTargetLevel, vs...))
}

// TargetLevelGT applies the GT predicate on the "target_level" field.
func TargetLevelGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldTargetLevel, v))
}

// TargetLevelGTE applies the GTE predicate on the "target_level" field.
func TargetLevelGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldTargetLevel, v))
}

// TargetLevelLT applies the LT predicate on the "target_level" field.
func TargetLevelLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldTargetLevel, v))
}

// TargetLevelLTE applies the LTE predicate on the "target_level" field.
func TargetLevelLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldTargetLevel, v))
}

// TargetLevelContains applies the Contains predicate on the "target_level" field.
func TargetLevelContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldTargetLevel, v))
}

// TargetLevelHasPrefix applies the HasPrefix predicate on the "target_level" field.
func TargetLevelHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldTargetLevel, v))
}

// TargetLevelHasSuffix applies the HasSuffix predicate on the "target_level" field.
func TargetLevelHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldTargetLevel, v))
}

// TargetLevelIsNil applies the IsNil predicate on the "target_level" field.
func TargetLevelIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldTargetLevel))
}

// TargetLevelNotNil applies the NotNil predicate on the "target_level" field.
func TargetLevelNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldTargetLevel))
}

// TargetLevelEqualFold applies the EqualFold predicate on the "target_level" field.
func TargetLevelEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldTargetLevel, v))
}

// TargetLevelContainsFold applies the ContainsFold predicate on the "target_level" field.
func TargetLevelContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldTargetLevel, v))
}

// DailyGoalEQ applies the EQ predicate on the "daily_goal" field.
func DailyGoalEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDailyGoal, v))
}

// DailyGoalNEQ applies the NEQ predicate on the "daily_goal" field.
func DailyGoalNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldDailyGoal, v))
}

// DailyGoalIn applies the In predicate on the "daily_goal" field.
func DailyGoalIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldDailyGoal, vs...))
}

// DailyGoalNotIn applies the NotIn predicate on the "daily_goal" field.
func DailyGoalNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldDailyGoal, vs...))
}

// DailyGoalGT applies the GT predicate on the "daily_goal" field.
func DailyGoalGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldDailyGoal, v))
}

// DailyGoalGTE applies the GTE predicate on the "daily_goal" field.
func DailyGoalGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldDailyGoal, v))
}

// DailyGoalLT applies the LT predicate on the "daily_goal" field.
func DailyGoalLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldDailyGoal, v))
}

// DailyGoalLTE applies the LTE predicate on the "daily_goal" field.
func DailyGoalLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldDailyGoal, v))
}

// TimezoneEQ applies the EQ predicate on the "timezone" field.
func TimezoneEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTimezone, v))
}

// TimezoneNEQ applies the NEQ predicate on the "timezone" field.
func TimezoneNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldTimezone, v))
}

// TimezoneIn applies the In predicate on the "timezone" field.
func TimezoneIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldTimezone, vs...))
}

// TimezoneNotIn applies the NotIn predicate on the "timezone" field.
func TimezoneNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldTimezone, vs...))
}

// TimezoneGT applies the GT predicate on the "timezone" field.
func TimezoneGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldTimezone, v))
}

// TimezoneGTE applies the GTE predicate on the "timezone" field.
func TimezoneGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldTimezone, v))
}

// TimezoneLT applies the LT predicate on the "timezone" field.
func TimezoneLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldTimezone, v))
}

// TimezoneLTE applies the LTE predicate on the "timezone" field.
func TimezoneLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldTimezone, v))
}

// TimezoneContains applies the Contains predicate on the "timezone" field.
func TimezoneContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldTimezone, v))
}

// TimezoneHasPrefix applies the HasPrefix predicate on the "timezone" field.
func TimezoneHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldTimezone, v))
}

// TimezoneHasSuffix applies the HasSuffix predicate on the "timezone" field.
func TimezoneHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldTimezone, v))
}

// TimezoneEqualFold applies the EqualFold predicate on the "timezone" field.
func TimezoneEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldTimezone, v))
}

// TimezoneContainsFold applies the ContainsFold predicate on the "timezone" field.
func TimezoneContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldTimezone, v))
}

// LastActiveAtEQ applies the EQ predicate on the "last_active_at" field.
func LastActiveAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastActiveAt, v))
}

// LastActiveAtNEQ applies the NEQ predicate on the "last_active_at" field.
func LastActiveAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLastActiveAt, v))
}

// LastActiveAtIn applies the In predicate on the "last_active_at" field.
func LastActiveAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldLastActiveAt, vs...))
}

// LastActiveAtNotIn applies the NotIn predicate on the "last_active_at" field.
func LastActiveAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLastActiveAt, vs...))
}

// LastActiveAtGT applies the GT predicate on the "last_active_at" field.
func LastActiveAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldLastActiveAt, v))
}

// LastActiveAtGTE applies the GTE predicate on the "last_active_at" field.
func LastActiveAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLastActiveAt, v))
}

// LastActiveAtLT applies the LT predicate on the "last_active_at" field.
func LastActiveAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldLastActiveAt, v))
}

// LastActiveAtLTE applies the LTE predicate on the "last_active_at" field.
func LastActiveAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLastActiveAt, v))
}

// LastActiveAtIsNil applies the IsNil predicate on the "last_active_at" field.
func LastActiveAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldLastActiveAt))
}

// LastActiveAtNotNil applies the NotNil predicate on the "last_active_at" field.
func LastActiveAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldLastActiveAt))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldIsActive, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasDecks applies the HasEdge predicate on the "decks" edge.
func HasDecks() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DecksTable, DecksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDecksWith applies the HasEdge predicate on the "decks" edge with a given conditions (other predicates).
func HasDecksWith(preds ...predicate.Deck) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newDecksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasQuestionReviews applies the HasEdge predicate on the "question_reviews" edge.
func HasQuestionReviews() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, QuestionReviewsTable, QuestionReviewsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQuestionReviewsWith applies the HasEdge predicate on the "question_reviews" edge with a given conditions (other predicates).
func HasQuestionReviewsWith(preds ...predicate.QuestionReview) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newQuestionReviewsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasQuestionAttempts applies the HasEdge predicate on the "question_attempts" edge.
func HasQuestionAttempts() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, QuestionAttemptsTable, QuestionAttemptsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQuestionAttemptsWith applies the HasEdge predicate on the "question_attempts" edge with a given conditions (other predicates).
func HasQuestionAttemptsWith(preds ...predicate.QuestionAttempt) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newQuestionAttemptsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPronunciationAttempts applies the HasEdge predicate on the "pronunciation_attempts" edge.
func HasPronunciationAttempts() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PronunciationAttemptsTable, PronunciationAttemptsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPronunciationAttemptsWith applies the HasEdge predicate on the "pronunciation_attempts" edge with a given conditions (other predicates).
func HasPronunciationAttemptsWith(preds ...predicate.PronunciationAttempt) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newPronunciationAttemptsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserStats applies the HasEdge predicate on the "user_stats" edge.
func HasUserStats() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserStatsTable, UserStatsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserStatsWith applies the HasEdge predicate on the "user_stats" edge with a given conditions (other predicates).
func HasUserStatsWith(preds ...predicate.UserStats) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newUserStatsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLearningStreaks applies the HasEdge predicate on the "learning_streaks" edge.
func HasLearningStreaks() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LearningStreaksTable, LearningStreaksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLearningStreaksWith applies the HasEdge predicate on the "learning_streaks" edge with a given conditions (other predicates).
func HasLearningStreaksWith(preds ...predicate.LearningStreak) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newLearningStreaksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
