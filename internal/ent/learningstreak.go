// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"learning-french-service/internal/ent/learningstreak"
	"learning-french-service/internal/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// LearningStreak is the model entity for the LearningStreak schema.
type LearningStreak struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate time.Time `json:"start_date,omitempty"`
	// EndDate holds the value of the "end_date" field.
	EndDate time.Time `json:"end_date,omitempty"`
	// StreakLength holds the value of the "streak_length" field.
	StreakLength int `json:"streak_length,omitempty"`
	// IsCurrent holds the value of the "is_current" field.
	IsCurrent bool `json:"is_current,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LearningStreakQuery when eager-loading is set.
	Edges                 LearningStreakEdges `json:"edges"`
	user_learning_streaks *int
	selectValues          sql.SelectValues
}

// LearningStreakEdges holds the relations/edges for other nodes in the graph.
type LearningStreakEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LearningStreakEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LearningStreak) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case learningstreak.FieldIsCurrent:
			values[i] = new(sql.NullBool)
		case learningstreak.FieldID, learningstreak.FieldStreakLength:
			values[i] = new(sql.NullInt64)
		case learningstreak.FieldStartDate, learningstreak.FieldEndDate, learningstreak.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case learningstreak.ForeignKeys[0]: // user_learning_streaks
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LearningStreak fields.
func (_m *LearningStreak) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case learningstreak.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case learningstreak.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				_m.StartDate = value.Time
			}
		case learningstreak.FieldEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_date", values[i])
			} else if value.Valid {
				_m.EndDate = value.Time
			}
		case learningstreak.FieldStreakLength:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field streak_length", values[i])
			} else if value.Valid {
				_m.StreakLength = int(value.Int64)
			}
		case learningstreak.FieldIsCurrent:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_current", values[i])
			} else if value.Valid {
				_m.IsCurrent = value.Bool
			}
		case learningstreak.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case learningstreak.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_learning_streaks", value)
			} else if value.Valid {
				_m.user_learning_streaks = new(int)
				*_m.user_learning_streaks = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LearningStreak.
// This includes values selected through modifiers, order, etc.
func (_m *LearningStreak) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the LearningStreak entity.
func (_m *LearningStreak) QueryUser() *UserQuery {
	return NewLearningStreakClient(_m.config).QueryUser(_m)
}

// Update returns a builder for updating this LearningStreak.
// Note that you need to call LearningStreak.Unwrap() before calling this method if this LearningStreak
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *LearningStreak) Update() *LearningStreakUpdateOne {
	return NewLearningStreakClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the LearningStreak entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *LearningStreak) Unwrap() *LearningStreak {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: LearningStreak is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *LearningStreak) String() string {
	var builder strings.Builder
	builder.WriteString("LearningStreak(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("start_date=")
	builder.WriteString(_m.StartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_date=")
	builder.WriteString(_m.EndDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("streak_length=")
	builder.WriteString(fmt.Sprintf("%v", _m.StreakLength))
	builder.WriteString(", ")
	builder.WriteString("is_current=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsCurrent))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// LearningStreaks is a parsable slice of LearningStreak.
type LearningStreaks []*LearningStreak
