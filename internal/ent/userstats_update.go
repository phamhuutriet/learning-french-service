// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"learning-french-service/internal/ent/predicate"
	"learning-french-service/internal/ent/user"
	"learning-french-service/internal/ent/userstats"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// UserStatsUpdate is the builder for updating UserStats entities.
type UserStatsUpdate struct {
	config
	hooks    []Hook
	mutation *UserStatsMutation
}

// Where appends a list predicates to the UserStatsUpdate builder.
func (_u *UserStatsUpdate) Where(ps ...predicate.UserStats) *UserStatsUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetStatDate sets the "stat_date" field.
func (_u *UserStatsUpdate) SetStatDate(v time.Time) *UserStatsUpdate {
	_u.mutation.SetStatDate(v)
	return _u
}

// SetNillableStatDate sets the "stat_date" field if the given value is not nil.
func (_u *UserStatsUpdate) SetNillableStatDate(v *time.Time) *UserStatsUpdate {
	if v != nil {
		_u.SetStatDate(*v)
	}
	return _u
}

// SetQuestionsAnswered sets the "questions_answered" field.
func (_u *UserStatsUpdate) SetQuestionsAnswered(v int) *UserStatsUpdate {
	_u.mutation.ResetQuestionsAnswered()
	_u.mutation.SetQuestionsAnswered(v)
	return _u
}

// SetNillableQuestionsAnswered sets the "questions_answered" field if the given value is not nil.
func (_u *UserStatsUpdate) SetNillableQuestionsAnswered(v *int) *UserStatsUpdate {
	if v != nil {
		_u.SetQuestionsAnswered(*v)
	}
	return _u
}

// AddQuestionsAnswered adds value to the "questions_answered" field.
func (_u *UserStatsUpdate) AddQuestionsAnswered(v int) *UserStatsUpdate {
	_u.mutation.AddQuestionsAnswered(v)
	return _u
}

// SetQuestionsCorrect sets the "questions_correct" field.
func (_u *UserStatsUpdate) SetQuestionsCorrect(v int) *UserStatsUpdate {
	_u.mutation.ResetQuestionsCorrect()
	_u.mutation.SetQuestionsCorrect(v)
	return _u
}

// SetNillableQuestionsCorrect sets the "questions_correct" field if the given value is not nil.
func (_u *UserStatsUpdate) SetNillableQuestionsCorrect(v *int) *UserStatsUpdate {
	if v != nil {
		_u.SetQuestionsCorrect(*v)
	}
	return _u
}

// AddQuestionsCorrect adds value to the "questions_correct" field.
func (_u *UserStatsUpdate) AddQuestionsCorrect(v int) *UserStatsUpdate {
	_u.mutation.AddQuestionsCorrect(v)
	return _u
}

// SetWordsLearned sets the "words_learned" field.
func (_u *UserStatsUpdate) SetWordsLearned(v int) *UserStatsUpdate {
	_u.mutation.ResetWordsLearned()
	_u.mutation.SetWordsLearned(v)
	return _u
}

// SetNillableWordsLearned sets the "words_learned" field if the given value is not nil.
func (_u *UserStatsUpdate) SetNillableWordsLearned(v *int) *UserStatsUpdate {
	if v != nil {
		_u.SetWordsLearned(*v)
	}
	return _u
}

// AddWordsLearned adds value to the "words_learned" field.
func (_u *UserStatsUpdate) AddWordsLearned(v int) *UserStatsUpdate {
	_u.mutation.AddWordsLearned(v)
	return _u
}

// SetTotalStudyTimeMinutes sets the "total_study_time_minutes" field.
func (_u *UserStatsUpdate) SetTotalStudyTimeMinutes(v int) *UserStatsUpdate {
	_u.mutation.ResetTotalStudyTimeMinutes()
	_u.mutation.SetTotalStudyTimeMinutes(v)
	return _u
}

// SetNillableTotalStudyTimeMinutes sets the "total_study_time_minutes" field if the given value is not nil.
func (_u *UserStatsUpdate) SetNillableTotalStudyTimeMinutes(v *int) *UserStatsUpdate {
	if v != nil {
		_u.SetTotalStudyTimeMinutes(*v)
	}
	return _u
}

// AddTotalStudyTimeMinutes adds value to the "total_study_time_minutes" field.
func (_u *UserStatsUpdate) AddTotalStudyTimeMinutes(v int) *UserStatsUpdate {
	_u.mutation.AddTotalStudyTimeMinutes(v)
	return _u
}

// SetStreakDays sets the "streak_days" field.
func (_u *UserStatsUpdate) SetStreakDays(v int) *UserStatsUpdate {
	_u.mutation.ResetStreakDays()
	_u.mutation.SetStreakDays(v)
	return _u
}

// SetNillableStreakDays sets the "streak_days" field if the given value is not nil.
func (_u *UserStatsUpdate) SetNillableStreakDays(v *int) *UserStatsUpdate {
	if v != nil {
		_u.SetStreakDays(*v)
	}
	return _u
}

// AddStreakDays adds value to the "streak_days" field.
func (_u *UserStatsUpdate) AddStreakDays(v int) *UserStatsUpdate {
	_u.mutation.AddStreakDays(v)
	return _u
}

// SetEnglishToFrenchAccuracy sets the "english_to_french_accuracy" field.
func (_u *UserStatsUpdate) SetEnglishToFrenchAccuracy(v float64) *UserStatsUpdate {
	_u.mutation.ResetEnglishToFrenchAccuracy()
	_u.mutation.SetEnglishToFrenchAccuracy(v)
	return _u
}

// SetNillableEnglishToFrenchAccuracy sets the "english_to_french_accuracy" field if the given value is not nil.
func (_u *UserStatsUpdate) SetNillableEnglishToFrenchAccuracy(v *float64) *UserStatsUpdate {
	if v != nil {
		_u.SetEnglishToFrenchAccuracy(*v)
	}
	return _u
}

// AddEnglishToFrenchAccuracy adds value to the "english_to_french_accuracy" field.
func (_u *UserStatsUpdate) AddEnglishToFrenchAccuracy(v float64) *UserStatsUpdate {
	_u.mutation.AddEnglishToFrenchAccuracy(v)
	return _u
}

// SetFrenchToEnglishAccuracy sets the "french_to_english_accuracy" field.
func (_u *UserStatsUpdate) SetFrenchToEnglishAccuracy(v float64) *UserStatsUpdate {
	_u.mutation.ResetFrenchToEnglishAccuracy()
	_u.mutation.SetFrenchToEnglishAccuracy(v)
	return _u
}

// SetNillableFrenchToEnglishAccuracy sets the "french_to_english_accuracy" field if the given value is not nil.
func (_u *UserStatsUpdate) SetNillableFrenchToEnglishAccuracy(v *float64) *UserStatsUpdate {
	if v != nil {
		_u.SetFrenchToEnglishAccuracy(*v)
	}
	return _u
}

// AddFrenchToEnglishAccuracy adds value to the "french_to_english_accuracy" field.
func (_u *UserStatsUpdate) AddFrenchToEnglishAccuracy(v float64) *UserStatsUpdate {
	_u.mutation.AddFrenchToEnglishAccuracy(v)
	return _u
}

// SetPronunciationAccuracy sets the "pronunciation_accuracy" field.
func (_u *UserStatsUpdate) SetPronunciationAccuracy(v float64) *UserStatsUpdate {
	_u.mutation.ResetPronunciationAccuracy()
	_u.mutation.SetPronunciationAccuracy(v)
	return _u
}

// SetNillablePronunciationAccuracy sets the "pronunciation_accuracy" field if the given value is not nil.
func (_u *UserStatsUpdate) SetNillablePronunciationAccuracy(v *float64) *UserStatsUpdate {
	if v != nil {
		_u.SetPronunciationAccuracy(*v)
	}
	return _u
}

// AddPronunciationAccuracy adds value to the "pronunciation_accuracy" field.
func (_u *UserStatsUpdate) AddPronunciationAccuracy(v float64) *UserStatsUpdate {
	_u.mutation.AddPronunciationAccuracy(v)
	return _u
}

// SetAverageResponseTimeMs sets the "average_response_time_ms" field.
func (_u *UserStatsUpdate) SetAverageResponseTimeMs(v int) *UserStatsUpdate {
	_u.mutation.ResetAverageResponseTimeMs()
	_u.mutation.SetAverageResponseTimeMs(v)
	return _u
}

// SetNillableAverageResponseTimeMs sets the "average_response_time_ms" field if the given value is not nil.
func (_u *UserStatsUpdate) SetNillableAverageResponseTimeMs(v *int) *UserStatsUpdate {
	if v != nil {
		_u.SetAverageResponseTimeMs(*v)
	}
	return _u
}

// AddAverageResponseTimeMs adds value to the "average_response_time_ms" field.
func (_u *UserStatsUpdate) AddAverageResponseTimeMs(v int) *UserStatsUpdate {
	_u.mutation.AddAverageResponseTimeMs(v)
	return _u
}

// SetWordsPerMinute sets the "words_per_minute" field.
func (_u *UserStatsUpdate) SetWordsPerMinute(v float64) *UserStatsUpdate {
	_u.mutation.ResetWordsPerMinute()
	_u.mutation.SetWordsPerMinute(v)
	return _u
}

// SetNillableWordsPerMinute sets the "words_per_minute" field if the given value is not nil.
func (_u *UserStatsUpdate) SetNillableWordsPerMinute(v *float64) *UserStatsUpdate {
	if v != nil {
		_u.SetWordsPerMinute(*v)
	}
	return _u
}

// AddWordsPerMinute adds value to the "words_per_minute" field.
func (_u *UserStatsUpdate) AddWordsPerMinute(v float64) *UserStatsUpdate {
	_u.mutation.AddWordsPerMinute(v)
	return _u
}

// SetStrengths sets the "strengths" field.
func (_u *UserStatsUpdate) SetStrengths(v []string) *UserStatsUpdate {
	_u.mutation.SetStrengths(v)
	return _u
}

// AppendStrengths appends value to the "strengths" field.
func (_u *UserStatsUpdate) AppendStrengths(v []string) *UserStatsUpdate {
	_u.mutation.AppendStrengths(v)
	return _u
}

// ClearStrengths clears the value of the "strengths" field.
func (_u *UserStatsUpdate) ClearStrengths() *UserStatsUpdate {
	_u.mutation.ClearStrengths()
	return _u
}

// SetWeaknesses sets the "weaknesses" field.
func (_u *UserStatsUpdate) SetWeaknesses(v []string) *UserStatsUpdate {
	_u.mutation.SetWeaknesses(v)
	return _u
}

// AppendWeaknesses appends value to the "weaknesses" field.
func (_u *UserStatsUpdate) AppendWeaknesses(v []string) *UserStatsUpdate {
	_u.mutation.AppendWeaknesses(v)
	return _u
}

// ClearWeaknesses clears the value of the "weaknesses" field.
func (_u *UserStatsUpdate) ClearWeaknesses() *UserStatsUpdate {
	_u.mutation.ClearWeaknesses()
	return _u
}

// SetRecommendations sets the "recommendations" field.
func (_u *UserStatsUpdate) SetRecommendations(v string) *UserStatsUpdate {
	_u.mutation.SetRecommendations(v)
	return _u
}

// SetNillableRecommendations sets the "recommendations" field if the given value is not nil.
func (_u *UserStatsUpdate) SetNillableRecommendations(v *string) *UserStatsUpdate {
	if v != nil {
		_u.SetRecommendations(*v)
	}
	return _u
}

// ClearRecommendations clears the value of the "recommendations" field.
func (_u *UserStatsUpdate) ClearRecommendations() *UserStatsUpdate {
	_u.mutation.ClearRecommendations()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *UserStatsUpdate) SetCreatedAt(v time.Time) *UserStatsUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *UserStatsUpdate) SetNillableCreatedAt(v *time.Time) *UserStatsUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UserStatsUpdate) SetUpdatedAt(v time.Time) *UserStatsUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *UserStatsUpdate) SetUserID(id int) *UserStatsUpdate {
	_u.mutation.SetUserID(id)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *UserStatsUpdate) SetUser(v *User) *UserStatsUpdate {
	return _u.SetUserID(v.ID)
}

// Mutation returns the UserStatsMutation object of the builder.
func (_u *UserStatsUpdate) Mutation() *UserStatsMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *UserStatsUpdate) ClearUser() *UserStatsUpdate {
	_u.mutation.ClearUser()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *UserStatsUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserStatsUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *UserStatsUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserStatsUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserStatsUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := userstats.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserStatsUpdate) check() error {
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserStats.user"`)
	}
	return nil
}

func (_u *UserStatsUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userstats.Table, userstats.Columns, sqlgraph.NewFieldSpec(userstats.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.StatDate(); ok {
		_spec.SetField(userstats.FieldStatDate, field.TypeTime, value)
	}
	if value, ok := _u.mutation.QuestionsAnswered(); ok {
		_spec.SetField(userstats.FieldQuestionsAnswered, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedQuestionsAnswered(); ok {
		_spec.AddField(userstats.FieldQuestionsAnswered, field.TypeInt, value)
	}
	if value, ok := _u.mutation.QuestionsCorrect(); ok {
		_spec.SetField(userstats.FieldQuestionsCorrect, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedQuestionsCorrect(); ok {
		_spec.AddField(userstats.FieldQuestionsCorrect, field.TypeInt, value)
	}
	if value, ok := _u.mutation.WordsLearned(); ok {
		_spec.SetField(userstats.FieldWordsLearned, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedWordsLearned(); ok {
		_spec.AddField(userstats.FieldWordsLearned, field.TypeInt, value)
	}
	if value, ok := _u.mutation.TotalStudyTimeMinutes(); ok {
		_spec.SetField(userstats.FieldTotalStudyTimeMinutes, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedTotalStudyTimeMinutes(); ok {
		_spec.AddField(userstats.FieldTotalStudyTimeMinutes, field.TypeInt, value)
	}
	if value, ok := _u.mutation.StreakDays(); ok {
		_spec.SetField(userstats.FieldStreakDays, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStreakDays(); ok {
		_spec.AddField(userstats.FieldStreakDays, field.TypeInt, value)
	}
	if value, ok := _u.mutation.EnglishToFrenchAccuracy(); ok {
		_spec.SetField(userstats.FieldEnglishToFrenchAccuracy, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedEnglishToFrenchAccuracy(); ok {
		_spec.AddField(userstats.FieldEnglishToFrenchAccuracy, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.FrenchToEnglishAccuracy(); ok {
		_spec.SetField(userstats.FieldFrenchToEnglishAccuracy, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedFrenchToEnglishAccuracy(); ok {
		_spec.AddField(userstats.FieldFrenchToEnglishAccuracy, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.PronunciationAccuracy(); ok {
		_spec.SetField(userstats.FieldPronunciationAccuracy, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedPronunciationAccuracy(); ok {
		_spec.AddField(userstats.FieldPronunciationAccuracy, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AverageResponseTimeMs(); ok {
		_spec.SetField(userstats.FieldAverageResponseTimeMs, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedAverageResponseTimeMs(); ok {
		_spec.AddField(userstats.FieldAverageResponseTimeMs, field.TypeInt, value)
	}
	if value, ok := _u.mutation.WordsPerMinute(); ok {
		_spec.SetField(userstats.FieldWordsPerMinute, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedWordsPerMinute(); ok {
		_spec.AddField(userstats.FieldWordsPerMinute, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Strengths(); ok {
		_spec.SetField(userstats.FieldStrengths, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedStrengths(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, userstats.FieldStrengths, value)
		})
	}
	if _u.mutation.StrengthsCleared() {
		_spec.ClearField(userstats.FieldStrengths, field.TypeJSON)
	}
	if value, ok := _u.mutation.Weaknesses(); ok {
		_spec.SetField(userstats.FieldWeaknesses, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedWeaknesses(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, userstats.FieldWeaknesses, value)
		})
	}
	if _u.mutation.WeaknessesCleared() {
		_spec.ClearField(userstats.FieldWeaknesses, field.TypeJSON)
	}
	if value, ok := _u.mutation.Recommendations(); ok {
		_spec.SetField(userstats.FieldRecommendations, field.TypeString, value)
	}
	if _u.mutation.RecommendationsCleared() {
		_spec.ClearField(userstats.FieldRecommendations, field.TypeString)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(userstats.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(userstats.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userstats.UserTable,
			Columns: []string{userstats.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userstats.UserTable,
			Columns: []string{userstats.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userstats.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// UserStatsUpdateOne is the builder for updating a single UserStats entity.
type UserStatsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserStatsMutation
}

// SetStatDate sets the "stat_date" field.
func (_u *UserStatsUpdateOne) SetStatDate(v time.Time) *UserStatsUpdateOne {
	_u.mutation.SetStatDate(v)
	return _u
}

// SetNillableStatDate sets the "stat_date" field if the given value is not nil.
func (_u *UserStatsUpdateOne) SetNillableStatDate(v *time.Time) *UserStatsUpdateOne {
	if v != nil {
		_u.SetStatDate(*v)
	}
	return _u
}

// SetQuestionsAnswered sets the "questions_answered" field.
func (_u *UserStatsUpdateOne) SetQuestionsAnswered(v int) *UserStatsUpdateOne {
	_u.mutation.ResetQuestionsAnswered()
	_u.mutation.SetQuestionsAnswered(v)
	return _u
}

// SetNillableQuestionsAnswered sets the "questions_answered" field if the given value is not nil.
func (_u *UserStatsUpdateOne) SetNillableQuestionsAnswered(v *int) *UserStatsUpdateOne {
	if v != nil {
		_u.SetQuestionsAnswered(*v)
	}
	return _u
}

// AddQuestionsAnswered adds value to the "questions_answered" field.
func (_u *UserStatsUpdateOne) AddQuestionsAnswered(v int) *UserStatsUpdateOne {
	_u.mutation.AddQuestionsAnswered(v)
	return _u
}

// SetQuestionsCorrect sets the "questions_correct" field.
func (_u *UserStatsUpdateOne) SetQuestionsCorrect(v int) *UserStatsUpdateOne {
	_u.mutation.ResetQuestionsCorrect()
	_u.mutation.SetQuestionsCorrect(v)
	return _u
}

// SetNillableQuestionsCorrect sets the "questions_correct" field if the given value is not nil.
func (_u *UserStatsUpdateOne) SetNillableQuestionsCorrect(v *int) *UserStatsUpdateOne {
	if v != nil {
		_u.SetQuestionsCorrect(*v)
	}
	return _u
}

// AddQuestionsCorrect adds value to the "questions_correct" field.
func (_u *UserStatsUpdateOne) AddQuestionsCorrect(v int) *UserStatsUpdateOne {
	_u.mutation.AddQuestionsCorrect(v)
	return _u
}

// SetWordsLearned sets the "words_learned" field.
func (_u *UserStatsUpdateOne) SetWordsLearned(v int) *UserStatsUpdateOne {
	_u.mutation.ResetWordsLearned()
	_u.mutation.SetWordsLearned(v)
	return _u
}

// SetNillableWordsLearned sets the "words_learned" field if the given value is not nil.
func (_u *UserStatsUpdateOne) SetNillableWordsLearned(v *int) *UserStatsUpdateOne {
	if v != nil {
		_u.SetWordsLearned(*v)
	}
	return _u
}

// AddWordsLearned adds value to the "words_learned" field.
func (_u *UserStatsUpdateOne) AddWordsLearned(v int) *UserStatsUpdateOne {
	_u.mutation.AddWordsLearned(v)
	return _u
}

// SetTotalStudyTimeMinutes sets the "total_study_time_minutes" field.
func (_u *UserStatsUpdateOne) SetTotalStudyTimeMinutes(v int) *UserStatsUpdateOne {
	_u.mutation.ResetTotalStudyTimeMinutes()
	_u.mutation.SetTotalStudyTimeMinutes(v)
	return _u
}

// SetNillableTotalStudyTimeMinutes sets the "total_study_time_minutes" field if the given value is not nil.
func (_u *UserStatsUpdateOne) SetNillableTotalStudyTimeMinutes(v *int) *UserStatsUpdateOne {
	if v != nil {
		_u.SetTotalStudyTimeMinutes(*v)
	}
	return _u
}

// AddTotalStudyTimeMinutes adds value to the "total_study_time_minutes" field.
func (_u *UserStatsUpdateOne) AddTotalStudyTimeMinutes(v int) *UserStatsUpdateOne {
	_u.mutation.AddTotalStudyTimeMinutes(v)
	return _u
}

// SetStreakDays sets the "streak_days" field.
func (_u *UserStatsUpdateOne) SetStreakDays(v int) *UserStatsUpdateOne {
	_u.mutation.ResetStreakDays()
	_u.mutation.SetStreakDays(v)
	return _u
}

// SetNillableStreakDays sets the "streak_days" field if the given value is not nil.
func (_u *UserStatsUpdateOne) SetNillableStreakDays(v *int) *UserStatsUpdateOne {
	if v != nil {
		_u.SetStreakDays(*v)
	}
	return _u
}

// AddStreakDays adds value to the "streak_days" field.
func (_u *UserStatsUpdateOne) AddStreakDays(v int) *UserStatsUpdateOne {
	_u.mutation.AddStreakDays(v)
	return _u
}

// SetEnglishToFrenchAccuracy sets the "english_to_french_accuracy" field.
func (_u *UserStatsUpdateOne) SetEnglishToFrenchAccuracy(v float64) *UserStatsUpdateOne {
	_u.mutation.ResetEnglishToFrenchAccuracy()
	_u.mutation.SetEnglishToFrenchAccuracy(v)
	return _u
}

// SetNillableEnglishToFrenchAccuracy sets the "english_to_french_accuracy" field if the given value is not nil.
func (_u *UserStatsUpdateOne) SetNillableEnglishToFrenchAccuracy(v *float64) *UserStatsUpdateOne {
	if v != nil {
		_u.SetEnglishToFrenchAccuracy(*v)
	}
	return _u
}

// AddEnglishToFrenchAccuracy adds value to the "english_to_french_accuracy" field.
func (_u *UserStatsUpdateOne) AddEnglishToFrenchAccuracy(v float64) *UserStatsUpdateOne {
	_u.mutation.AddEnglishToFrenchAccuracy(v)
	return _u
}

// SetFrenchToEnglishAccuracy sets the "french_to_english_accuracy" field.
func (_u *UserStatsUpdateOne) SetFrenchToEnglishAccuracy(v float64) *UserStatsUpdateOne {
	_u.mutation.ResetFrenchToEnglishAccuracy()
	_u.mutation.SetFrenchToEnglishAccuracy(v)
	return _u
}

// SetNillableFrenchToEnglishAccuracy sets the "french_to_english_accuracy" field if the given value is not nil.
func (_u *UserStatsUpdateOne) SetNillableFrenchToEnglishAccuracy(v *float64) *UserStatsUpdateOne {
	if v != nil {
		_u.SetFrenchToEnglishAccuracy(*v)
	}
	return _u
}

// AddFrenchToEnglishAccuracy adds value to the "french_to_english_accuracy" field.
func (_u *UserStatsUpdateOne) AddFrenchToEnglishAccuracy(v float64) *UserStatsUpdateOne {
	_u.mutation.AddFrenchToEnglishAccuracy(v)
	return _u
}

// SetPronunciationAccuracy sets the "pronunciation_accuracy" field.
func (_u *UserStatsUpdateOne) SetPronunciationAccuracy(v float64) *UserStatsUpdateOne {
	_u.mutation.ResetPronunciationAccuracy()
	_u.mutation.SetPronunciationAccuracy(v)
	return _u
}

// SetNillablePronunciationAccuracy sets the "pronunciation_accuracy" field if the given value is not nil.
func (_u *UserStatsUpdateOne) SetNillablePronunciationAccuracy(v *float64) *UserStatsUpdateOne {
	if v != nil {
		_u.SetPronunciationAccuracy(*v)
	}
	return _u
}

// AddPronunciationAccuracy adds value to the "pronunciation_accuracy" field.
func (_u *UserStatsUpdateOne) AddPronunciationAccuracy(v float64) *UserStatsUpdateOne {
	_u.mutation.AddPronunciationAccuracy(v)
	return _u
}

// SetAverageResponseTimeMs sets the "average_response_time_ms" field.
func (_u *UserStatsUpdateOne) SetAverageResponseTimeMs(v int) *UserStatsUpdateOne {
	_u.mutation.ResetAverageResponseTimeMs()
	_u.mutation.SetAverageResponseTimeMs(v)
	return _u
}

// SetNillableAverageResponseTimeMs sets the "average_response_time_ms" field if the given value is not nil.
func (_u *UserStatsUpdateOne) SetNillableAverageResponseTimeMs(v *int) *UserStatsUpdateOne {
	if v != nil {
		_u.SetAverageResponseTimeMs(*v)
	}
	return _u
}

// AddAverageResponseTimeMs adds value to the "average_response_time_ms" field.
func (_u *UserStatsUpdateOne) AddAverageResponseTimeMs(v int) *UserStatsUpdateOne {
	_u.mutation.AddAverageResponseTimeMs(v)
	return _u
}

// SetWordsPerMinute sets the "words_per_minute" field.
func (_u *UserStatsUpdateOne) SetWordsPerMinute(v float64) *UserStatsUpdateOne {
	_u.mutation.ResetWordsPerMinute()
	_u.mutation.SetWordsPerMinute(v)
	return _u
}

// SetNillableWordsPerMinute sets the "words_per_minute" field if the given value is not nil.
func (_u *UserStatsUpdateOne) SetNillableWordsPerMinute(v *float64) *UserStatsUpdateOne {
	if v != nil {
		_u.SetWordsPerMinute(*v)
	}
	return _u
}

// AddWordsPerMinute adds value to the "words_per_minute" field.
func (_u *UserStatsUpdateOne) AddWordsPerMinute(v float64) *UserStatsUpdateOne {
	_u.mutation.AddWordsPerMinute(v)
	return _u
}

// SetStrengths sets the "strengths" field.
func (_u *UserStatsUpdateOne) SetStrengths(v []string) *UserStatsUpdateOne {
	_u.mutation.SetStrengths(v)
	return _u
}

// AppendStrengths appends value to the "strengths" field.
func (_u *UserStatsUpdateOne) AppendStrengths(v []string) *UserStatsUpdateOne {
	_u.mutation.AppendStrengths(v)
	return _u
}

// ClearStrengths clears the value of the "strengths" field.
func (_u *UserStatsUpdateOne) ClearStrengths() *UserStatsUpdateOne {
	_u.mutation.ClearStrengths()
	return _u
}

// SetWeaknesses sets the "weaknesses" field.
func (_u *UserStatsUpdateOne) SetWeaknesses(v []string) *UserStatsUpdateOne {
	_u.mutation.SetWeaknesses(v)
	return _u
}

// AppendWeaknesses appends value to the "weaknesses" field.
func (_u *UserStatsUpdateOne) AppendWeaknesses(v []string) *UserStatsUpdateOne {
	_u.mutation.AppendWeaknesses(v)
	return _u
}

// ClearWeaknesses clears the value of the "weaknesses" field.
func (_u *UserStatsUpdateOne) ClearWeaknesses() *UserStatsUpdateOne {
	_u.mutation.ClearWeaknesses()
	return _u
}

// SetRecommendations sets the "recommendations" field.
func (_u *UserStatsUpdateOne) SetRecommendations(v string) *UserStatsUpdateOne {
	_u.mutation.SetRecommendations(v)
	return _u
}

// SetNillableRecommendations sets the "recommendations" field if the given value is not nil.
func (_u *UserStatsUpdateOne) SetNillableRecommendations(v *string) *UserStatsUpdateOne {
	if v != nil {
		_u.SetRecommendations(*v)
	}
	return _u
}

// ClearRecommendations clears the value of the "recommendations" field.
func (_u *UserStatsUpdateOne) ClearRecommendations() *UserStatsUpdateOne {
	_u.mutation.ClearRecommendations()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *UserStatsUpdateOne) SetCreatedAt(v time.Time) *UserStatsUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *UserStatsUpdateOne) SetNillableCreatedAt(v *time.Time) *UserStatsUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UserStatsUpdateOne) SetUpdatedAt(v time.Time) *UserStatsUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *UserStatsUpdateOne) SetUserID(id int) *UserStatsUpdateOne {
	_u.mutation.SetUserID(id)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *UserStatsUpdateOne) SetUser(v *User) *UserStatsUpdateOne {
	return _u.SetUserID(v.ID)
}

// Mutation returns the UserStatsMutation object of the builder.
func (_u *UserStatsUpdateOne) Mutation() *UserStatsMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *UserStatsUpdateOne) ClearUser() *UserStatsUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// Where appends a list predicates to the UserStatsUpdate builder.
func (_u *UserStatsUpdateOne) Where(ps ...predicate.UserStats) *UserStatsUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *UserStatsUpdateOne) Select(field string, fields ...string) *UserStatsUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated UserStats entity.
func (_u *UserStatsUpdateOne) Save(ctx context.Context) (*UserStats, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserStatsUpdateOne) SaveX(ctx context.Context) *UserStats {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *UserStatsUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserStatsUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserStatsUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := userstats.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserStatsUpdateOne) check() error {
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserStats.user"`)
	}
	return nil
}

func (_u *UserStatsUpdateOne) sqlSave(ctx context.Context) (_node *UserStats, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userstats.Table, userstats.Columns, sqlgraph.NewFieldSpec(userstats.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserStats.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userstats.FieldID)
		for _, f := range fields {
			if !userstats.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userstats.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.StatDate(); ok {
		_spec.SetField(userstats.FieldStatDate, field.TypeTime, value)
	}
	if value, ok := _u.mutation.QuestionsAnswered(); ok {
		_spec.SetField(userstats.FieldQuestionsAnswered, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedQuestionsAnswered(); ok {
		_spec.AddField(userstats.FieldQuestionsAnswered, field.TypeInt, value)
	}
	if value, ok := _u.mutation.QuestionsCorrect(); ok {
		_spec.SetField(userstats.FieldQuestionsCorrect, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedQuestionsCorrect(); ok {
		_spec.AddField(userstats.FieldQuestionsCorrect, field.TypeInt, value)
	}
	if value, ok := _u.mutation.WordsLearned(); ok {
		_spec.SetField(userstats.FieldWordsLearned, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedWordsLearned(); ok {
		_spec.AddField(userstats.FieldWordsLearned, field.TypeInt, value)
	}
	if value, ok := _u.mutation.TotalStudyTimeMinutes(); ok {
		_spec.SetField(userstats.FieldTotalStudyTimeMinutes, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedTotalStudyTimeMinutes(); ok {
		_spec.AddField(userstats.FieldTotalStudyTimeMinutes, field.TypeInt, value)
	}
	if value, ok := _u.mutation.StreakDays(); ok {
		_spec.SetField(userstats.FieldStreakDays, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStreakDays(); ok {
		_spec.AddField(userstats.FieldStreakDays, field.TypeInt, value)
	}
	if value, ok := _u.mutation.EnglishToFrenchAccuracy(); ok {
		_spec.SetField(userstats.FieldEnglishToFrenchAccuracy, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedEnglishToFrenchAccuracy(); ok {
		_spec.AddField(userstats.FieldEnglishToFrenchAccuracy, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.FrenchToEnglishAccuracy(); ok {
		_spec.SetField(userstats.FieldFrenchToEnglishAccuracy, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedFrenchToEnglishAccuracy(); ok {
		_spec.AddField(userstats.FieldFrenchToEnglishAccuracy, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.PronunciationAccuracy(); ok {
		_spec.SetField(userstats.FieldPronunciationAccuracy, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedPronunciationAccuracy(); ok {
		_spec.AddField(userstats.FieldPronunciationAccuracy, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AverageResponseTimeMs(); ok {
		_spec.SetField(userstats.FieldAverageResponseTimeMs, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedAverageResponseTimeMs(); ok {
		_spec.AddField(userstats.FieldAverageResponseTimeMs, field.TypeInt, value)
	}
	if value, ok := _u.mutation.WordsPerMinute(); ok {
		_spec.SetField(userstats.FieldWordsPerMinute, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedWordsPerMinute(); ok {
		_spec.AddField(userstats.FieldWordsPerMinute, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Strengths(); ok {
		_spec.SetField(userstats.FieldStrengths, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedStrengths(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, userstats.FieldStrengths, value)
		})
	}
	if _u.mutation.StrengthsCleared() {
		_spec.ClearField(userstats.FieldStrengths, field.TypeJSON)
	}
	if value, ok := _u.mutation.Weaknesses(); ok {
		_spec.SetField(userstats.FieldWeaknesses, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedWeaknesses(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, userstats.FieldWeaknesses, value)
		})
	}
	if _u.mutation.WeaknessesCleared() {
		_spec.ClearField(userstats.FieldWeaknesses, field.TypeJSON)
	}
	if value, ok := _u.mutation.Recommendations(); ok {
		_spec.SetField(userstats.FieldRecommendations, field.TypeString, value)
	}
	if _u.mutation.RecommendationsCleared() {
		_spec.ClearField(userstats.FieldRecommendations, field.TypeString)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(userstats.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(userstats.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userstats.UserTable,
			Columns: []string{userstats.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userstats.UserTable,
			Columns: []string{userstats.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserStats{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userstats.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
